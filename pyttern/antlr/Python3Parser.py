# Generated from Python3Parser.g4 by ANTLR 4.7.2
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO

if __name__ is not None and "." in __name__:
    from .Python3ParserBase import Python3ParserBase
else:
    from Python3ParserBase import Python3ParserBase

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3k")
        buf.write("\u063e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\3\2\3\2\3\2\3\2\3\2\5\2\u0110")
        buf.write("\n\2\3\3\3\3\7\3\u0114\n\3\f\3\16\3\u0117\13\3\3\3\3\3")
        buf.write("\3\4\3\4\7\4\u011d\n\4\f\4\16\4\u0120\13\4\3\4\3\4\3\5")
        buf.write("\3\5\3\5\3\5\5\5\u0128\n\5\3\5\5\5\u012b\n\5\3\5\3\5\3")
        buf.write("\6\6\6\u0130\n\6\r\6\16\6\u0131\3\7\3\7\3\7\3\7\5\7\u0138")
        buf.write("\n\7\3\b\3\b\3\b\3\t\3\t\3\t\3\t\5\t\u0141\n\t\3\t\3\t")
        buf.write("\3\t\5\t\u0146\n\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\5\n\u014f")
        buf.write("\n\n\3\n\3\n\3\n\3\n\5\n\u0155\n\n\7\n\u0157\n\n\f\n\16")
        buf.write("\n\u015a\13\n\3\n\3\n\3\n\5\n\u015f\n\n\3\n\3\n\3\n\3")
        buf.write("\n\5\n\u0165\n\n\7\n\u0167\n\n\f\n\16\n\u016a\13\n\3\n")
        buf.write("\3\n\3\n\3\n\5\n\u0170\n\n\5\n\u0172\n\n\5\n\u0174\n\n")
        buf.write("\3\n\3\n\3\n\5\n\u0179\n\n\5\n\u017b\n\n\5\n\u017d\n\n")
        buf.write("\3\n\3\n\5\n\u0181\n\n\3\n\3\n\3\n\3\n\5\n\u0187\n\n\7")
        buf.write("\n\u0189\n\n\f\n\16\n\u018c\13\n\3\n\3\n\3\n\3\n\5\n\u0192")
        buf.write("\n\n\5\n\u0194\n\n\5\n\u0196\n\n\3\n\3\n\3\n\5\n\u019b")
        buf.write("\n\n\5\n\u019d\n\n\3\n\3\n\3\13\3\13\3\13\5\13\u01a4\n")
        buf.write("\13\3\13\3\13\5\13\u01a8\n\13\3\f\3\f\3\f\5\f\u01ad\n")
        buf.write("\f\3\f\3\f\3\f\3\f\5\f\u01b3\n\f\7\f\u01b5\n\f\f\f\16")
        buf.write("\f\u01b8\13\f\3\f\3\f\3\f\5\f\u01bd\n\f\3\f\3\f\3\f\3")
        buf.write("\f\5\f\u01c3\n\f\7\f\u01c5\n\f\f\f\16\f\u01c8\13\f\3\f")
        buf.write("\3\f\3\f\3\f\5\f\u01ce\n\f\5\f\u01d0\n\f\5\f\u01d2\n\f")
        buf.write("\3\f\3\f\3\f\5\f\u01d7\n\f\5\f\u01d9\n\f\5\f\u01db\n\f")
        buf.write("\3\f\3\f\5\f\u01df\n\f\3\f\3\f\3\f\3\f\5\f\u01e5\n\f\7")
        buf.write("\f\u01e7\n\f\f\f\16\f\u01ea\13\f\3\f\3\f\3\f\3\f\5\f\u01f0")
        buf.write("\n\f\5\f\u01f2\n\f\5\f\u01f4\n\f\3\f\3\f\3\f\5\f\u01f9")
        buf.write("\n\f\5\f\u01fb\n\f\3\r\3\r\5\r\u01ff\n\r\3\16\3\16\3\16")
        buf.write("\5\16\u0204\n\16\3\17\3\17\3\17\7\17\u0209\n\17\f\17\16")
        buf.write("\17\u020c\13\17\3\17\5\17\u020f\n\17\3\17\3\17\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u021b\n\20\3\21")
        buf.write("\3\21\3\21\3\21\3\21\5\21\u0222\n\21\3\21\3\21\3\21\5")
        buf.write("\21\u0227\n\21\7\21\u0229\n\21\f\21\16\21\u022c\13\21")
        buf.write("\5\21\u022e\n\21\3\22\3\22\3\22\3\22\5\22\u0234\n\22\3")
        buf.write("\23\3\23\5\23\u0238\n\23\3\23\3\23\3\23\5\23\u023d\n\23")
        buf.write("\7\23\u023f\n\23\f\23\16\23\u0242\13\23\3\23\5\23\u0245")
        buf.write("\n\23\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\27\3\27\3\27")
        buf.write("\3\27\3\27\5\27\u0253\n\27\3\30\3\30\3\31\3\31\3\32\3")
        buf.write("\32\5\32\u025b\n\32\3\33\3\33\3\34\3\34\3\34\3\34\5\34")
        buf.write("\u0263\n\34\5\34\u0265\n\34\3\35\3\35\5\35\u0269\n\35")
        buf.write("\3\36\3\36\3\36\3\37\3\37\7\37\u0270\n\37\f\37\16\37\u0273")
        buf.write("\13\37\3\37\3\37\6\37\u0277\n\37\r\37\16\37\u0278\5\37")
        buf.write("\u027b\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0284")
        buf.write("\n\37\3 \3 \3 \5 \u0289\n \3!\3!\3!\5!\u028e\n!\3\"\3")
        buf.write("\"\3\"\7\"\u0293\n\"\f\"\16\"\u0296\13\"\3\"\5\"\u0299")
        buf.write("\n\"\3#\3#\3#\7#\u029e\n#\f#\16#\u02a1\13#\3$\3$\3$\7")
        buf.write("$\u02a6\n$\f$\16$\u02a9\13$\3%\3%\3%\3%\7%\u02af\n%\f")
        buf.write("%\16%\u02b2\13%\3&\3&\3&\3&\7&\u02b8\n&\f&\16&\u02bb\13")
        buf.write("&\3\'\3\'\3\'\3\'\5\'\u02c1\n\'\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\3(\3(\5(\u02ce\n(\3)\3)\3)\3)\5)\u02d4\n)\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\7*\u02df\n*\f*\16*\u02e2\13*\3*\3")
        buf.write("*\3*\5*\u02e7\n*\3+\3+\3+\3+\3+\3+\3+\5+\u02f0\n+\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\5,\u02fb\n,\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\6-\u0304\n-\r-\16-\u0305\3-\3-\3-\5-\u030b\n-\3-\3-")
        buf.write("\3-\5-\u0310\n-\3-\3-\3-\5-\u0315\n-\3.\3.\3.\3.\7.\u031b")
        buf.write("\n.\f.\16.\u031e\13.\3.\3.\3.\3/\3/\3/\5/\u0326\n/\3\60")
        buf.write("\3\60\3\60\3\60\5\60\u032c\n\60\5\60\u032e\n\60\3\61\3")
        buf.write("\61\3\61\3\61\6\61\u0334\n\61\r\61\16\61\u0335\3\61\3")
        buf.write("\61\5\61\u033a\n\61\3\62\3\62\3\62\3\62\3\62\3\62\6\62")
        buf.write("\u0342\n\62\r\62\16\62\u0343\3\62\3\62\3\63\3\63\3\63")
        buf.write("\5\63\u034b\n\63\3\63\5\63\u034e\n\63\3\64\3\64\6\64\u0352")
        buf.write("\n\64\r\64\16\64\u0353\3\64\5\64\u0357\n\64\3\65\3\65")
        buf.write("\3\65\5\65\u035c\n\65\3\66\3\66\3\66\5\66\u0361\n\66\3")
        buf.write("\66\3\66\3\66\3\67\3\67\3\67\38\38\58\u036b\n8\39\39\5")
        buf.write("9\u036f\n9\3:\3:\3:\3:\3;\3;\3;\7;\u0378\n;\f;\16;\u037b")
        buf.write("\13;\3<\3<\3<\3<\3<\3<\3<\3<\5<\u0385\n<\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\5=\u038f\n=\3>\3>\3>\3>\3>\3>\3>\3>\5>\u0399")
        buf.write("\n>\3?\3?\3?\3?\3?\3?\3?\3?\5?\u03a3\n?\3@\3@\3@\5@\u03a8")
        buf.write("\n@\3A\3A\3A\5A\u03ad\nA\3B\3B\3C\3C\3D\3D\3E\3E\3E\3")
        buf.write("F\3F\3G\3G\3G\3H\3H\3H\6H\u03c0\nH\rH\16H\u03c1\3I\3I")
        buf.write("\5I\u03c6\nI\3J\3J\3J\3J\3K\3K\5K\u03ce\nK\3K\3K\3K\5")
        buf.write("K\u03d3\nK\3K\5K\u03d6\nK\3L\3L\3L\5L\u03db\nL\3M\3M\3")
        buf.write("M\7M\u03e0\nM\fM\16M\u03e3\13M\3M\5M\u03e6\nM\3N\3N\5")
        buf.write("N\u03ea\nN\3O\3O\3O\3O\5O\u03f0\nO\3P\3P\3P\3P\3P\5P\u03f7")
        buf.write("\nP\3P\3P\3P\3P\3P\3P\3P\5P\u0400\nP\3P\3P\3P\3P\3P\5")
        buf.write("P\u0407\nP\3P\3P\5P\u040b\nP\3Q\3Q\3Q\7Q\u0410\nQ\fQ\16")
        buf.write("Q\u0413\13Q\3R\3R\5R\u0417\nR\3R\3R\3R\3S\3S\3S\3T\3T")
        buf.write("\3T\3T\3T\3T\3T\3T\5T\u0427\nT\3T\3T\3T\3T\3T\3T\5T\u042f")
        buf.write("\nT\3T\3T\3T\3T\3T\3T\3T\3T\5T\u0439\nT\3T\3T\5T\u043d")
        buf.write("\nT\3U\3U\3U\7U\u0442\nU\fU\16U\u0445\13U\3V\3V\3V\7V")
        buf.write("\u044a\nV\fV\16V\u044d\13V\3W\3W\3W\3W\3X\3X\3X\3X\3X")
        buf.write("\3X\5X\u0459\nX\3X\5X\u045c\nX\3Y\3Y\5Y\u0460\nY\3Z\3")
        buf.write("Z\5Z\u0464\nZ\3Z\3Z\3Z\3[\3[\5[\u046b\n[\3[\3[\3[\3\\")
        buf.write("\3\\\3\\\7\\\u0473\n\\\f\\\16\\\u0476\13\\\3]\3]\3]\7")
        buf.write("]\u047b\n]\f]\16]\u047e\13]\3^\3^\3^\5^\u0483\n^\3_\3")
        buf.write("_\3_\3_\7_\u0489\n_\f_\16_\u048c\13_\3`\3`\3`\3`\3`\3")
        buf.write("`\3`\3`\3`\3`\3`\3`\3`\5`\u049b\n`\3a\3a\3a\3b\3b\3b\3")
        buf.write("b\6b\u04a4\nb\rb\16b\u04a5\3b\5b\u04a9\nb\3b\3b\3b\3b")
        buf.write("\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\7")
        buf.write("b\u04c0\nb\fb\16b\u04c3\13b\3c\5c\u04c6\nc\3c\3c\7c\u04ca")
        buf.write("\nc\fc\16c\u04cd\13c\3d\3d\3d\5d\u04d2\nd\3d\3d\3d\5d")
        buf.write("\u04d7\nd\3d\3d\3d\5d\u04dc\nd\3d\3d\3d\3d\3d\6d\u04e3")
        buf.write("\nd\rd\16d\u04e4\3d\3d\3d\3d\5d\u04eb\nd\3e\3e\3f\3f\5")
        buf.write("f\u04f1\nf\3f\3f\3f\3f\5f\u04f7\nf\7f\u04f9\nf\ff\16f")
        buf.write("\u04fc\13f\3f\5f\u04ff\nf\5f\u0501\nf\3g\3g\5g\u0505\n")
        buf.write("g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u050f\ng\5g\u0511\ng\3h\3")
        buf.write("h\3h\7h\u0516\nh\fh\16h\u0519\13h\3h\5h\u051c\nh\3i\3")
        buf.write("i\5i\u0520\ni\3i\3i\5i\u0524\ni\3i\5i\u0527\ni\5i\u0529")
        buf.write("\ni\3j\3j\5j\u052d\nj\3k\3k\5k\u0531\nk\3k\3k\3k\5k\u0536")
        buf.write("\nk\7k\u0538\nk\fk\16k\u053b\13k\3k\5k\u053e\nk\3l\3l")
        buf.write("\3l\7l\u0543\nl\fl\16l\u0546\13l\3l\5l\u0549\nl\3m\3m")
        buf.write("\3m\3m\3m\3m\5m\u0551\nm\3m\3m\3m\3m\3m\3m\3m\3m\5m\u055b")
        buf.write("\nm\7m\u055d\nm\fm\16m\u0560\13m\3m\5m\u0563\nm\5m\u0565")
        buf.write("\nm\3m\3m\5m\u0569\nm\3m\3m\3m\3m\5m\u056f\nm\7m\u0571")
        buf.write("\nm\fm\16m\u0574\13m\3m\5m\u0577\nm\5m\u0579\nm\5m\u057b")
        buf.write("\nm\3n\3n\3n\3n\5n\u0581\nn\3n\3n\5n\u0585\nn\3n\5n\u0588")
        buf.write("\nn\3n\3n\3n\3o\3o\3o\7o\u0590\no\fo\16o\u0593\13o\3o")
        buf.write("\5o\u0596\no\3p\3p\3p\3p\5p\u059c\np\3p\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\5p\u05a6\np\3q\3q\5q\u05aa\nq\3r\5r\u05ad\nr\3")
        buf.write("r\3r\3r\3r\3r\5r\u05b4\nr\3s\3s\3s\5s\u05b9\ns\3t\3t\3")
        buf.write("u\3u\5u\u05bf\nu\3v\3v\3v\5v\u05c4\nv\3w\6w\u05c7\nw\r")
        buf.write("w\16w\u05c8\3x\3x\3x\3x\7x\u05cf\nx\fx\16x\u05d2\13x\3")
        buf.write("x\3x\3y\3y\3y\3y\3y\5y\u05db\ny\3y\3y\3z\3z\3z\3z\5z\u05e3")
        buf.write("\nz\3z\3z\3{\3{\3{\5{\u05ea\n{\3|\3|\5|\u05ee\n|\3}\3")
        buf.write("}\5}\u05f2\n}\3}\5}\u05f5\n}\3~\3~\5~\u05f9\n~\3~\3~\3")
        buf.write("\177\3\177\5\177\u05ff\n\177\3\177\3\177\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\5\u0080\u0607\n\u0080\3\u0080\3\u0080")
        buf.write("\5\u0080\u060b\n\u0080\3\u0081\3\u0081\3\u0081\5\u0081")
        buf.write("\u0610\n\u0081\3\u0082\3\u0082\5\u0082\u0614\n\u0082\3")
        buf.write("\u0082\3\u0082\5\u0082\u0618\n\u0082\3\u0082\3\u0082\3")
        buf.write("\u0083\3\u0083\5\u0083\u061e\n\u0083\3\u0083\3\u0083\3")
        buf.write("\u0083\3\u0083\3\u0083\5\u0083\u0625\n\u0083\3\u0083\3")
        buf.write("\u0083\3\u0083\5\u0083\u062a\n\u0083\3\u0084\3\u0084\3")
        buf.write("\u0084\3\u0084\3\u0084\3\u0084\6\u0084\u0632\n\u0084\r")
        buf.write("\u0084\16\u0084\u0633\5\u0084\u0636\n\u0084\3\u0084\3")
        buf.write("\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0085\2\3\u00c2")
        buf.write("\u0086\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,")
        buf.write(".\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8")
        buf.write("\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da")
        buf.write("\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec")
        buf.write("\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe")
        buf.write("\u0100\u0102\u0104\u0106\u0108\2\t\3\2[g\3\29:\4\2JKO")
        buf.write("O\5\2;;LNYY\3\2JK\3\2HI\5\2  **\60\60\2\u06ee\2\u010f")
        buf.write("\3\2\2\2\4\u0115\3\2\2\2\6\u011a\3\2\2\2\b\u0123\3\2\2")
        buf.write("\2\n\u012f\3\2\2\2\f\u0133\3\2\2\2\16\u0139\3\2\2\2\20")
        buf.write("\u013c\3\2\2\2\22\u014a\3\2\2\2\24\u01a7\3\2\2\2\26\u01fa")
        buf.write("\3\2\2\2\30\u01fe\3\2\2\2\32\u0203\3\2\2\2\34\u0205\3")
        buf.write("\2\2\2\36\u021a\3\2\2\2 \u021c\3\2\2\2\"\u022f\3\2\2\2")
        buf.write("$\u0237\3\2\2\2&\u0246\3\2\2\2(\u0248\3\2\2\2*\u024b\3")
        buf.write("\2\2\2,\u0252\3\2\2\2.\u0254\3\2\2\2\60\u0256\3\2\2\2")
        buf.write("\62\u0258\3\2\2\2\64\u025c\3\2\2\2\66\u025e\3\2\2\28\u0268")
        buf.write("\3\2\2\2:\u026a\3\2\2\2<\u026d\3\2\2\2>\u0285\3\2\2\2")
        buf.write("@\u028a\3\2\2\2B\u028f\3\2\2\2D\u029a\3\2\2\2F\u02a2\3")
        buf.write("\2\2\2H\u02aa\3\2\2\2J\u02b3\3\2\2\2L\u02bc\3\2\2\2N\u02cd")
        buf.write("\3\2\2\2P\u02cf\3\2\2\2R\u02d5\3\2\2\2T\u02e8\3\2\2\2")
        buf.write("V\u02f1\3\2\2\2X\u02fc\3\2\2\2Z\u0316\3\2\2\2\\\u0322")
        buf.write("\3\2\2\2^\u0327\3\2\2\2`\u0339\3\2\2\2b\u033b\3\2\2\2")
        buf.write("d\u034d\3\2\2\2f\u034f\3\2\2\2h\u035b\3\2\2\2j\u035d\3")
        buf.write("\2\2\2l\u0365\3\2\2\2n\u036a\3\2\2\2p\u036e\3\2\2\2r\u0370")
        buf.write("\3\2\2\2t\u0374\3\2\2\2v\u0384\3\2\2\2x\u038e\3\2\2\2")
        buf.write("z\u0398\3\2\2\2|\u03a2\3\2\2\2~\u03a7\3\2\2\2\u0080\u03ac")
        buf.write("\3\2\2\2\u0082\u03ae\3\2\2\2\u0084\u03b0\3\2\2\2\u0086")
        buf.write("\u03b2\3\2\2\2\u0088\u03b4\3\2\2\2\u008a\u03b7\3\2\2\2")
        buf.write("\u008c\u03b9\3\2\2\2\u008e\u03bc\3\2\2\2\u0090\u03c5\3")
        buf.write("\2\2\2\u0092\u03c7\3\2\2\2\u0094\u03d5\3\2\2\2\u0096\u03d7")
        buf.write("\3\2\2\2\u0098\u03dc\3\2\2\2\u009a\u03e9\3\2\2\2\u009c")
        buf.write("\u03ef\3\2\2\2\u009e\u040a\3\2\2\2\u00a0\u040c\3\2\2\2")
        buf.write("\u00a2\u0416\3\2\2\2\u00a4\u041b\3\2\2\2\u00a6\u043c\3")
        buf.write("\2\2\2\u00a8\u043e\3\2\2\2\u00aa\u0446\3\2\2\2\u00ac\u044e")
        buf.write("\3\2\2\2\u00ae\u045b\3\2\2\2\u00b0\u045f\3\2\2\2\u00b2")
        buf.write("\u0461\3\2\2\2\u00b4\u0468\3\2\2\2\u00b6\u046f\3\2\2\2")
        buf.write("\u00b8\u0477\3\2\2\2\u00ba\u0482\3\2\2\2\u00bc\u0484\3")
        buf.write("\2\2\2\u00be\u049a\3\2\2\2\u00c0\u049c\3\2\2\2\u00c2\u04a8")
        buf.write("\3\2\2\2\u00c4\u04c5\3\2\2\2\u00c6\u04ea\3\2\2\2\u00c8")
        buf.write("\u04ec\3\2\2\2\u00ca\u04f0\3\2\2\2\u00cc\u0510\3\2\2\2")
        buf.write("\u00ce\u0512\3\2\2\2\u00d0\u0528\3\2\2\2\u00d2\u052a\3")
        buf.write("\2\2\2\u00d4\u0530\3\2\2\2\u00d6\u053f\3\2\2\2\u00d8\u057a")
        buf.write("\3\2\2\2\u00da\u057c\3\2\2\2\u00dc\u058c\3\2\2\2\u00de")
        buf.write("\u05a5\3\2\2\2\u00e0\u05a9\3\2\2\2\u00e2\u05ac\3\2\2\2")
        buf.write("\u00e4\u05b5\3\2\2\2\u00e6\u05ba\3\2\2\2\u00e8\u05bc\3")
        buf.write("\2\2\2\u00ea\u05c3\3\2\2\2\u00ec\u05c6\3\2\2\2\u00ee\u05ca")
        buf.write("\3\2\2\2\u00f0\u05d5\3\2\2\2\u00f2\u05e2\3\2\2\2\u00f4")
        buf.write("\u05e9\3\2\2\2\u00f6\u05ed\3\2\2\2\u00f8\u05ef\3\2\2\2")
        buf.write("\u00fa\u05f6\3\2\2\2\u00fc\u05fc\3\2\2\2\u00fe\u0602\3")
        buf.write("\2\2\2\u0100\u060f\3\2\2\2\u0102\u0611\3\2\2\2\u0104\u0629")
        buf.write("\3\2\2\2\u0106\u062b\3\2\2\2\u0108\u063a\3\2\2\2\u010a")
        buf.write("\u0110\7/\2\2\u010b\u0110\5\34\17\2\u010c\u010d\5N(\2")
        buf.write("\u010d\u010e\7/\2\2\u010e\u0110\3\2\2\2\u010f\u010a\3")
        buf.write("\2\2\2\u010f\u010b\3\2\2\2\u010f\u010c\3\2\2\2\u0110\3")
        buf.write("\3\2\2\2\u0111\u0114\7/\2\2\u0112\u0114\5\32\16\2\u0113")
        buf.write("\u0111\3\2\2\2\u0113\u0112\3\2\2\2\u0114\u0117\3\2\2\2")
        buf.write("\u0115\u0113\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0118\3")
        buf.write("\2\2\2\u0117\u0115\3\2\2\2\u0118\u0119\7\2\2\3\u0119\5")
        buf.write("\3\2\2\2\u011a\u011e\5\u00d6l\2\u011b\u011d\7/\2\2\u011c")
        buf.write("\u011b\3\2\2\2\u011d\u0120\3\2\2\2\u011e\u011c\3\2\2\2")
        buf.write("\u011e\u011f\3\2\2\2\u011f\u0121\3\2\2\2\u0120\u011e\3")
        buf.write("\2\2\2\u0121\u0122\7\2\2\3\u0122\7\3\2\2\2\u0123\u0124")
        buf.write("\7Y\2\2\u0124\u012a\5F$\2\u0125\u0127\7<\2\2\u0126\u0128")
        buf.write("\5\u00dco\2\u0127\u0126\3\2\2\2\u0127\u0128\3\2\2\2\u0128")
        buf.write("\u0129\3\2\2\2\u0129\u012b\7=\2\2\u012a\u0125\3\2\2\2")
        buf.write("\u012a\u012b\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\7")
        buf.write("/\2\2\u012d\t\3\2\2\2\u012e\u0130\5\b\5\2\u012f\u012e")
        buf.write("\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u012f\3\2\2\2\u0131")
        buf.write("\u0132\3\2\2\2\u0132\13\3\2\2\2\u0133\u0137\5\n\6\2\u0134")
        buf.write("\u0138\5\u00dan\2\u0135\u0138\5\20\t\2\u0136\u0138\5\16")
        buf.write("\b\2\u0137\u0134\3\2\2\2\u0137\u0135\3\2\2\2\u0137\u0136")
        buf.write("\3\2\2\2\u0138\r\3\2\2\2\u0139\u013a\7\13\2\2\u013a\u013b")
        buf.write("\5\20\t\2\u013b\17\3\2\2\2\u013c\u0140\7\21\2\2\u013d")
        buf.write("\u0141\5\u00c8e\2\u013e\u0141\5\u00f8}\2\u013f\u0141\5")
        buf.write("\u00fc\177\2\u0140\u013d\3\2\2\2\u0140\u013e\3\2\2\2\u0140")
        buf.write("\u013f\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0145\5\22\n")
        buf.write("\2\u0143\u0144\7Z\2\2\u0144\u0146\5\u00aeX\2\u0145\u0143")
        buf.write("\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147\3\2\2\2\u0147")
        buf.write("\u0148\7?\2\2\u0148\u0149\5`\61\2\u0149\21\3\2\2\2\u014a")
        buf.write("\u019c\7<\2\2\u014b\u014e\5\24\13\2\u014c\u014d\7B\2\2")
        buf.write("\u014d\u014f\5\u00aeX\2\u014e\u014c\3\2\2\2\u014e\u014f")
        buf.write("\3\2\2\2\u014f\u0158\3\2\2\2\u0150\u0151\7>\2\2\u0151")
        buf.write("\u0154\5\24\13\2\u0152\u0153\7B\2\2\u0153\u0155\5\u00ae")
        buf.write("X\2\u0154\u0152\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0157")
        buf.write("\3\2\2\2\u0156\u0150\3\2\2\2\u0157\u015a\3\2\2\2\u0158")
        buf.write("\u0156\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u017c\3\2\2\2")
        buf.write("\u015a\u0158\3\2\2\2\u015b\u017a\7>\2\2\u015c\u015e\7")
        buf.write(";\2\2\u015d\u015f\5\24\13\2\u015e\u015d\3\2\2\2\u015e")
        buf.write("\u015f\3\2\2\2\u015f\u0168\3\2\2\2\u0160\u0161\7>\2\2")
        buf.write("\u0161\u0164\5\24\13\2\u0162\u0163\7B\2\2\u0163\u0165")
        buf.write("\5\u00aeX\2\u0164\u0162\3\2\2\2\u0164\u0165\3\2\2\2\u0165")
        buf.write("\u0167\3\2\2\2\u0166\u0160\3\2\2\2\u0167\u016a\3\2\2\2")
        buf.write("\u0168\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169\u0173\3")
        buf.write("\2\2\2\u016a\u0168\3\2\2\2\u016b\u0171\7>\2\2\u016c\u016d")
        buf.write("\7A\2\2\u016d\u016f\5\24\13\2\u016e\u0170\7>\2\2\u016f")
        buf.write("\u016e\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0172\3\2\2\2")
        buf.write("\u0171\u016c\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0174\3")
        buf.write("\2\2\2\u0173\u016b\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u017b")
        buf.write("\3\2\2\2\u0175\u0176\7A\2\2\u0176\u0178\5\24\13\2\u0177")
        buf.write("\u0179\7>\2\2\u0178\u0177\3\2\2\2\u0178\u0179\3\2\2\2")
        buf.write("\u0179\u017b\3\2\2\2\u017a\u015c\3\2\2\2\u017a\u0175\3")
        buf.write("\2\2\2\u017a\u017b\3\2\2\2\u017b\u017d\3\2\2\2\u017c\u015b")
        buf.write("\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u019d\3\2\2\2\u017e")
        buf.write("\u0180\7;\2\2\u017f\u0181\5\24\13\2\u0180\u017f\3\2\2")
        buf.write("\2\u0180\u0181\3\2\2\2\u0181\u018a\3\2\2\2\u0182\u0183")
        buf.write("\7>\2\2\u0183\u0186\5\24\13\2\u0184\u0185\7B\2\2\u0185")
        buf.write("\u0187\5\u00aeX\2\u0186\u0184\3\2\2\2\u0186\u0187\3\2")
        buf.write("\2\2\u0187\u0189\3\2\2\2\u0188\u0182\3\2\2\2\u0189\u018c")
        buf.write("\3\2\2\2\u018a\u0188\3\2\2\2\u018a\u018b\3\2\2\2\u018b")
        buf.write("\u0195\3\2\2\2\u018c\u018a\3\2\2\2\u018d\u0193\7>\2\2")
        buf.write("\u018e\u018f\7A\2\2\u018f\u0191\5\24\13\2\u0190\u0192")
        buf.write("\7>\2\2\u0191\u0190\3\2\2\2\u0191\u0192\3\2\2\2\u0192")
        buf.write("\u0194\3\2\2\2\u0193\u018e\3\2\2\2\u0193\u0194\3\2\2\2")
        buf.write("\u0194\u0196\3\2\2\2\u0195\u018d\3\2\2\2\u0195\u0196\3")
        buf.write("\2\2\2\u0196\u019d\3\2\2\2\u0197\u0198\7A\2\2\u0198\u019a")
        buf.write("\5\24\13\2\u0199\u019b\7>\2\2\u019a\u0199\3\2\2\2\u019a")
        buf.write("\u019b\3\2\2\2\u019b\u019d\3\2\2\2\u019c\u014b\3\2\2\2")
        buf.write("\u019c\u017e\3\2\2\2\u019c\u0197\3\2\2\2\u019c\u019d\3")
        buf.write("\2\2\2\u019d\u019e\3\2\2\2\u019e\u019f\7=\2\2\u019f\23")
        buf.write("\3\2\2\2\u01a0\u01a3\5\u00c8e\2\u01a1\u01a2\7?\2\2\u01a2")
        buf.write("\u01a4\5\u00aeX\2\u01a3\u01a1\3\2\2\2\u01a3\u01a4\3\2")
        buf.write("\2\2\u01a4\u01a8\3\2\2\2\u01a5\u01a8\5\u00f4{\2\u01a6")
        buf.write("\u01a8\5\u0108\u0085\2\u01a7\u01a0\3\2\2\2\u01a7\u01a5")
        buf.write("\3\2\2\2\u01a7\u01a6\3\2\2\2\u01a8\25\3\2\2\2\u01a9\u01ac")
        buf.write("\5\30\r\2\u01aa\u01ab\7B\2\2\u01ab\u01ad\5\u00aeX\2\u01ac")
        buf.write("\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01b6\3\2\2\2")
        buf.write("\u01ae\u01af\7>\2\2\u01af\u01b2\5\30\r\2\u01b0\u01b1\7")
        buf.write("B\2\2\u01b1\u01b3\5\u00aeX\2\u01b2\u01b0\3\2\2\2\u01b2")
        buf.write("\u01b3\3\2\2\2\u01b3\u01b5\3\2\2\2\u01b4\u01ae\3\2\2\2")
        buf.write("\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6\u01b7\3")
        buf.write("\2\2\2\u01b7\u01da\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b9\u01d8")
        buf.write("\7>\2\2\u01ba\u01bc\7;\2\2\u01bb\u01bd\5\30\r\2\u01bc")
        buf.write("\u01bb\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01c6\3\2\2\2")
        buf.write("\u01be\u01bf\7>\2\2\u01bf\u01c2\5\30\r\2\u01c0\u01c1\7")
        buf.write("B\2\2\u01c1\u01c3\5\u00aeX\2\u01c2\u01c0\3\2\2\2\u01c2")
        buf.write("\u01c3\3\2\2\2\u01c3\u01c5\3\2\2\2\u01c4\u01be\3\2\2\2")
        buf.write("\u01c5\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c6\u01c7\3")
        buf.write("\2\2\2\u01c7\u01d1\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c9\u01cf")
        buf.write("\7>\2\2\u01ca\u01cb\7A\2\2\u01cb\u01cd\5\30\r\2\u01cc")
        buf.write("\u01ce\7>\2\2\u01cd\u01cc\3\2\2\2\u01cd\u01ce\3\2\2\2")
        buf.write("\u01ce\u01d0\3\2\2\2\u01cf\u01ca\3\2\2\2\u01cf\u01d0\3")
        buf.write("\2\2\2\u01d0\u01d2\3\2\2\2\u01d1\u01c9\3\2\2\2\u01d1\u01d2")
        buf.write("\3\2\2\2\u01d2\u01d9\3\2\2\2\u01d3\u01d4\7A\2\2\u01d4")
        buf.write("\u01d6\5\30\r\2\u01d5\u01d7\7>\2\2\u01d6\u01d5\3\2\2\2")
        buf.write("\u01d6\u01d7\3\2\2\2\u01d7\u01d9\3\2\2\2\u01d8\u01ba\3")
        buf.write("\2\2\2\u01d8\u01d3\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01db")
        buf.write("\3\2\2\2\u01da\u01b9\3\2\2\2\u01da\u01db\3\2\2\2\u01db")
        buf.write("\u01fb\3\2\2\2\u01dc\u01de\7;\2\2\u01dd\u01df\5\30\r\2")
        buf.write("\u01de\u01dd\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e8\3")
        buf.write("\2\2\2\u01e0\u01e1\7>\2\2\u01e1\u01e4\5\30\r\2\u01e2\u01e3")
        buf.write("\7B\2\2\u01e3\u01e5\5\u00aeX\2\u01e4\u01e2\3\2\2\2\u01e4")
        buf.write("\u01e5\3\2\2\2\u01e5\u01e7\3\2\2\2\u01e6\u01e0\3\2\2\2")
        buf.write("\u01e7\u01ea\3\2\2\2\u01e8\u01e6\3\2\2\2\u01e8\u01e9\3")
        buf.write("\2\2\2\u01e9\u01f3\3\2\2\2\u01ea\u01e8\3\2\2\2\u01eb\u01f1")
        buf.write("\7>\2\2\u01ec\u01ed\7A\2\2\u01ed\u01ef\5\30\r\2\u01ee")
        buf.write("\u01f0\7>\2\2\u01ef\u01ee\3\2\2\2\u01ef\u01f0\3\2\2\2")
        buf.write("\u01f0\u01f2\3\2\2\2\u01f1\u01ec\3\2\2\2\u01f1\u01f2\3")
        buf.write("\2\2\2\u01f2\u01f4\3\2\2\2\u01f3\u01eb\3\2\2\2\u01f3\u01f4")
        buf.write("\3\2\2\2\u01f4\u01fb\3\2\2\2\u01f5\u01f6\7A\2\2\u01f6")
        buf.write("\u01f8\5\30\r\2\u01f7\u01f9\7>\2\2\u01f8\u01f7\3\2\2\2")
        buf.write("\u01f8\u01f9\3\2\2\2\u01f9\u01fb\3\2\2\2\u01fa\u01a9\3")
        buf.write("\2\2\2\u01fa\u01dc\3\2\2\2\u01fa\u01f5\3\2\2\2\u01fb\27")
        buf.write("\3\2\2\2\u01fc\u01ff\5\u00c8e\2\u01fd\u01ff\5\u00f4{\2")
        buf.write("\u01fe\u01fc\3\2\2\2\u01fe\u01fd\3\2\2\2\u01ff\31\3\2")
        buf.write("\2\2\u0200\u0204\5\u00f2z\2\u0201\u0204\5\34\17\2\u0202")
        buf.write("\u0204\5N(\2\u0203\u0200\3\2\2\2\u0203\u0201\3\2\2\2\u0203")
        buf.write("\u0202\3\2\2\2\u0204\33\3\2\2\2\u0205\u020a\5\36\20\2")
        buf.write("\u0206\u0207\7@\2\2\u0207\u0209\5\36\20\2\u0208\u0206")
        buf.write("\3\2\2\2\u0209\u020c\3\2\2\2\u020a\u0208\3\2\2\2\u020a")
        buf.write("\u020b\3\2\2\2\u020b\u020e\3\2\2\2\u020c\u020a\3\2\2\2")
        buf.write("\u020d\u020f\7@\2\2\u020e\u020d\3\2\2\2\u020e\u020f\3")
        buf.write("\2\2\2\u020f\u0210\3\2\2\2\u0210\u0211\7/\2\2\u0211\35")
        buf.write("\3\2\2\2\u0212\u021b\5 \21\2\u0213\u021b\5(\25\2\u0214")
        buf.write("\u021b\5*\26\2\u0215\u021b\5,\27\2\u0216\u021b\58\35\2")
        buf.write("\u0217\u021b\5H%\2\u0218\u021b\5J&\2\u0219\u021b\5L\'")
        buf.write("\2\u021a\u0212\3\2\2\2\u021a\u0213\3\2\2\2\u021a\u0214")
        buf.write("\3\2\2\2\u021a\u0215\3\2\2\2\u021a\u0216\3\2\2\2\u021a")
        buf.write("\u0217\3\2\2\2\u021a\u0218\3\2\2\2\u021a\u0219\3\2\2\2")
        buf.write("\u021b\37\3\2\2\2\u021c\u022d\5$\23\2\u021d\u022e\5\"")
        buf.write("\22\2\u021e\u0221\5&\24\2\u021f\u0222\5\u00e8u\2\u0220")
        buf.write("\u0222\5\u00d6l\2\u0221\u021f\3\2\2\2\u0221\u0220\3\2")
        buf.write("\2\2\u0222\u022e\3\2\2\2\u0223\u0226\7B\2\2\u0224\u0227")
        buf.write("\5\u00e8u\2\u0225\u0227\5$\23\2\u0226\u0224\3\2\2\2\u0226")
        buf.write("\u0225\3\2\2\2\u0227\u0229\3\2\2\2\u0228\u0223\3\2\2\2")
        buf.write("\u0229\u022c\3\2\2\2\u022a\u0228\3\2\2\2\u022a\u022b\3")
        buf.write("\2\2\2\u022b\u022e\3\2\2\2\u022c\u022a\3\2\2\2\u022d\u021d")
        buf.write("\3\2\2\2\u022d\u021e\3\2\2\2\u022d\u022a\3\2\2\2\u022e")
        buf.write("!\3\2\2\2\u022f\u0230\7?\2\2\u0230\u0233\5\u00aeX\2\u0231")
        buf.write("\u0232\7B\2\2\u0232\u0234\5\u00aeX\2\u0233\u0231\3\2\2")
        buf.write("\2\u0233\u0234\3\2\2\2\u0234#\3\2\2\2\u0235\u0238\5\u00ae")
        buf.write("X\2\u0236\u0238\5\u00c0a\2\u0237\u0235\3\2\2\2\u0237\u0236")
        buf.write("\3\2\2\2\u0238\u0240\3\2\2\2\u0239\u023c\7>\2\2\u023a")
        buf.write("\u023d\5\u00aeX\2\u023b\u023d\5\u00c0a\2\u023c\u023a\3")
        buf.write("\2\2\2\u023c\u023b\3\2\2\2\u023d\u023f\3\2\2\2\u023e\u0239")
        buf.write("\3\2\2\2\u023f\u0242\3\2\2\2\u0240\u023e\3\2\2\2\u0240")
        buf.write("\u0241\3\2\2\2\u0241\u0244\3\2\2\2\u0242\u0240\3\2\2\2")
        buf.write("\u0243\u0245\7>\2\2\u0244\u0243\3\2\2\2\u0244\u0245\3")
        buf.write("\2\2\2\u0245%\3\2\2\2\u0246\u0247\t\2\2\2\u0247\'\3\2")
        buf.write("\2\2\u0248\u0249\7\22\2\2\u0249\u024a\5\u00d4k\2\u024a")
        buf.write(")\3\2\2\2\u024b\u024c\7%\2\2\u024c+\3\2\2\2\u024d\u0253")
        buf.write("\5.\30\2\u024e\u0253\5\60\31\2\u024f\u0253\5\62\32\2\u0250")
        buf.write("\u0253\5\66\34\2\u0251\u0253\5\64\33\2\u0252\u024d\3\2")
        buf.write("\2\2\u0252\u024e\3\2\2\2\u0252\u024f\3\2\2\2\u0252\u0250")
        buf.write("\3\2\2\2\u0252\u0251\3\2\2\2\u0253-\3\2\2\2\u0254\u0255")
        buf.write("\7\r\2\2\u0255/\3\2\2\2\u0256\u0257\7\20\2\2\u0257\61")
        buf.write("\3\2\2\2\u0258\u025a\7\'\2\2\u0259\u025b\5\u00d6l\2\u025a")
        buf.write("\u0259\3\2\2\2\u025a\u025b\3\2\2\2\u025b\63\3\2\2\2\u025c")
        buf.write("\u025d\5\u00e8u\2\u025d\65\3\2\2\2\u025e\u0264\7&\2\2")
        buf.write("\u025f\u0262\5\u00aeX\2\u0260\u0261\7\31\2\2\u0261\u0263")
        buf.write("\5\u00aeX\2\u0262\u0260\3\2\2\2\u0262\u0263\3\2\2\2\u0263")
        buf.write("\u0265\3\2\2\2\u0264\u025f\3\2\2\2\u0264\u0265\3\2\2\2")
        buf.write("\u0265\67\3\2\2\2\u0266\u0269\5:\36\2\u0267\u0269\5<\37")
        buf.write("\2\u0268\u0266\3\2\2\2\u0268\u0267\3\2\2\2\u02699\3\2")
        buf.write("\2\2\u026a\u026b\7\34\2\2\u026b\u026c\5D#\2\u026c;\3\2")
        buf.write("\2\2\u026d\u027a\7\31\2\2\u026e\u0270\t\3\2\2\u026f\u026e")
        buf.write("\3\2\2\2\u0270\u0273\3\2\2\2\u0271\u026f\3\2\2\2\u0271")
        buf.write("\u0272\3\2\2\2\u0272\u0274\3\2\2\2\u0273\u0271\3\2\2\2")
        buf.write("\u0274\u027b\5F$\2\u0275\u0277\t\3\2\2\u0276\u0275\3\2")
        buf.write("\2\2\u0277\u0278\3\2\2\2\u0278\u0276\3\2\2\2\u0278\u0279")
        buf.write("\3\2\2\2\u0279\u027b\3\2\2\2\u027a\u0271\3\2\2\2\u027a")
        buf.write("\u0276\3\2\2\2\u027b\u027c\3\2\2\2\u027c\u0283\7\34\2")
        buf.write("\2\u027d\u0284\7;\2\2\u027e\u027f\7<\2\2\u027f\u0280\5")
        buf.write("B\"\2\u0280\u0281\7=\2\2\u0281\u0284\3\2\2\2\u0282\u0284")
        buf.write("\5B\"\2\u0283\u027d\3\2\2\2\u0283\u027e\3\2\2\2\u0283")
        buf.write("\u0282\3\2\2\2\u0284=\3\2\2\2\u0285\u0288\5\u00c8e\2\u0286")
        buf.write("\u0287\7\t\2\2\u0287\u0289\5\u00c8e\2\u0288\u0286\3\2")
        buf.write("\2\2\u0288\u0289\3\2\2\2\u0289?\3\2\2\2\u028a\u028d\5")
        buf.write("F$\2\u028b\u028c\7\t\2\2\u028c\u028e\5\u00c8e\2\u028d")
        buf.write("\u028b\3\2\2\2\u028d\u028e\3\2\2\2\u028eA\3\2\2\2\u028f")
        buf.write("\u0294\5> \2\u0290\u0291\7>\2\2\u0291\u0293\5> \2\u0292")
        buf.write("\u0290\3\2\2\2\u0293\u0296\3\2\2\2\u0294\u0292\3\2\2\2")
        buf.write("\u0294\u0295\3\2\2\2\u0295\u0298\3\2\2\2\u0296\u0294\3")
        buf.write("\2\2\2\u0297\u0299\7>\2\2\u0298\u0297\3\2\2\2\u0298\u0299")
        buf.write("\3\2\2\2\u0299C\3\2\2\2\u029a\u029f\5@!\2\u029b\u029c")
        buf.write("\7>\2\2\u029c\u029e\5@!\2\u029d\u029b\3\2\2\2\u029e\u02a1")
        buf.write("\3\2\2\2\u029f\u029d\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0")
        buf.write("E\3\2\2\2\u02a1\u029f\3\2\2\2\u02a2\u02a7\5\u00c8e\2\u02a3")
        buf.write("\u02a4\79\2\2\u02a4\u02a6\5\u00c8e\2\u02a5\u02a3\3\2\2")
        buf.write("\2\u02a6\u02a9\3\2\2\2\u02a7\u02a5\3\2\2\2\u02a7\u02a8")
        buf.write("\3\2\2\2\u02a8G\3\2\2\2\u02a9\u02a7\3\2\2\2\u02aa\u02ab")
        buf.write("\7\32\2\2\u02ab\u02b0\5\u00c8e\2\u02ac\u02ad\7>\2\2\u02ad")
        buf.write("\u02af\5\u00c8e\2\u02ae\u02ac\3\2\2\2\u02af\u02b2\3\2")
        buf.write("\2\2\u02b0\u02ae\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1I\3")
        buf.write("\2\2\2\u02b2\u02b0\3\2\2\2\u02b3\u02b4\7\"\2\2\u02b4\u02b9")
        buf.write("\5\u00c8e\2\u02b5\u02b6\7>\2\2\u02b6\u02b8\5\u00c8e\2")
        buf.write("\u02b7\u02b5\3\2\2\2\u02b8\u02bb\3\2\2\2\u02b9\u02b7\3")
        buf.write("\2\2\2\u02b9\u02ba\3\2\2\2\u02baK\3\2\2\2\u02bb\u02b9")
        buf.write("\3\2\2\2\u02bc\u02bd\7\n\2\2\u02bd\u02c0\5\u00aeX\2\u02be")
        buf.write("\u02bf\7>\2\2\u02bf\u02c1\5\u00aeX\2\u02c0\u02be\3\2\2")
        buf.write("\2\u02c0\u02c1\3\2\2\2\u02c1M\3\2\2\2\u02c2\u02ce\5\u0100")
        buf.write("\u0081\2\u02c3\u02ce\5R*\2\u02c4\u02ce\5T+\2\u02c5\u02ce")
        buf.write("\5V,\2\u02c6\u02ce\5X-\2\u02c7\u02ce\5Z.\2\u02c8\u02ce")
        buf.write("\5\20\t\2\u02c9\u02ce\5\u00dan\2\u02ca\u02ce\5\f\7\2\u02cb")
        buf.write("\u02ce\5P)\2\u02cc\u02ce\5b\62\2\u02cd\u02c2\3\2\2\2\u02cd")
        buf.write("\u02c3\3\2\2\2\u02cd\u02c4\3\2\2\2\u02cd\u02c5\3\2\2\2")
        buf.write("\u02cd\u02c6\3\2\2\2\u02cd\u02c7\3\2\2\2\u02cd\u02c8\3")
        buf.write("\2\2\2\u02cd\u02c9\3\2\2\2\u02cd\u02ca\3\2\2\2\u02cd\u02cb")
        buf.write("\3\2\2\2\u02cd\u02cc\3\2\2\2\u02ceO\3\2\2\2\u02cf\u02d3")
        buf.write("\7\13\2\2\u02d0\u02d4\5\20\t\2\u02d1\u02d4\5Z.\2\u02d2")
        buf.write("\u02d4\5V,\2\u02d3\u02d0\3\2\2\2\u02d3\u02d1\3\2\2\2\u02d3")
        buf.write("\u02d2\3\2\2\2\u02d4Q\3\2\2\2\u02d5\u02d6\7\33\2\2\u02d6")
        buf.write("\u02d7\5\u00aeX\2\u02d7\u02d8\7?\2\2\u02d8\u02e0\5`\61")
        buf.write("\2\u02d9\u02da\7\23\2\2\u02da\u02db\5\u00aeX\2\u02db\u02dc")
        buf.write("\7?\2\2\u02dc\u02dd\5`\61\2\u02dd\u02df\3\2\2\2\u02de")
        buf.write("\u02d9\3\2\2\2\u02df\u02e2\3\2\2\2\u02e0\u02de\3\2\2\2")
        buf.write("\u02e0\u02e1\3\2\2\2\u02e1\u02e6\3\2\2\2\u02e2\u02e0\3")
        buf.write("\2\2\2\u02e3\u02e4\7\24\2\2\u02e4\u02e5\7?\2\2\u02e5\u02e7")
        buf.write("\5`\61\2\u02e6\u02e3\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7")
        buf.write("S\3\2\2\2\u02e8\u02e9\7+\2\2\u02e9\u02ea\5\u00aeX\2\u02ea")
        buf.write("\u02eb\7?\2\2\u02eb\u02ef\5`\61\2\u02ec\u02ed\7\24\2\2")
        buf.write("\u02ed\u02ee\7?\2\2\u02ee\u02f0\5`\61\2\u02ef\u02ec\3")
        buf.write("\2\2\2\u02ef\u02f0\3\2\2\2\u02f0U\3\2\2\2\u02f1\u02f2")
        buf.write("\7\30\2\2\u02f2\u02f3\5\u00d4k\2\u02f3\u02f4\7\35\2\2")
        buf.write("\u02f4\u02f5\5\u00d6l\2\u02f5\u02f6\7?\2\2\u02f6\u02fa")
        buf.write("\5`\61\2\u02f7\u02f8\7\24\2\2\u02f8\u02f9\7?\2\2\u02f9")
        buf.write("\u02fb\5`\61\2\u02fa\u02f7\3\2\2\2\u02fa\u02fb\3\2\2\2")
        buf.write("\u02fbW\3\2\2\2\u02fc\u02fd\7)\2\2\u02fd\u02fe\7?\2\2")
        buf.write("\u02fe\u0314\5`\61\2\u02ff\u0300\5^\60\2\u0300\u0301\7")
        buf.write("?\2\2\u0301\u0302\5`\61\2\u0302\u0304\3\2\2\2\u0303\u02ff")
        buf.write("\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u0303\3\2\2\2\u0305")
        buf.write("\u0306\3\2\2\2\u0306\u030a\3\2\2\2\u0307\u0308\7\24\2")
        buf.write("\2\u0308\u0309\7?\2\2\u0309\u030b\5`\61\2\u030a\u0307")
        buf.write("\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030f\3\2\2\2\u030c")
        buf.write("\u030d\7\27\2\2\u030d\u030e\7?\2\2\u030e\u0310\5`\61\2")
        buf.write("\u030f\u030c\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0315\3")
        buf.write("\2\2\2\u0311\u0312\7\27\2\2\u0312\u0313\7?\2\2\u0313\u0315")
        buf.write("\5`\61\2\u0314\u0303\3\2\2\2\u0314\u0311\3\2\2\2\u0315")
        buf.write("Y\3\2\2\2\u0316\u0317\7,\2\2\u0317\u031c\5\\/\2\u0318")
        buf.write("\u0319\7>\2\2\u0319\u031b\5\\/\2\u031a\u0318\3\2\2\2\u031b")
        buf.write("\u031e\3\2\2\2\u031c\u031a\3\2\2\2\u031c\u031d\3\2\2\2")
        buf.write("\u031d\u031f\3\2\2\2\u031e\u031c\3\2\2\2\u031f\u0320\7")
        buf.write("?\2\2\u0320\u0321\5`\61\2\u0321[\3\2\2\2\u0322\u0325\5")
        buf.write("\u00aeX\2\u0323\u0324\7\t\2\2\u0324\u0326\5\u00c2b\2\u0325")
        buf.write("\u0323\3\2\2\2\u0325\u0326\3\2\2\2\u0326]\3\2\2\2\u0327")
        buf.write("\u032d\7\25\2\2\u0328\u032b\5\u00aeX\2\u0329\u032a\7\t")
        buf.write("\2\2\u032a\u032c\5\u00c8e\2\u032b\u0329\3\2\2\2\u032b")
        buf.write("\u032c\3\2\2\2\u032c\u032e\3\2\2\2\u032d\u0328\3\2\2\2")
        buf.write("\u032d\u032e\3\2\2\2\u032e_\3\2\2\2\u032f\u033a\5\34\17")
        buf.write("\2\u0330\u0331\7/\2\2\u0331\u0333\7\3\2\2\u0332\u0334")
        buf.write("\5\32\16\2\u0333\u0332\3\2\2\2\u0334\u0335\3\2\2\2\u0335")
        buf.write("\u0333\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0337\3\2\2\2")
        buf.write("\u0337\u0338\7\4\2\2\u0338\u033a\3\2\2\2\u0339\u032f\3")
        buf.write("\2\2\2\u0339\u0330\3\2\2\2\u033aa\3\2\2\2\u033b\u033c")
        buf.write("\7 \2\2\u033c\u033d\5d\63\2\u033d\u033e\7?\2\2\u033e\u033f")
        buf.write("\7/\2\2\u033f\u0341\7\3\2\2\u0340\u0342\5j\66\2\u0341")
        buf.write("\u0340\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0341\3\2\2\2")
        buf.write("\u0343\u0344\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0346\7")
        buf.write("\4\2\2\u0346c\3\2\2\2\u0347\u0348\5h\65\2\u0348\u034a")
        buf.write("\7>\2\2\u0349\u034b\5f\64\2\u034a\u0349\3\2\2\2\u034a")
        buf.write("\u034b\3\2\2\2\u034b\u034e\3\2\2\2\u034c\u034e\5\u00ae")
        buf.write("X\2\u034d\u0347\3\2\2\2\u034d\u034c\3\2\2\2\u034ee\3\2")
        buf.write("\2\2\u034f\u0351\7>\2\2\u0350\u0352\5h\65\2\u0351\u0350")
        buf.write("\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0351\3\2\2\2\u0353")
        buf.write("\u0354\3\2\2\2\u0354\u0356\3\2\2\2\u0355\u0357\7>\2\2")
        buf.write("\u0356\u0355\3\2\2\2\u0356\u0357\3\2\2\2\u0357g\3\2\2")
        buf.write("\2\u0358\u0359\7;\2\2\u0359\u035c\5\u00c2b\2\u035a\u035c")
        buf.write("\5\u00aeX\2\u035b\u0358\3\2\2\2\u035b\u035a\3\2\2\2\u035c")
        buf.write("i\3\2\2\2\u035d\u035e\7\16\2\2\u035e\u0360\5n8\2\u035f")
        buf.write("\u0361\5l\67\2\u0360\u035f\3\2\2\2\u0360\u0361\3\2\2\2")
        buf.write("\u0361\u0362\3\2\2\2\u0362\u0363\7?\2\2\u0363\u0364\5")
        buf.write("`\61\2\u0364k\3\2\2\2\u0365\u0366\7\33\2\2\u0366\u0367")
        buf.write("\5\u00aeX\2\u0367m\3\2\2\2\u0368\u036b\5\u0096L\2\u0369")
        buf.write("\u036b\5p9\2\u036a\u0368\3\2\2\2\u036a\u0369\3\2\2\2\u036b")
        buf.write("o\3\2\2\2\u036c\u036f\5r:\2\u036d\u036f\5t;\2\u036e\u036c")
        buf.write("\3\2\2\2\u036e\u036d\3\2\2\2\u036fq\3\2\2\2\u0370\u0371")
        buf.write("\5t;\2\u0371\u0372\7\t\2\2\u0372\u0373\5\u0088E\2\u0373")
        buf.write("s\3\2\2\2\u0374\u0379\5v<\2\u0375\u0376\7E\2\2\u0376\u0378")
        buf.write("\5v<\2\u0377\u0375\3\2\2\2\u0378\u037b\3\2\2\2\u0379\u0377")
        buf.write("\3\2\2\2\u0379\u037a\3\2\2\2\u037au\3\2\2\2\u037b\u0379")
        buf.write("\3\2\2\2\u037c\u0385\5\u008aF\2\u037d\u0385\5x=\2\u037e")
        buf.write("\u0385\5\u0086D\2\u037f\u0385\5\u008cG\2\u0380\u0385\5")
        buf.write("\u0092J\2\u0381\u0385\5\u0094K\2\u0382\u0385\5\u009eP")
        buf.write("\2\u0383\u0385\5\u00a6T\2\u0384\u037c\3\2\2\2\u0384\u037d")
        buf.write("\3\2\2\2\u0384\u037e\3\2\2\2\u0384\u037f\3\2\2\2\u0384")
        buf.write("\u0380\3\2\2\2\u0384\u0381\3\2\2\2\u0384\u0382\3\2\2\2")
        buf.write("\u0384\u0383\3\2\2\2\u0385w\3\2\2\2\u0386\u0387\5~@\2")
        buf.write("\u0387\u0388\6=\2\2\u0388\u038f\3\2\2\2\u0389\u038f\5")
        buf.write("|?\2\u038a\u038f\5\u00ecw\2\u038b\u038f\7!\2\2\u038c\u038f")
        buf.write("\7(\2\2\u038d\u038f\7\26\2\2\u038e\u0386\3\2\2\2\u038e")
        buf.write("\u0389\3\2\2\2\u038e\u038a\3\2\2\2\u038e\u038b\3\2\2\2")
        buf.write("\u038e\u038c\3\2\2\2\u038e\u038d\3\2\2\2\u038fy\3\2\2")
        buf.write("\2\u0390\u0391\5~@\2\u0391\u0392\6>\3\2\u0392\u0399\3")
        buf.write("\2\2\2\u0393\u0399\5|?\2\u0394\u0399\5\u00ecw\2\u0395")
        buf.write("\u0399\7!\2\2\u0396\u0399\7(\2\2\u0397\u0399\7\26\2\2")
        buf.write("\u0398\u0390\3\2\2\2\u0398\u0393\3\2\2\2\u0398\u0394\3")
        buf.write("\2\2\2\u0398\u0395\3\2\2\2\u0398\u0396\3\2\2\2\u0398\u0397")
        buf.write("\3\2\2\2\u0399{\3\2\2\2\u039a\u039b\5\u0080A\2\u039b\u039c")
        buf.write("\7J\2\2\u039c\u039d\5\u0084C\2\u039d\u03a3\3\2\2\2\u039e")
        buf.write("\u039f\5\u0080A\2\u039f\u03a0\7K\2\2\u03a0\u03a1\5\u0084")
        buf.write("C\2\u03a1\u03a3\3\2\2\2\u03a2\u039a\3\2\2\2\u03a2\u039e")
        buf.write("\3\2\2\2\u03a3}\3\2\2\2\u03a4\u03a8\7\6\2\2\u03a5\u03a6")
        buf.write("\7K\2\2\u03a6\u03a8\7\6\2\2\u03a7\u03a4\3\2\2\2\u03a7")
        buf.write("\u03a5\3\2\2\2\u03a8\177\3\2\2\2\u03a9\u03ad\5\u0082B")
        buf.write("\2\u03aa\u03ab\7K\2\2\u03ab\u03ad\5\u0082B\2\u03ac\u03a9")
        buf.write("\3\2\2\2\u03ac\u03aa\3\2\2\2\u03ad\u0081\3\2\2\2\u03ae")
        buf.write("\u03af\7\6\2\2\u03af\u0083\3\2\2\2\u03b0\u03b1\7\6\2\2")
        buf.write("\u03b1\u0085\3\2\2\2\u03b2\u03b3\5\u0088E\2\u03b3\u0087")
        buf.write("\3\2\2\2\u03b4\u03b5\5\u00c8e\2\u03b5\u03b6\6E\4\2\u03b6")
        buf.write("\u0089\3\2\2\2\u03b7\u03b8\7*\2\2\u03b8\u008b\3\2\2\2")
        buf.write("\u03b9\u03ba\5\u008eH\2\u03ba\u03bb\6G\5\2\u03bb\u008d")
        buf.write("\3\2\2\2\u03bc\u03bf\5\u00c8e\2\u03bd\u03be\79\2\2\u03be")
        buf.write("\u03c0\5\u00c8e\2\u03bf\u03bd\3\2\2\2\u03c0\u03c1\3\2")
        buf.write("\2\2\u03c1\u03bf\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u008f")
        buf.write("\3\2\2\2\u03c3\u03c6\5\u008eH\2\u03c4\u03c6\5\u00c8e\2")
        buf.write("\u03c5\u03c3\3\2\2\2\u03c5\u03c4\3\2\2\2\u03c6\u0091\3")
        buf.write("\2\2\2\u03c7\u03c8\7<\2\2\u03c8\u03c9\5p9\2\u03c9\u03ca")
        buf.write("\7=\2\2\u03ca\u0093\3\2\2\2\u03cb\u03cd\7C\2\2\u03cc\u03ce")
        buf.write("\5\u0098M\2\u03cd\u03cc\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce")
        buf.write("\u03cf\3\2\2\2\u03cf\u03d6\7D\2\2\u03d0\u03d2\7<\2\2\u03d1")
        buf.write("\u03d3\5\u0096L\2\u03d2\u03d1\3\2\2\2\u03d2\u03d3\3\2")
        buf.write("\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d6\7=\2\2\u03d5\u03cb")
        buf.write("\3\2\2\2\u03d5\u03d0\3\2\2\2\u03d6\u0095\3\2\2\2\u03d7")
        buf.write("\u03d8\5\u009aN\2\u03d8\u03da\7>\2\2\u03d9\u03db\5\u0098")
        buf.write("M\2\u03da\u03d9\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u0097")
        buf.write("\3\2\2\2\u03dc\u03e1\5\u009aN\2\u03dd\u03de\7>\2\2\u03de")
        buf.write("\u03e0\5\u009aN\2\u03df\u03dd\3\2\2\2\u03e0\u03e3\3\2")
        buf.write("\2\2\u03e1\u03df\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e5")
        buf.write("\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e4\u03e6\7>\2\2\u03e5")
        buf.write("\u03e4\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u0099\3\2\2\2")
        buf.write("\u03e7\u03ea\5\u009cO\2\u03e8\u03ea\5p9\2\u03e9\u03e7")
        buf.write("\3\2\2\2\u03e9\u03e8\3\2\2\2\u03ea\u009b\3\2\2\2\u03eb")
        buf.write("\u03ec\7;\2\2\u03ec\u03f0\5\u0088E\2\u03ed\u03ee\7;\2")
        buf.write("\2\u03ee\u03f0\5\u008aF\2\u03ef\u03eb\3\2\2\2\u03ef\u03ed")
        buf.write("\3\2\2\2\u03f0\u009d\3\2\2\2\u03f1\u03f2\7P\2\2\u03f2")
        buf.write("\u040b\7Q\2\2\u03f3\u03f4\7P\2\2\u03f4\u03f6\5\u00a4S")
        buf.write("\2\u03f5\u03f7\7>\2\2\u03f6\u03f5\3\2\2\2\u03f6\u03f7")
        buf.write("\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03f9\7Q\2\2\u03f9")
        buf.write("\u040b\3\2\2\2\u03fa\u03fb\7P\2\2\u03fb\u03fc\5\u00a0")
        buf.write("Q\2\u03fc\u03fd\7>\2\2\u03fd\u03ff\5\u00a4S\2\u03fe\u0400")
        buf.write("\7>\2\2\u03ff\u03fe\3\2\2\2\u03ff\u0400\3\2\2\2\u0400")
        buf.write("\u0401\3\2\2\2\u0401\u0402\7Q\2\2\u0402\u040b\3\2\2\2")
        buf.write("\u0403\u0404\7P\2\2\u0404\u0406\5\u00a0Q\2\u0405\u0407")
        buf.write("\7>\2\2\u0406\u0405\3\2\2\2\u0406\u0407\3\2\2\2\u0407")
        buf.write("\u0408\3\2\2\2\u0408\u0409\7Q\2\2\u0409\u040b\3\2\2\2")
        buf.write("\u040a\u03f1\3\2\2\2\u040a\u03f3\3\2\2\2\u040a\u03fa\3")
        buf.write("\2\2\2\u040a\u0403\3\2\2\2\u040b\u009f\3\2\2\2\u040c\u0411")
        buf.write("\5\u00a2R\2\u040d\u040e\7>\2\2\u040e\u0410\5\u00a2R\2")
        buf.write("\u040f\u040d\3\2\2\2\u0410\u0413\3\2\2\2\u0411\u040f\3")
        buf.write("\2\2\2\u0411\u0412\3\2\2\2\u0412\u00a1\3\2\2\2\u0413\u0411")
        buf.write("\3\2\2\2\u0414\u0417\5z>\2\u0415\u0417\5\u008eH\2\u0416")
        buf.write("\u0414\3\2\2\2\u0416\u0415\3\2\2\2\u0417\u0418\3\2\2\2")
        buf.write("\u0418\u0419\7?\2\2\u0419\u041a\5p9\2\u041a\u00a3\3\2")
        buf.write("\2\2\u041b\u041c\7A\2\2\u041c\u041d\5\u0088E\2\u041d\u00a5")
        buf.write("\3\2\2\2\u041e\u041f\5\u0090I\2\u041f\u0420\7<\2\2\u0420")
        buf.write("\u0421\7=\2\2\u0421\u043d\3\2\2\2\u0422\u0423\5\u0090")
        buf.write("I\2\u0423\u0424\7<\2\2\u0424\u0426\5\u00a8U\2\u0425\u0427")
        buf.write("\7>\2\2\u0426\u0425\3\2\2\2\u0426\u0427\3\2\2\2\u0427")
        buf.write("\u0428\3\2\2\2\u0428\u0429\7=\2\2\u0429\u043d\3\2\2\2")
        buf.write("\u042a\u042b\5\u0090I\2\u042b\u042c\7<\2\2\u042c\u042e")
        buf.write("\5\u00aaV\2\u042d\u042f\7>\2\2\u042e\u042d\3\2\2\2\u042e")
        buf.write("\u042f\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0431\7=\2\2")
        buf.write("\u0431\u043d\3\2\2\2\u0432\u0433\5\u0090I\2\u0433\u0434")
        buf.write("\7<\2\2\u0434\u0435\5\u00a8U\2\u0435\u0436\7>\2\2\u0436")
        buf.write("\u0438\5\u00aaV\2\u0437\u0439\7>\2\2\u0438\u0437\3\2\2")
        buf.write("\2\u0438\u0439\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b")
        buf.write("\7=\2\2\u043b\u043d\3\2\2\2\u043c\u041e\3\2\2\2\u043c")
        buf.write("\u0422\3\2\2\2\u043c\u042a\3\2\2\2\u043c\u0432\3\2\2\2")
        buf.write("\u043d\u00a7\3\2\2\2\u043e\u0443\5p9\2\u043f\u0440\7>")
        buf.write("\2\2\u0440\u0442\5p9\2\u0441\u043f\3\2\2\2\u0442\u0445")
        buf.write("\3\2\2\2\u0443\u0441\3\2\2\2\u0443\u0444\3\2\2\2\u0444")
        buf.write("\u00a9\3\2\2\2\u0445\u0443\3\2\2\2\u0446\u044b\5\u00ac")
        buf.write("W\2\u0447\u0448\7>\2\2\u0448\u044a\5\u00acW\2\u0449\u0447")
        buf.write("\3\2\2\2\u044a\u044d\3\2\2\2\u044b\u0449\3\2\2\2\u044b")
        buf.write("\u044c\3\2\2\2\u044c\u00ab\3\2\2\2\u044d\u044b\3\2\2\2")
        buf.write("\u044e\u044f\5\u00c8e\2\u044f\u0450\7B\2\2\u0450\u0451")
        buf.write("\5p9\2\u0451\u00ad\3\2\2\2\u0452\u0458\5\u00b6\\\2\u0453")
        buf.write("\u0454\7\33\2\2\u0454\u0455\5\u00b6\\\2\u0455\u0456\7")
        buf.write("\24\2\2\u0456\u0457\5\u00aeX\2\u0457\u0459\3\2\2\2\u0458")
        buf.write("\u0453\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045c\3\2\2\2")
        buf.write("\u045a\u045c\5\u00b2Z\2\u045b\u0452\3\2\2\2\u045b\u045a")
        buf.write("\3\2\2\2\u045c\u00af\3\2\2\2\u045d\u0460\5\u00b6\\\2\u045e")
        buf.write("\u0460\5\u00b4[\2\u045f\u045d\3\2\2\2\u045f\u045e\3\2")
        buf.write("\2\2\u0460\u00b1\3\2\2\2\u0461\u0463\7\37\2\2\u0462\u0464")
        buf.write("\5\26\f\2\u0463\u0462\3\2\2\2\u0463\u0464\3\2\2\2\u0464")
        buf.write("\u0465\3\2\2\2\u0465\u0466\7?\2\2\u0466\u0467\5\u00ae")
        buf.write("X\2\u0467\u00b3\3\2\2\2\u0468\u046a\7\37\2\2\u0469\u046b")
        buf.write("\5\26\f\2\u046a\u0469\3\2\2\2\u046a\u046b\3\2\2\2\u046b")
        buf.write("\u046c\3\2\2\2\u046c\u046d\7?\2\2\u046d\u046e\5\u00b0")
        buf.write("Y\2\u046e\u00b5\3\2\2\2\u046f\u0474\5\u00b8]\2\u0470\u0471")
        buf.write("\7$\2\2\u0471\u0473\5\u00b8]\2\u0472\u0470\3\2\2\2\u0473")
        buf.write("\u0476\3\2\2\2\u0474\u0472\3\2\2\2\u0474\u0475\3\2\2\2")
        buf.write("\u0475\u00b7\3\2\2\2\u0476\u0474\3\2\2\2\u0477\u047c\5")
        buf.write("\u00ba^\2\u0478\u0479\7\b\2\2\u0479\u047b\5\u00ba^\2\u047a")
        buf.write("\u0478\3\2\2\2\u047b\u047e\3\2\2\2\u047c\u047a\3\2\2\2")
        buf.write("\u047c\u047d\3\2\2\2\u047d\u00b9\3\2\2\2\u047e\u047c\3")
        buf.write("\2\2\2\u047f\u0480\7#\2\2\u0480\u0483\5\u00ba^\2\u0481")
        buf.write("\u0483\5\u00bc_\2\u0482\u047f\3\2\2\2\u0482\u0481\3\2")
        buf.write("\2\2\u0483\u00bb\3\2\2\2\u0484\u048a\5\u00c2b\2\u0485")
        buf.write("\u0486\5\u00be`\2\u0486\u0487\5\u00c2b\2\u0487\u0489\3")
        buf.write("\2\2\2\u0488\u0485\3\2\2\2\u0489\u048c\3\2\2\2\u048a\u0488")
        buf.write("\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u00bd\3\2\2\2\u048c")
        buf.write("\u048a\3\2\2\2\u048d\u049b\7R\2\2\u048e\u049b\7S\2\2\u048f")
        buf.write("\u049b\7T\2\2\u0490\u049b\7U\2\2\u0491\u049b\7V\2\2\u0492")
        buf.write("\u049b\7W\2\2\u0493\u049b\7X\2\2\u0494\u049b\7\35\2\2")
        buf.write("\u0495\u0496\7#\2\2\u0496\u049b\7\35\2\2\u0497\u049b\7")
        buf.write("\36\2\2\u0498\u0499\7\36\2\2\u0499\u049b\7#\2\2\u049a")
        buf.write("\u048d\3\2\2\2\u049a\u048e\3\2\2\2\u049a\u048f\3\2\2\2")
        buf.write("\u049a\u0490\3\2\2\2\u049a\u0491\3\2\2\2\u049a\u0492\3")
        buf.write("\2\2\2\u049a\u0493\3\2\2\2\u049a\u0494\3\2\2\2\u049a\u0495")
        buf.write("\3\2\2\2\u049a\u0497\3\2\2\2\u049a\u0498\3\2\2\2\u049b")
        buf.write("\u00bf\3\2\2\2\u049c\u049d\7;\2\2\u049d\u049e\5\u00c2")
        buf.write("b\2\u049e\u00c1\3\2\2\2\u049f\u04a0\bb\1\2\u04a0\u04a9")
        buf.write("\5\u00f4{\2\u04a1\u04a9\5\u00c4c\2\u04a2\u04a4\t\4\2\2")
        buf.write("\u04a3\u04a2\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a3\3")
        buf.write("\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a9")
        buf.write("\5\u00c2b\t\u04a8\u049f\3\2\2\2\u04a8\u04a1\3\2\2\2\u04a8")
        buf.write("\u04a3\3\2\2\2\u04a9\u04c1\3\2\2\2\u04aa\u04ab\f\n\2\2")
        buf.write("\u04ab\u04ac\7A\2\2\u04ac\u04c0\5\u00c2b\13\u04ad\u04ae")
        buf.write("\f\b\2\2\u04ae\u04af\t\5\2\2\u04af\u04c0\5\u00c2b\t\u04b0")
        buf.write("\u04b1\f\7\2\2\u04b1\u04b2\t\6\2\2\u04b2\u04c0\5\u00c2")
        buf.write("b\b\u04b3\u04b4\f\6\2\2\u04b4\u04b5\t\7\2\2\u04b5\u04c0")
        buf.write("\5\u00c2b\7\u04b6\u04b7\f\5\2\2\u04b7\u04b8\7G\2\2\u04b8")
        buf.write("\u04c0\5\u00c2b\6\u04b9\u04ba\f\4\2\2\u04ba\u04bb\7F\2")
        buf.write("\2\u04bb\u04c0\5\u00c2b\5\u04bc\u04bd\f\3\2\2\u04bd\u04be")
        buf.write("\7E\2\2\u04be\u04c0\5\u00c2b\4\u04bf\u04aa\3\2\2\2\u04bf")
        buf.write("\u04ad\3\2\2\2\u04bf\u04b0\3\2\2\2\u04bf\u04b3\3\2\2\2")
        buf.write("\u04bf\u04b6\3\2\2\2\u04bf\u04b9\3\2\2\2\u04bf\u04bc\3")
        buf.write("\2\2\2\u04c0\u04c3\3\2\2\2\u04c1\u04bf\3\2\2\2\u04c1\u04c2")
        buf.write("\3\2\2\2\u04c2\u00c3\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c4")
        buf.write("\u04c6\7\f\2\2\u04c5\u04c4\3\2\2\2\u04c5\u04c6\3\2\2\2")
        buf.write("\u04c6\u04c7\3\2\2\2\u04c7\u04cb\5\u00c6d\2\u04c8\u04ca")
        buf.write("\5\u00ccg\2\u04c9\u04c8\3\2\2\2\u04ca\u04cd\3\2\2\2\u04cb")
        buf.write("\u04c9\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u00c5\3\2\2\2")
        buf.write("\u04cd\u04cb\3\2\2\2\u04ce\u04d1\7<\2\2\u04cf\u04d2\5")
        buf.write("\u00e8u\2\u04d0\u04d2\5\u00caf\2\u04d1\u04cf\3\2\2\2\u04d1")
        buf.write("\u04d0\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d3\3\2\2\2")
        buf.write("\u04d3\u04eb\7=\2\2\u04d4\u04d6\7C\2\2\u04d5\u04d7\5\u00ca")
        buf.write("f\2\u04d6\u04d5\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04d8")
        buf.write("\3\2\2\2\u04d8\u04eb\7D\2\2\u04d9\u04db\7P\2\2\u04da\u04dc")
        buf.write("\5\u00d8m\2\u04db\u04da\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc")
        buf.write("\u04dd\3\2\2\2\u04dd\u04eb\7Q\2\2\u04de\u04eb\5\u00f6")
        buf.write("|\2\u04df\u04eb\5\u00c8e\2\u04e0\u04eb\7\6\2\2\u04e1\u04e3")
        buf.write("\7\5\2\2\u04e2\u04e1\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4")
        buf.write("\u04e2\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04eb\3\2\2\2")
        buf.write("\u04e6\u04eb\7:\2\2\u04e7\u04eb\7!\2\2\u04e8\u04eb\7(")
        buf.write("\2\2\u04e9\u04eb\7\26\2\2\u04ea\u04ce\3\2\2\2\u04ea\u04d4")
        buf.write("\3\2\2\2\u04ea\u04d9\3\2\2\2\u04ea\u04de\3\2\2\2\u04ea")
        buf.write("\u04df\3\2\2\2\u04ea\u04e0\3\2\2\2\u04ea\u04e2\3\2\2\2")
        buf.write("\u04ea\u04e6\3\2\2\2\u04ea\u04e7\3\2\2\2\u04ea\u04e8\3")
        buf.write("\2\2\2\u04ea\u04e9\3\2\2\2\u04eb\u00c7\3\2\2\2\u04ec\u04ed")
        buf.write("\t\b\2\2\u04ed\u00c9\3\2\2\2\u04ee\u04f1\5\u00aeX\2\u04ef")
        buf.write("\u04f1\5\u00c0a\2\u04f0\u04ee\3\2\2\2\u04f0\u04ef\3\2")
        buf.write("\2\2\u04f1\u0500\3\2\2\2\u04f2\u0501\5\u00e2r\2\u04f3")
        buf.write("\u04f6\7>\2\2\u04f4\u04f7\5\u00aeX\2\u04f5\u04f7\5\u00c0")
        buf.write("a\2\u04f6\u04f4\3\2\2\2\u04f6\u04f5\3\2\2\2\u04f7\u04f9")
        buf.write("\3\2\2\2\u04f8\u04f3\3\2\2\2\u04f9\u04fc\3\2\2\2\u04fa")
        buf.write("\u04f8\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb\u04fe\3\2\2\2")
        buf.write("\u04fc\u04fa\3\2\2\2\u04fd\u04ff\7>\2\2\u04fe\u04fd\3")
        buf.write("\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0501\3\2\2\2\u0500\u04f2")
        buf.write("\3\2\2\2\u0500\u04fa\3\2\2\2\u0501\u00cb\3\2\2\2\u0502")
        buf.write("\u0504\7<\2\2\u0503\u0505\5\u00dco\2\u0504\u0503\3\2\2")
        buf.write("\2\u0504\u0505\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0511")
        buf.write("\7=\2\2\u0507\u0508\7C\2\2\u0508\u0509\5\u00ceh\2\u0509")
        buf.write("\u050a\7D\2\2\u050a\u0511\3\2\2\2\u050b\u050e\79\2\2\u050c")
        buf.write("\u050f\5\u00c8e\2\u050d\u050f\5\u00f6|\2\u050e\u050c\3")
        buf.write("\2\2\2\u050e\u050d\3\2\2\2\u050f\u0511\3\2\2\2\u0510\u0502")
        buf.write("\3\2\2\2\u0510\u0507\3\2\2\2\u0510\u050b\3\2\2\2\u0511")
        buf.write("\u00cd\3\2\2\2\u0512\u0517\5\u00d0i\2\u0513\u0514\7>\2")
        buf.write("\2\u0514\u0516\5\u00d0i\2\u0515\u0513\3\2\2\2\u0516\u0519")
        buf.write("\3\2\2\2\u0517\u0515\3\2\2\2\u0517\u0518\3\2\2\2\u0518")
        buf.write("\u051b\3\2\2\2\u0519\u0517\3\2\2\2\u051a\u051c\7>\2\2")
        buf.write("\u051b\u051a\3\2\2\2\u051b\u051c\3\2\2\2\u051c\u00cf\3")
        buf.write("\2\2\2\u051d\u0529\5\u00aeX\2\u051e\u0520\5\u00aeX\2\u051f")
        buf.write("\u051e\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u0521\3\2\2\2")
        buf.write("\u0521\u0523\7?\2\2\u0522\u0524\5\u00aeX\2\u0523\u0522")
        buf.write("\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0526\3\2\2\2\u0525")
        buf.write("\u0527\5\u00d2j\2\u0526\u0525\3\2\2\2\u0526\u0527\3\2")
        buf.write("\2\2\u0527\u0529\3\2\2\2\u0528\u051d\3\2\2\2\u0528\u051f")
        buf.write("\3\2\2\2\u0529\u00d1\3\2\2\2\u052a\u052c\7?\2\2\u052b")
        buf.write("\u052d\5\u00aeX\2\u052c\u052b\3\2\2\2\u052c\u052d\3\2")
        buf.write("\2\2\u052d\u00d3\3\2\2\2\u052e\u0531\5\u00c2b\2\u052f")
        buf.write("\u0531\5\u00c0a\2\u0530\u052e\3\2\2\2\u0530\u052f\3\2")
        buf.write("\2\2\u0531\u0539\3\2\2\2\u0532\u0535\7>\2\2\u0533\u0536")
        buf.write("\5\u00c2b\2\u0534\u0536\5\u00c0a\2\u0535\u0533\3\2\2\2")
        buf.write("\u0535\u0534\3\2\2\2\u0536\u0538\3\2\2\2\u0537\u0532\3")
        buf.write("\2\2\2\u0538\u053b\3\2\2\2\u0539\u0537\3\2\2\2\u0539\u053a")
        buf.write("\3\2\2\2\u053a\u053d\3\2\2\2\u053b\u0539\3\2\2\2\u053c")
        buf.write("\u053e\7>\2\2\u053d\u053c\3\2\2\2\u053d\u053e\3\2\2\2")
        buf.write("\u053e\u00d5\3\2\2\2\u053f\u0544\5\u00aeX\2\u0540\u0541")
        buf.write("\7>\2\2\u0541\u0543\5\u00aeX\2\u0542\u0540\3\2\2\2\u0543")
        buf.write("\u0546\3\2\2\2\u0544\u0542\3\2\2\2\u0544\u0545\3\2\2\2")
        buf.write("\u0545\u0548\3\2\2\2\u0546\u0544\3\2\2\2\u0547\u0549\7")
        buf.write(">\2\2\u0548\u0547\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u00d7")
        buf.write("\3\2\2\2\u054a\u054b\5\u00aeX\2\u054b\u054c\7?\2\2\u054c")
        buf.write("\u054d\5\u00aeX\2\u054d\u0551\3\2\2\2\u054e\u054f\7A\2")
        buf.write("\2\u054f\u0551\5\u00c2b\2\u0550\u054a\3\2\2\2\u0550\u054e")
        buf.write("\3\2\2\2\u0551\u0564\3\2\2\2\u0552\u0565\5\u00e2r\2\u0553")
        buf.write("\u055a\7>\2\2\u0554\u0555\5\u00aeX\2\u0555\u0556\7?\2")
        buf.write("\2\u0556\u0557\5\u00aeX\2\u0557\u055b\3\2\2\2\u0558\u0559")
        buf.write("\7A\2\2\u0559\u055b\5\u00c2b\2\u055a\u0554\3\2\2\2\u055a")
        buf.write("\u0558\3\2\2\2\u055b\u055d\3\2\2\2\u055c\u0553\3\2\2\2")
        buf.write("\u055d\u0560\3\2\2\2\u055e\u055c\3\2\2\2\u055e\u055f\3")
        buf.write("\2\2\2\u055f\u0562\3\2\2\2\u0560\u055e\3\2\2\2\u0561\u0563")
        buf.write("\7>\2\2\u0562\u0561\3\2\2\2\u0562\u0563\3\2\2\2\u0563")
        buf.write("\u0565\3\2\2\2\u0564\u0552\3\2\2\2\u0564\u055e\3\2\2\2")
        buf.write("\u0565\u057b\3\2\2\2\u0566\u0569\5\u00aeX\2\u0567\u0569")
        buf.write("\5\u00c0a\2\u0568\u0566\3\2\2\2\u0568\u0567\3\2\2\2\u0569")
        buf.write("\u0578\3\2\2\2\u056a\u0579\5\u00e2r\2\u056b\u056e\7>\2")
        buf.write("\2\u056c\u056f\5\u00aeX\2\u056d\u056f\5\u00c0a\2\u056e")
        buf.write("\u056c\3\2\2\2\u056e\u056d\3\2\2\2\u056f\u0571\3\2\2\2")
        buf.write("\u0570\u056b\3\2\2\2\u0571\u0574\3\2\2\2\u0572\u0570\3")
        buf.write("\2\2\2\u0572\u0573\3\2\2\2\u0573\u0576\3\2\2\2\u0574\u0572")
        buf.write("\3\2\2\2\u0575\u0577\7>\2\2\u0576\u0575\3\2\2\2\u0576")
        buf.write("\u0577\3\2\2\2\u0577\u0579\3\2\2\2\u0578\u056a\3\2\2\2")
        buf.write("\u0578\u0572\3\2\2\2\u0579\u057b\3\2\2\2\u057a\u0550\3")
        buf.write("\2\2\2\u057a\u0568\3\2\2\2\u057b\u00d9\3\2\2\2\u057c\u0580")
        buf.write("\7\17\2\2\u057d\u0581\5\u00c8e\2\u057e\u0581\5\u00f8}")
        buf.write("\2\u057f\u0581\5\u00fc\177\2\u0580\u057d\3\2\2\2\u0580")
        buf.write("\u057e\3\2\2\2\u0580\u057f\3\2\2\2\u0581\u0587\3\2\2\2")
        buf.write("\u0582\u0584\7<\2\2\u0583\u0585\5\u00dco\2\u0584\u0583")
        buf.write("\3\2\2\2\u0584\u0585\3\2\2\2\u0585\u0586\3\2\2\2\u0586")
        buf.write("\u0588\7=\2\2\u0587\u0582\3\2\2\2\u0587\u0588\3\2\2\2")
        buf.write("\u0588\u0589\3\2\2\2\u0589\u058a\7?\2\2\u058a\u058b\5")
        buf.write("`\61\2\u058b\u00db\3\2\2\2\u058c\u0591\5\u00dep\2\u058d")
        buf.write("\u058e\7>\2\2\u058e\u0590\5\u00dep\2\u058f\u058d\3\2\2")
        buf.write("\2\u0590\u0593\3\2\2\2\u0591\u058f\3\2\2\2\u0591\u0592")
        buf.write("\3\2\2\2\u0592\u0595\3\2\2\2\u0593\u0591\3\2\2\2\u0594")
        buf.write("\u0596\7>\2\2\u0595\u0594\3\2\2\2\u0595\u0596\3\2\2\2")
        buf.write("\u0596\u00dd\3\2\2\2\u0597\u05a6\5\u0108\u0085\2\u0598")
        buf.write("\u05a6\5\u00f4{\2\u0599\u059b\5\u00aeX\2\u059a\u059c\5")
        buf.write("\u00e2r\2\u059b\u059a\3\2\2\2\u059b\u059c\3\2\2\2\u059c")
        buf.write("\u05a6\3\2\2\2\u059d\u059e\5\u00aeX\2\u059e\u059f\7B\2")
        buf.write("\2\u059f\u05a0\5\u00aeX\2\u05a0\u05a6\3\2\2\2\u05a1\u05a2")
        buf.write("\7A\2\2\u05a2\u05a6\5\u00aeX\2\u05a3\u05a4\7;\2\2\u05a4")
        buf.write("\u05a6\5\u00aeX\2\u05a5\u0597\3\2\2\2\u05a5\u0598\3\2")
        buf.write("\2\2\u05a5\u0599\3\2\2\2\u05a5\u059d\3\2\2\2\u05a5\u05a1")
        buf.write("\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a6\u00df\3\2\2\2\u05a7")
        buf.write("\u05aa\5\u00e2r\2\u05a8\u05aa\5\u00e4s\2\u05a9\u05a7\3")
        buf.write("\2\2\2\u05a9\u05a8\3\2\2\2\u05aa\u00e1\3\2\2\2\u05ab\u05ad")
        buf.write("\7\13\2\2\u05ac\u05ab\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad")
        buf.write("\u05ae\3\2\2\2\u05ae\u05af\7\30\2\2\u05af\u05b0\5\u00d4")
        buf.write("k\2\u05b0\u05b1\7\35\2\2\u05b1\u05b3\5\u00b6\\\2\u05b2")
        buf.write("\u05b4\5\u00e0q\2\u05b3\u05b2\3\2\2\2\u05b3\u05b4\3\2")
        buf.write("\2\2\u05b4\u00e3\3\2\2\2\u05b5\u05b6\7\33\2\2\u05b6\u05b8")
        buf.write("\5\u00b0Y\2\u05b7\u05b9\5\u00e0q\2\u05b8\u05b7\3\2\2\2")
        buf.write("\u05b8\u05b9\3\2\2\2\u05b9\u00e5\3\2\2\2\u05ba\u05bb\5")
        buf.write("\u00c8e\2\u05bb\u00e7\3\2\2\2\u05bc\u05be\7-\2\2\u05bd")
        buf.write("\u05bf\5\u00eav\2\u05be\u05bd\3\2\2\2\u05be\u05bf\3\2")
        buf.write("\2\2\u05bf\u00e9\3\2\2\2\u05c0\u05c1\7\31\2\2\u05c1\u05c4")
        buf.write("\5\u00aeX\2\u05c2\u05c4\5\u00d6l\2\u05c3\u05c0\3\2\2\2")
        buf.write("\u05c3\u05c2\3\2\2\2\u05c4\u00eb\3\2\2\2\u05c5\u05c7\7")
        buf.write("\5\2\2\u05c6\u05c5\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05c6")
        buf.write("\3\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u00ed\3\2\2\2\u05ca")
        buf.write("\u05cb\7C\2\2\u05cb\u05d0\5\u00c8e\2\u05cc\u05cd\7>\2")
        buf.write("\2\u05cd\u05cf\5\u00c8e\2\u05ce\u05cc\3\2\2\2\u05cf\u05d2")
        buf.write("\3\2\2\2\u05d0\u05ce\3\2\2\2\u05d0\u05d1\3\2\2\2\u05d1")
        buf.write("\u05d3\3\2\2\2\u05d2\u05d0\3\2\2\2\u05d3\u05d4\7D\2\2")
        buf.write("\u05d4\u00ef\3\2\2\2\u05d5\u05d6\7P\2\2\u05d6\u05da\7")
        buf.write("\6\2\2\u05d7\u05db\7>\2\2\u05d8\u05d9\7>\2\2\u05d9\u05db")
        buf.write("\7\6\2\2\u05da\u05d7\3\2\2\2\u05da\u05d8\3\2\2\2\u05da")
        buf.write("\u05db\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05dd\7Q\2\2")
        buf.write("\u05dd\u00f1\3\2\2\2\u05de\u05e3\5\u00fa~\2\u05df\u05e3")
        buf.write("\5\u00f8}\2\u05e0\u05e3\5\u00fc\177\2\u05e1\u05e3\5\u00fe")
        buf.write("\u0080\2\u05e2\u05de\3\2\2\2\u05e2\u05df\3\2\2\2\u05e2")
        buf.write("\u05e0\3\2\2\2\u05e2\u05e1\3\2\2\2\u05e3\u05e4\3\2\2\2")
        buf.write("\u05e4\u05e5\7/\2\2\u05e5\u00f3\3\2\2\2\u05e6\u05ea\5")
        buf.write("\u00fc\177\2\u05e7\u05ea\5\u00fe\u0080\2\u05e8\u05ea\5")
        buf.write("\u00f8}\2\u05e9\u05e6\3\2\2\2\u05e9\u05e7\3\2\2\2\u05e9")
        buf.write("\u05e8\3\2\2\2\u05ea\u00f5\3\2\2\2\u05eb\u05ee\5\u00f8")
        buf.write("}\2\u05ec\u05ee\5\u00fc\177\2\u05ed\u05eb\3\2\2\2\u05ed")
        buf.write("\u05ec\3\2\2\2\u05ee\u00f7\3\2\2\2\u05ef\u05f1\7h\2\2")
        buf.write("\u05f0\u05f2\5\u00eex\2\u05f1\u05f0\3\2\2\2\u05f1\u05f2")
        buf.write("\3\2\2\2\u05f2\u05f4\3\2\2\2\u05f3\u05f5\5\u00f0y\2\u05f4")
        buf.write("\u05f3\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5\u00f9\3\2\2\2")
        buf.write("\u05f6\u05f8\7h\2\2\u05f7\u05f9\5\u00eex\2\u05f8\u05f7")
        buf.write("\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa")
        buf.write("\u05fb\7;\2\2\u05fb\u00fb\3\2\2\2\u05fc\u05fe\7h\2\2\u05fd")
        buf.write("\u05ff\5\u00eex\2\u05fe\u05fd\3\2\2\2\u05fe\u05ff\3\2")
        buf.write("\2\2\u05ff\u0600\3\2\2\2\u0600\u0601\5\u00c8e\2\u0601")
        buf.write("\u00fd\3\2\2\2\u0602\u0603\7h\2\2\u0603\u0606\7R\2\2\u0604")
        buf.write("\u0607\5\u00f4{\2\u0605\u0607\5 \21\2\u0606\u0604\3\2")
        buf.write("\2\2\u0606\u0605\3\2\2\2\u0607\u0608\3\2\2\2\u0608\u060a")
        buf.write("\7S\2\2\u0609\u060b\5\u00eex\2\u060a\u0609\3\2\2\2\u060a")
        buf.write("\u060b\3\2\2\2\u060b\u00ff\3\2\2\2\u060c\u0610\5\u0102")
        buf.write("\u0082\2\u060d\u0610\5\u0104\u0083\2\u060e\u0610\5\u0106")
        buf.write("\u0084\2\u060f\u060c\3\2\2\2\u060f\u060d\3\2\2\2\u060f")
        buf.write("\u060e\3\2\2\2\u0610\u0101\3\2\2\2\u0611\u0613\7h\2\2")
        buf.write("\u0612\u0614\5\u00eex\2\u0613\u0612\3\2\2\2\u0613\u0614")
        buf.write("\3\2\2\2\u0614\u0615\3\2\2\2\u0615\u0617\7?\2\2\u0616")
        buf.write("\u0618\5\u00f0y\2\u0617\u0616\3\2\2\2\u0617\u0618\3\2")
        buf.write("\2\2\u0618\u0619\3\2\2\2\u0619\u061a\5`\61\2\u061a\u0103")
        buf.write("\3\2\2\2\u061b\u061d\7h\2\2\u061c\u061e\5\u00eex\2\u061d")
        buf.write("\u061c\3\2\2\2\u061d\u061e\3\2\2\2\u061e\u061f\3\2\2\2")
        buf.write("\u061f\u0620\7?\2\2\u0620\u0621\7;\2\2\u0621\u062a\5`")
        buf.write("\61\2\u0622\u0624\7h\2\2\u0623\u0625\5\u00eex\2\u0624")
        buf.write("\u0623\3\2\2\2\u0624\u0625\3\2\2\2\u0625\u0626\3\2\2\2")
        buf.write("\u0626\u0627\7;\2\2\u0627\u0628\7?\2\2\u0628\u062a\5`")
        buf.write("\61\2\u0629\u061b\3\2\2\2\u0629\u0622\3\2\2\2\u062a\u0105")
        buf.write("\3\2\2\2\u062b\u062c\7h\2\2\u062c\u062d\7.\2\2\u062d\u0635")
        buf.write("\7C\2\2\u062e\u0636\5\34\17\2\u062f\u0631\7/\2\2\u0630")
        buf.write("\u0632\5\32\16\2\u0631\u0630\3\2\2\2\u0632\u0633\3\2\2")
        buf.write("\2\u0633\u0631\3\2\2\2\u0633\u0634\3\2\2\2\u0634\u0636")
        buf.write("\3\2\2\2\u0635\u062e\3\2\2\2\u0635\u062f\3\2\2\2\u0636")
        buf.write("\u0637\3\2\2\2\u0637\u0638\7D\2\2\u0638\u0639\7/\2\2\u0639")
        buf.write("\u0107\3\2\2\2\u063a\u063b\7h\2\2\u063b\u063c\7;\2\2\u063c")
        buf.write("\u0109\3\2\2\2\u00e2\u010f\u0113\u0115\u011e\u0127\u012a")
        buf.write("\u0131\u0137\u0140\u0145\u014e\u0154\u0158\u015e\u0164")
        buf.write("\u0168\u016f\u0171\u0173\u0178\u017a\u017c\u0180\u0186")
        buf.write("\u018a\u0191\u0193\u0195\u019a\u019c\u01a3\u01a7\u01ac")
        buf.write("\u01b2\u01b6\u01bc\u01c2\u01c6\u01cd\u01cf\u01d1\u01d6")
        buf.write("\u01d8\u01da\u01de\u01e4\u01e8\u01ef\u01f1\u01f3\u01f8")
        buf.write("\u01fa\u01fe\u0203\u020a\u020e\u021a\u0221\u0226\u022a")
        buf.write("\u022d\u0233\u0237\u023c\u0240\u0244\u0252\u025a\u0262")
        buf.write("\u0264\u0268\u0271\u0278\u027a\u0283\u0288\u028d\u0294")
        buf.write("\u0298\u029f\u02a7\u02b0\u02b9\u02c0\u02cd\u02d3\u02e0")
        buf.write("\u02e6\u02ef\u02fa\u0305\u030a\u030f\u0314\u031c\u0325")
        buf.write("\u032b\u032d\u0335\u0339\u0343\u034a\u034d\u0353\u0356")
        buf.write("\u035b\u0360\u036a\u036e\u0379\u0384\u038e\u0398\u03a2")
        buf.write("\u03a7\u03ac\u03c1\u03c5\u03cd\u03d2\u03d5\u03da\u03e1")
        buf.write("\u03e5\u03e9\u03ef\u03f6\u03ff\u0406\u040a\u0411\u0416")
        buf.write("\u0426\u042e\u0438\u043c\u0443\u044b\u0458\u045b\u045f")
        buf.write("\u0463\u046a\u0474\u047c\u0482\u048a\u049a\u04a5\u04a8")
        buf.write("\u04bf\u04c1\u04c5\u04cb\u04d1\u04d6\u04db\u04e4\u04ea")
        buf.write("\u04f0\u04f6\u04fa\u04fe\u0500\u0504\u050e\u0510\u0517")
        buf.write("\u051b\u051f\u0523\u0526\u0528\u052c\u0530\u0535\u0539")
        buf.write("\u053d\u0544\u0548\u0550\u055a\u055e\u0562\u0564\u0568")
        buf.write("\u056e\u0572\u0576\u0578\u057a\u0580\u0584\u0587\u0591")
        buf.write("\u0595\u059b\u05a5\u05a9\u05ac\u05b3\u05b8\u05be\u05c3")
        buf.write("\u05c8\u05d0\u05da\u05e2\u05e9\u05ed\u05f1\u05f4\u05f8")
        buf.write("\u05fe\u0606\u060a\u060f\u0613\u0617\u061d\u0624\u0629")
        buf.write("\u0633\u0635")
        return buf.getvalue()


class Python3Parser ( Python3ParserBase ):

    grammarFileName = "Python3Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'and'", "'as'", "'assert'", 
                     "'async'", "'await'", "'break'", "'case'", "'class'", 
                     "'continue'", "'def'", "'del'", "'elif'", "'else'", 
                     "'except'", "'False'", "'finally'", "'for'", "'from'", 
                     "'global'", "'if'", "'import'", "'in'", "'is'", "'lambda'", 
                     "'match'", "'None'", "'nonlocal'", "'not'", "'or'", 
                     "'pass'", "'raise'", "'return'", "'True'", "'try'", 
                     "'_'", "'while'", "'with'", "'yield'", "'strict'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'.'", "'...'", "'*'", "'('", 
                     "')'", "','", "':'", "';'", "'**'", "'='", "'['", "']'", 
                     "'|'", "'^'", "'&'", "'<<'", "'>>'", "'+'", "'-'", 
                     "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", 
                     "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", 
                     "'+='", "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", 
                     "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='", 
                     "'?'", "'?!['" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "STRING", "NUMBER", 
                      "INTEGER", "AND", "AS", "ASSERT", "ASYNC", "AWAIT", 
                      "BREAK", "CASE", "CLASS", "CONTINUE", "DEF", "DEL", 
                      "ELIF", "ELSE", "EXCEPT", "FALSE", "FINALLY", "FOR", 
                      "FROM", "GLOBAL", "IF", "IMPORT", "IN", "IS", "LAMBDA", 
                      "MATCH", "NONE", "NONLOCAL", "NOT", "OR", "PASS", 
                      "RAISE", "RETURN", "TRUE", "TRY", "UNDERSCORE", "WHILE", 
                      "WITH", "YIELD", "STRICT", "NEWLINE", "NAME", "STRING_LITERAL", 
                      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "WILDCARD", "SYNTAX_STRICT_START", 
                      "SKIP_", "UNKNOWN_CHAR" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_async_funcdef = 6
    RULE_funcdef = 7
    RULE_parameters = 8
    RULE_tfpdef = 9
    RULE_varargslist = 10
    RULE_vfpdef = 11
    RULE_stmt = 12
    RULE_simple_stmts = 13
    RULE_simple_stmt = 14
    RULE_expr_stmt = 15
    RULE_annassign = 16
    RULE_testlist_star_expr = 17
    RULE_augassign = 18
    RULE_del_stmt = 19
    RULE_pass_stmt = 20
    RULE_flow_stmt = 21
    RULE_break_stmt = 22
    RULE_continue_stmt = 23
    RULE_return_stmt = 24
    RULE_yield_stmt = 25
    RULE_raise_stmt = 26
    RULE_import_stmt = 27
    RULE_import_name = 28
    RULE_import_from = 29
    RULE_import_as_name = 30
    RULE_dotted_as_name = 31
    RULE_import_as_names = 32
    RULE_dotted_as_names = 33
    RULE_dotted_name = 34
    RULE_global_stmt = 35
    RULE_nonlocal_stmt = 36
    RULE_assert_stmt = 37
    RULE_compound_stmt = 38
    RULE_async_stmt = 39
    RULE_if_stmt = 40
    RULE_while_stmt = 41
    RULE_for_stmt = 42
    RULE_try_stmt = 43
    RULE_with_stmt = 44
    RULE_with_item = 45
    RULE_except_clause = 46
    RULE_block = 47
    RULE_match_stmt = 48
    RULE_subject_expr = 49
    RULE_star_named_expressions = 50
    RULE_star_named_expression = 51
    RULE_case_block = 52
    RULE_guard = 53
    RULE_patterns = 54
    RULE_pattern = 55
    RULE_as_pattern = 56
    RULE_or_pattern = 57
    RULE_closed_pattern = 58
    RULE_literal_pattern = 59
    RULE_literal_expr = 60
    RULE_complex_number = 61
    RULE_signed_number = 62
    RULE_signed_real_number = 63
    RULE_real_number = 64
    RULE_imaginary_number = 65
    RULE_capture_pattern = 66
    RULE_pattern_capture_target = 67
    RULE_wildcard_pattern = 68
    RULE_value_pattern = 69
    RULE_attr = 70
    RULE_name_or_attr = 71
    RULE_group_pattern = 72
    RULE_sequence_pattern = 73
    RULE_open_sequence_pattern = 74
    RULE_maybe_sequence_pattern = 75
    RULE_maybe_star_pattern = 76
    RULE_star_pattern = 77
    RULE_mapping_pattern = 78
    RULE_items_pattern = 79
    RULE_key_value_pattern = 80
    RULE_double_star_pattern = 81
    RULE_class_pattern = 82
    RULE_positional_patterns = 83
    RULE_keyword_patterns = 84
    RULE_keyword_pattern = 85
    RULE_test = 86
    RULE_test_nocond = 87
    RULE_lambdef = 88
    RULE_lambdef_nocond = 89
    RULE_or_test = 90
    RULE_and_test = 91
    RULE_not_test = 92
    RULE_comparison = 93
    RULE_comp_op = 94
    RULE_star_expr = 95
    RULE_expr = 96
    RULE_atom_expr = 97
    RULE_atom = 98
    RULE_name = 99
    RULE_testlist_comp = 100
    RULE_trailer = 101
    RULE_subscriptlist = 102
    RULE_subscript_ = 103
    RULE_sliceop = 104
    RULE_exprlist = 105
    RULE_testlist = 106
    RULE_dictorsetmaker = 107
    RULE_classdef = 108
    RULE_arglist = 109
    RULE_argument = 110
    RULE_comp_iter = 111
    RULE_comp_for = 112
    RULE_comp_if = 113
    RULE_encoding_decl = 114
    RULE_yield_expr = 115
    RULE_yield_arg = 116
    RULE_strings = 117
    RULE_wildcard_type = 118
    RULE_wildcard_number = 119
    RULE_stmt_wildcard = 120
    RULE_expr_wildcard = 121
    RULE_atom_wildcard = 122
    RULE_simple_wildcard = 123
    RULE_double_wildcard = 124
    RULE_var_wildcard = 125
    RULE_contains_wildcard = 126
    RULE_compound_wildcard = 127
    RULE_simple_compound_wildcard = 128
    RULE_multiple_compound_wildcard = 129
    RULE_strict_mode = 130
    RULE_list_wildcard = 131

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "async_funcdef", "funcdef", 
                   "parameters", "tfpdef", "varargslist", "vfpdef", "stmt", 
                   "simple_stmts", "simple_stmt", "expr_stmt", "annassign", 
                   "testlist_star_expr", "augassign", "del_stmt", "pass_stmt", 
                   "flow_stmt", "break_stmt", "continue_stmt", "return_stmt", 
                   "yield_stmt", "raise_stmt", "import_stmt", "import_name", 
                   "import_from", "import_as_name", "dotted_as_name", "import_as_names", 
                   "dotted_as_names", "dotted_name", "global_stmt", "nonlocal_stmt", 
                   "assert_stmt", "compound_stmt", "async_stmt", "if_stmt", 
                   "while_stmt", "for_stmt", "try_stmt", "with_stmt", "with_item", 
                   "except_clause", "block", "match_stmt", "subject_expr", 
                   "star_named_expressions", "star_named_expression", "case_block", 
                   "guard", "patterns", "pattern", "as_pattern", "or_pattern", 
                   "closed_pattern", "literal_pattern", "literal_expr", 
                   "complex_number", "signed_number", "signed_real_number", 
                   "real_number", "imaginary_number", "capture_pattern", 
                   "pattern_capture_target", "wildcard_pattern", "value_pattern", 
                   "attr", "name_or_attr", "group_pattern", "sequence_pattern", 
                   "open_sequence_pattern", "maybe_sequence_pattern", "maybe_star_pattern", 
                   "star_pattern", "mapping_pattern", "items_pattern", "key_value_pattern", 
                   "double_star_pattern", "class_pattern", "positional_patterns", 
                   "keyword_patterns", "keyword_pattern", "test", "test_nocond", 
                   "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "atom_expr", 
                   "atom", "name", "testlist_comp", "trailer", "subscriptlist", 
                   "subscript_", "sliceop", "exprlist", "testlist", "dictorsetmaker", 
                   "classdef", "arglist", "argument", "comp_iter", "comp_for", 
                   "comp_if", "encoding_decl", "yield_expr", "yield_arg", 
                   "strings", "wildcard_type", "wildcard_number", "stmt_wildcard", 
                   "expr_wildcard", "atom_wildcard", "simple_wildcard", 
                   "double_wildcard", "var_wildcard", "contains_wildcard", 
                   "compound_wildcard", "simple_compound_wildcard", "multiple_compound_wildcard", 
                   "strict_mode", "list_wildcard" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    STRING=3
    NUMBER=4
    INTEGER=5
    AND=6
    AS=7
    ASSERT=8
    ASYNC=9
    AWAIT=10
    BREAK=11
    CASE=12
    CLASS=13
    CONTINUE=14
    DEF=15
    DEL=16
    ELIF=17
    ELSE=18
    EXCEPT=19
    FALSE=20
    FINALLY=21
    FOR=22
    FROM=23
    GLOBAL=24
    IF=25
    IMPORT=26
    IN=27
    IS=28
    LAMBDA=29
    MATCH=30
    NONE=31
    NONLOCAL=32
    NOT=33
    OR=34
    PASS=35
    RAISE=36
    RETURN=37
    TRUE=38
    TRY=39
    UNDERSCORE=40
    WHILE=41
    WITH=42
    YIELD=43
    STRICT=44
    NEWLINE=45
    NAME=46
    STRING_LITERAL=47
    BYTES_LITERAL=48
    DECIMAL_INTEGER=49
    OCT_INTEGER=50
    HEX_INTEGER=51
    BIN_INTEGER=52
    FLOAT_NUMBER=53
    IMAG_NUMBER=54
    DOT=55
    ELLIPSIS=56
    STAR=57
    OPEN_PAREN=58
    CLOSE_PAREN=59
    COMMA=60
    COLON=61
    SEMI_COLON=62
    POWER=63
    ASSIGN=64
    OPEN_BRACK=65
    CLOSE_BRACK=66
    OR_OP=67
    XOR=68
    AND_OP=69
    LEFT_SHIFT=70
    RIGHT_SHIFT=71
    ADD=72
    MINUS=73
    DIV=74
    MOD=75
    IDIV=76
    NOT_OP=77
    OPEN_BRACE=78
    CLOSE_BRACE=79
    LESS_THAN=80
    GREATER_THAN=81
    EQUALS=82
    GT_EQ=83
    LT_EQ=84
    NOT_EQ_1=85
    NOT_EQ_2=86
    AT=87
    ARROW=88
    ADD_ASSIGN=89
    SUB_ASSIGN=90
    MULT_ASSIGN=91
    AT_ASSIGN=92
    DIV_ASSIGN=93
    MOD_ASSIGN=94
    AND_ASSIGN=95
    OR_ASSIGN=96
    XOR_ASSIGN=97
    LEFT_SHIFT_ASSIGN=98
    RIGHT_SHIFT_ASSIGN=99
    POWER_ASSIGN=100
    IDIV_ASSIGN=101
    WILDCARD=102
    SYNTAX_STRICT_START=103
    SKIP_=104
    UNKNOWN_CHAR=105

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = Python3Parser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 264
                self.match(Python3Parser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 265
                self.simple_stmts()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 266
                self.compound_stmt()
                self.state = 267
                self.match(Python3Parser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.DEF) | (1 << Python3Parser.DEL) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.FROM) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.IF) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.NOT) | (1 << Python3Parser.PASS) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.TRY) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.WITH) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.AT - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                self.state = 273
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.NEWLINE]:
                    self.state = 271
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.ASSERT, Python3Parser.ASYNC, Python3Parser.AWAIT, Python3Parser.BREAK, Python3Parser.CLASS, Python3Parser.CONTINUE, Python3Parser.DEF, Python3Parser.DEL, Python3Parser.FALSE, Python3Parser.FOR, Python3Parser.FROM, Python3Parser.GLOBAL, Python3Parser.IF, Python3Parser.IMPORT, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NONLOCAL, Python3Parser.NOT, Python3Parser.PASS, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.TRUE, Python3Parser.TRY, Python3Parser.UNDERSCORE, Python3Parser.WHILE, Python3Parser.WITH, Python3Parser.YIELD, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.AT, Python3Parser.WILDCARD]:
                    self.state = 272
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 278
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = Python3Parser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.testlist()
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.NEWLINE:
                self.state = 281
                self.match(Python3Parser.NEWLINE)
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 287
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = Python3Parser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.match(Python3Parser.AT)
            self.state = 290
            self.dotted_name()
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 291
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                    self.state = 292
                    self.arglist()


                self.state = 295
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 298
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DecoratorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DecoratorContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = Python3Parser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 300
                self.decorator()
                self.state = 303 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(Python3Parser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def async_funcdef(self):
            return self.getTypedRuleContext(Python3Parser.Async_funcdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = Python3Parser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.decorators()
            self.state = 309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.CLASS]:
                self.state = 306
                self.classdef()
                pass
            elif token in [Python3Parser.DEF]:
                self.state = 307
                self.funcdef()
                pass
            elif token in [Python3Parser.ASYNC]:
                self.state = 308
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Async_funcdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_funcdef" ):
                listener.enterAsync_funcdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_funcdef" ):
                listener.exitAsync_funcdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_funcdef" ):
                return visitor.visitAsync_funcdef(self)
            else:
                return visitor.visitChildren(self)




    def async_funcdef(self):

        localctx = Python3Parser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(Python3Parser.ASYNC)
            self.state = 312
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def parameters(self):
            return self.getTypedRuleContext(Python3Parser.ParametersContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def ARROW(self):
            return self.getToken(Python3Parser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = Python3Parser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(Python3Parser.DEF)
            self.state = 318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 315
                self.name()
                pass

            elif la_ == 2:
                self.state = 316
                self.simple_wildcard()
                pass

            elif la_ == 3:
                self.state = 317
                self.var_wildcard()
                pass


            self.state = 320
            self.parameters()
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ARROW:
                self.state = 321
                self.match(Python3Parser.ARROW)
                self.state = 322
                self.test()


            self.state = 325
            self.match(Python3Parser.COLON)
            self.state = 326
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = Python3Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.WILDCARD]:
                self.state = 329
                self.tfpdef()
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 330
                    self.match(Python3Parser.ASSIGN)
                    self.state = 331
                    self.test()


                self.state = 342
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 334
                        self.match(Python3Parser.COMMA)
                        self.state = 335
                        self.tfpdef()
                        self.state = 338
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 336
                            self.match(Python3Parser.ASSIGN)
                            self.state = 337
                            self.test()

                 
                    self.state = 344
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 345
                    self.match(Python3Parser.COMMA)
                    self.state = 376
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 346
                        self.match(Python3Parser.STAR)
                        self.state = 348
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0) or _la==Python3Parser.WILDCARD:
                            self.state = 347
                            self.tfpdef()


                        self.state = 358
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 350
                                self.match(Python3Parser.COMMA)
                                self.state = 351
                                self.tfpdef()
                                self.state = 354
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 352
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 353
                                    self.test()

                         
                            self.state = 360
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 369
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 361
                            self.match(Python3Parser.COMMA)
                            self.state = 367
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Python3Parser.POWER:
                                self.state = 362
                                self.match(Python3Parser.POWER)
                                self.state = 363
                                self.tfpdef()
                                self.state = 365
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.COMMA:
                                    self.state = 364
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 371
                        self.match(Python3Parser.POWER)
                        self.state = 372
                        self.tfpdef()
                        self.state = 374
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 373
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [Python3Parser.CLOSE_PAREN]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.state = 380
                self.match(Python3Parser.STAR)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0) or _la==Python3Parser.WILDCARD:
                    self.state = 381
                    self.tfpdef()


                self.state = 392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 384
                        self.match(Python3Parser.COMMA)
                        self.state = 385
                        self.tfpdef()
                        self.state = 388
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 386
                            self.match(Python3Parser.ASSIGN)
                            self.state = 387
                            self.test()

                 
                    self.state = 394
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 395
                    self.match(Python3Parser.COMMA)
                    self.state = 401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.POWER:
                        self.state = 396
                        self.match(Python3Parser.POWER)
                        self.state = 397
                        self.tfpdef()
                        self.state = 399
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 398
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [Python3Parser.POWER]:
                self.state = 405
                self.match(Python3Parser.POWER)
                self.state = 406
                self.tfpdef()
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 407
                    self.match(Python3Parser.COMMA)


                pass
            elif token in [Python3Parser.CLOSE_PAREN]:
                pass
            else:
                pass
            self.state = 412
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def list_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.List_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTfpdef" ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = Python3Parser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 414
                self.name()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COLON:
                    self.state = 415
                    self.match(Python3Parser.COLON)
                    self.state = 416
                    self.test()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 419
                self.expr_wildcard()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 420
                self.list_wildcard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.VfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.VfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.WILDCARD]:
                self.state = 423
                self.vfpdef()
                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 424
                    self.match(Python3Parser.ASSIGN)
                    self.state = 425
                    self.test()


                self.state = 436
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 428
                        self.match(Python3Parser.COMMA)
                        self.state = 429
                        self.vfpdef()
                        self.state = 432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 430
                            self.match(Python3Parser.ASSIGN)
                            self.state = 431
                            self.test()

                 
                    self.state = 438
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 439
                    self.match(Python3Parser.COMMA)
                    self.state = 470
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 440
                        self.match(Python3Parser.STAR)
                        self.state = 442
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0) or _la==Python3Parser.WILDCARD:
                            self.state = 441
                            self.vfpdef()


                        self.state = 452
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 444
                                self.match(Python3Parser.COMMA)
                                self.state = 445
                                self.vfpdef()
                                self.state = 448
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 446
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 447
                                    self.test()

                         
                            self.state = 454
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

                        self.state = 463
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 455
                            self.match(Python3Parser.COMMA)
                            self.state = 461
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Python3Parser.POWER:
                                self.state = 456
                                self.match(Python3Parser.POWER)
                                self.state = 457
                                self.vfpdef()
                                self.state = 459
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.COMMA:
                                    self.state = 458
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 465
                        self.match(Python3Parser.POWER)
                        self.state = 466
                        self.vfpdef()
                        self.state = 468
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 467
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [Python3Parser.COLON]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.state = 474
                self.match(Python3Parser.STAR)
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0) or _la==Python3Parser.WILDCARD:
                    self.state = 475
                    self.vfpdef()


                self.state = 486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 478
                        self.match(Python3Parser.COMMA)
                        self.state = 479
                        self.vfpdef()
                        self.state = 482
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 480
                            self.match(Python3Parser.ASSIGN)
                            self.state = 481
                            self.test()

                 
                    self.state = 488
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 489
                    self.match(Python3Parser.COMMA)
                    self.state = 495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.POWER:
                        self.state = 490
                        self.match(Python3Parser.POWER)
                        self.state = 491
                        self.vfpdef()
                        self.state = 493
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 492
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [Python3Parser.POWER]:
                self.state = 499
                self.match(Python3Parser.POWER)
                self.state = 500
                self.vfpdef()
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 501
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpdef" ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = Python3Parser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_vfpdef)
        try:
            self.state = 508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self.name()
                pass
            elif token in [Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.expr_wildcard()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Stmt_wildcardContext,0)


        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stmt)
        try:
            self.state = 513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.stmt_wildcard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 511
                self.simple_stmts()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 512
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.SEMI_COLON)
            else:
                return self.getToken(Python3Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmts" ):
                listener.enterSimple_stmts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmts" ):
                listener.exitSimple_stmts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmts" ):
                return visitor.visitSimple_stmts(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmts(self):

        localctx = Python3Parser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_stmts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.simple_stmt()
            self.state = 520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 516
                    self.match(Python3Parser.SEMI_COLON)
                    self.state = 517
                    self.simple_stmt() 
                self.state = 522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.SEMI_COLON:
                self.state = 523
                self.match(Python3Parser.SEMI_COLON)


            self.state = 526
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = Python3Parser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_simple_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.state = 528
                self.expr_stmt()
                pass
            elif token in [Python3Parser.DEL]:
                self.state = 529
                self.del_stmt()
                pass
            elif token in [Python3Parser.PASS]:
                self.state = 530
                self.pass_stmt()
                pass
            elif token in [Python3Parser.BREAK, Python3Parser.CONTINUE, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.YIELD]:
                self.state = 531
                self.flow_stmt()
                pass
            elif token in [Python3Parser.FROM, Python3Parser.IMPORT]:
                self.state = 532
                self.import_stmt()
                pass
            elif token in [Python3Parser.GLOBAL]:
                self.state = 533
                self.global_stmt()
                pass
            elif token in [Python3Parser.NONLOCAL]:
                self.state = 534
                self.nonlocal_stmt()
                pass
            elif token in [Python3Parser.ASSERT]:
                self.state = 535
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext,i)


        def annassign(self):
            return self.getTypedRuleContext(Python3Parser.AnnassignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = Python3Parser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.testlist_star_expr()
            self.state = 555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.COLON]:
                self.state = 539
                self.annassign()
                pass
            elif token in [Python3Parser.ADD_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.MULT_ASSIGN, Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.MOD_ASSIGN, Python3Parser.AND_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.XOR_ASSIGN, Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN, Python3Parser.POWER_ASSIGN, Python3Parser.IDIV_ASSIGN]:
                self.state = 540
                self.augassign()
                self.state = 543
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 541
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                    self.state = 542
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON, Python3Parser.ASSIGN, Python3Parser.GREATER_THAN]:
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.ASSIGN:
                    self.state = 545
                    self.match(Python3Parser.ASSIGN)
                    self.state = 548
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.YIELD]:
                        self.state = 546
                        self.yield_expr()
                        pass
                    elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                        self.state = 547
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_annassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnassign" ):
                listener.enterAnnassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnassign" ):
                listener.exitAnnassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnassign" ):
                return visitor.visitAnnassign(self)
            else:
                return visitor.visitChildren(self)




    def annassign(self):

        localctx = Python3Parser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_annassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(Python3Parser.COLON)
            self.state = 558
            self.test()
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASSIGN:
                self.state = 559
                self.match(Python3Parser.ASSIGN)
                self.state = 560
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = Python3Parser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.state = 563
                self.test()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 564
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 574
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 567
                    self.match(Python3Parser.COMMA)
                    self.state = 570
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                        self.state = 568
                        self.test()
                        pass
                    elif token in [Python3Parser.STAR]:
                        self.state = 569
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 576
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 577
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(Python3Parser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(Python3Parser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(Python3Parser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(Python3Parser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(Python3Parser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(Python3Parser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(Python3Parser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(Python3Parser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(Python3Parser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(Python3Parser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(Python3Parser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            _la = self._input.LA(1)
            if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (Python3Parser.ADD_ASSIGN - 89)) | (1 << (Python3Parser.SUB_ASSIGN - 89)) | (1 << (Python3Parser.MULT_ASSIGN - 89)) | (1 << (Python3Parser.AT_ASSIGN - 89)) | (1 << (Python3Parser.DIV_ASSIGN - 89)) | (1 << (Python3Parser.MOD_ASSIGN - 89)) | (1 << (Python3Parser.AND_ASSIGN - 89)) | (1 << (Python3Parser.OR_ASSIGN - 89)) | (1 << (Python3Parser.XOR_ASSIGN - 89)) | (1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 89)) | (1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 89)) | (1 << (Python3Parser.POWER_ASSIGN - 89)) | (1 << (Python3Parser.IDIV_ASSIGN - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = Python3Parser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(Python3Parser.DEL)
            self.state = 583
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = Python3Parser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(Python3Parser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = Python3Parser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_flow_stmt)
        try:
            self.state = 592
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 587
                self.break_stmt()
                pass
            elif token in [Python3Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 588
                self.continue_stmt()
                pass
            elif token in [Python3Parser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 589
                self.return_stmt()
                pass
            elif token in [Python3Parser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 590
                self.raise_stmt()
                pass
            elif token in [Python3Parser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 591
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(Python3Parser.RETURN)
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                self.state = 599
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(Python3Parser.RAISE)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                self.state = 605
                self.test()
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FROM:
                    self.state = 606
                    self.match(Python3Parser.FROM)
                    self.state = 607
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(Python3Parser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(Python3Parser.Import_fromContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = Python3Parser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_stmt)
        try:
            self.state = 614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.import_name()
                pass
            elif token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = Python3Parser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(Python3Parser.IMPORT)
            self.state = 617
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Import_as_namesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELLIPSIS)
            else:
                return self.getToken(Python3Parser.ELLIPSIS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = Python3Parser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(Python3Parser.FROM)
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS:
                    self.state = 620
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 626
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 628 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 627
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 630 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        break

                pass


            self.state = 634
            self.match(Python3Parser.IMPORT)
            self.state = 641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.state = 635
                self.match(Python3Parser.STAR)
                pass
            elif token in [Python3Parser.OPEN_PAREN]:
                self.state = 636
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 637
                self.import_as_names()
                self.state = 638
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.state = 640
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = Python3Parser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.name()
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 644
                self.match(Python3Parser.AS)
                self.state = 645
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = Python3Parser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.dotted_name()
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 649
                self.match(Python3Parser.AS)
                self.state = 650
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = Python3Parser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.import_as_name()
            self.state = 658
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 654
                    self.match(Python3Parser.COMMA)
                    self.state = 655
                    self.import_as_name() 
                self.state = 660
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 661
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = Python3Parser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.dotted_as_name()
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 665
                self.match(Python3Parser.COMMA)
                self.state = 666
                self.dotted_as_name()
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = Python3Parser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.name()
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.DOT:
                self.state = 673
                self.match(Python3Parser.DOT)
                self.state = 674
                self.name()
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = Python3Parser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(Python3Parser.GLOBAL)
            self.state = 681
            self.name()
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 682
                self.match(Python3Parser.COMMA)
                self.state = 683
                self.name()
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = Python3Parser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(Python3Parser.NONLOCAL)
            self.state = 690
            self.name()
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 691
                self.match(Python3Parser.COMMA)
                self.state = 692
                self.name()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(Python3Parser.ASSERT)
            self.state = 699
            self.test()
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 700
                self.match(Python3Parser.COMMA)
                self.state = 701
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Compound_wildcardContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(Python3Parser.DecoratedContext,0)


        def async_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Async_stmtContext,0)


        def match_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Match_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = Python3Parser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_compound_stmt)
        try:
            self.state = 715
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.compound_wildcard()
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self.if_stmt()
                pass
            elif token in [Python3Parser.WHILE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 706
                self.while_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 707
                self.for_stmt()
                pass
            elif token in [Python3Parser.TRY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 708
                self.try_stmt()
                pass
            elif token in [Python3Parser.WITH]:
                self.enterOuterAlt(localctx, 6)
                self.state = 709
                self.with_stmt()
                pass
            elif token in [Python3Parser.DEF]:
                self.enterOuterAlt(localctx, 7)
                self.state = 710
                self.funcdef()
                pass
            elif token in [Python3Parser.CLASS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 711
                self.classdef()
                pass
            elif token in [Python3Parser.AT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 712
                self.decorated()
                pass
            elif token in [Python3Parser.ASYNC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 713
                self.async_stmt()
                pass
            elif token in [Python3Parser.MATCH]:
                self.enterOuterAlt(localctx, 11)
                self.state = 714
                self.match_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Async_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_stmt" ):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_stmt" ):
                listener.exitAsync_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_stmt" ):
                return visitor.visitAsync_stmt(self)
            else:
                return visitor.visitChildren(self)




    def async_stmt(self):

        localctx = Python3Parser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(Python3Parser.ASYNC)
            self.state = 721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.DEF]:
                self.state = 718
                self.funcdef()
                pass
            elif token in [Python3Parser.WITH]:
                self.state = 719
                self.with_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.state = 720
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(Python3Parser.IF)
            self.state = 724
            self.test()
            self.state = 725
            self.match(Python3Parser.COLON)
            self.state = 726
            self.block()
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.ELIF:
                self.state = 727
                self.match(Python3Parser.ELIF)
                self.state = 728
                self.test()
                self.state = 729
                self.match(Python3Parser.COLON)
                self.state = 730
                self.block()
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 737
                self.match(Python3Parser.ELSE)
                self.state = 738
                self.match(Python3Parser.COLON)
                self.state = 739
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(Python3Parser.WHILE)
            self.state = 743
            self.test()
            self.state = 744
            self.match(Python3Parser.COLON)
            self.state = 745
            self.block()
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 746
                self.match(Python3Parser.ELSE)
                self.state = 747
                self.match(Python3Parser.COLON)
                self.state = 748
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(Python3Parser.FOR)
            self.state = 752
            self.exprlist()
            self.state = 753
            self.match(Python3Parser.IN)
            self.state = 754
            self.testlist()
            self.state = 755
            self.match(Python3Parser.COLON)
            self.state = 756
            self.block()
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 757
                self.match(Python3Parser.ELSE)
                self.state = 758
                self.match(Python3Parser.COLON)
                self.state = 759
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(Python3Parser.TRY)
            self.state = 763
            self.match(Python3Parser.COLON)
            self.state = 764
            self.block()
            self.state = 786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.EXCEPT]:
                self.state = 769 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 765
                    self.except_clause()
                    self.state = 766
                    self.match(Python3Parser.COLON)
                    self.state = 767
                    self.block()
                    self.state = 771 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.EXCEPT):
                        break

                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ELSE:
                    self.state = 773
                    self.match(Python3Parser.ELSE)
                    self.state = 774
                    self.match(Python3Parser.COLON)
                    self.state = 775
                    self.block()


                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FINALLY:
                    self.state = 778
                    self.match(Python3Parser.FINALLY)
                    self.state = 779
                    self.match(Python3Parser.COLON)
                    self.state = 780
                    self.block()


                pass
            elif token in [Python3Parser.FINALLY]:
                self.state = 783
                self.match(Python3Parser.FINALLY)
                self.state = 784
                self.match(Python3Parser.COLON)
                self.state = 785
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.With_itemContext)
            else:
                return self.getTypedRuleContext(Python3Parser.With_itemContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = Python3Parser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(Python3Parser.WITH)
            self.state = 789
            self.with_item()
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 790
                self.match(Python3Parser.COMMA)
                self.state = 791
                self.with_item()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 797
            self.match(Python3Parser.COLON)
            self.state = 798
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = Python3Parser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.test()
            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 801
                self.match(Python3Parser.AS)
                self.state = 802
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(Python3Parser.EXCEPT)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                self.state = 806
                self.test()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.AS:
                    self.state = 807
                    self.match(Python3Parser.AS)
                    self.state = 808
                    self.name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = Python3Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.state = 823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.ASSERT, Python3Parser.AWAIT, Python3Parser.BREAK, Python3Parser.CONTINUE, Python3Parser.DEL, Python3Parser.FALSE, Python3Parser.FROM, Python3Parser.GLOBAL, Python3Parser.IMPORT, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NONLOCAL, Python3Parser.NOT, Python3Parser.PASS, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.YIELD, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                self.simple_stmts()
                pass
            elif token in [Python3Parser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 814
                self.match(Python3Parser.NEWLINE)
                self.state = 815
                self.match(Python3Parser.INDENT)
                self.state = 817 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 816
                    self.stmt()
                    self.state = 819 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.DEF) | (1 << Python3Parser.DEL) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.FROM) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.IF) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.NOT) | (1 << Python3Parser.PASS) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.TRY) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.WITH) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.AT - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0)):
                        break

                self.state = 821
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Match_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(Python3Parser.MATCH, 0)

        def subject_expr(self):
            return self.getTypedRuleContext(Python3Parser.Subject_exprContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Case_blockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Case_blockContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_match_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_stmt" ):
                listener.enterMatch_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_stmt" ):
                listener.exitMatch_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_stmt" ):
                return visitor.visitMatch_stmt(self)
            else:
                return visitor.visitChildren(self)




    def match_stmt(self):

        localctx = Python3Parser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_match_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(Python3Parser.MATCH)
            self.state = 826
            self.subject_expr()
            self.state = 827
            self.match(Python3Parser.COLON)
            self.state = 828
            self.match(Python3Parser.NEWLINE)
            self.state = 829
            self.match(Python3Parser.INDENT)
            self.state = 831 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 830
                self.case_block()
                self.state = 833 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.CASE):
                    break

            self.state = 835
            self.match(Python3Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subject_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(Python3Parser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(Python3Parser.Star_named_expressionsContext,0)


        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subject_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubject_expr" ):
                listener.enterSubject_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubject_expr" ):
                listener.exitSubject_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubject_expr" ):
                return visitor.visitSubject_expr(self)
            else:
                return visitor.visitChildren(self)




    def subject_expr(self):

        localctx = Python3Parser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_subject_expr)
        self._la = 0 # Token type
        try:
            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 837
                self.star_named_expression()
                self.state = 838
                self.match(Python3Parser.COMMA)
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 839
                    self.star_named_expressions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 842
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_named_expressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def star_named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_named_expressionContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_named_expressionContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_named_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expressions" ):
                listener.enterStar_named_expressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expressions" ):
                listener.exitStar_named_expressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expressions" ):
                return visitor.visitStar_named_expressions(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expressions(self):

        localctx = Python3Parser.Star_named_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_star_named_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(Python3Parser.COMMA)
            self.state = 847 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 846
                self.star_named_expression()
                self.state = 849 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0)):
                    break

            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 851
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_named_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_named_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expression" ):
                listener.enterStar_named_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expression" ):
                listener.exitStar_named_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expression" ):
                return visitor.visitStar_named_expression(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expression(self):

        localctx = Python3Parser.Star_named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_star_named_expression)
        try:
            self.state = 857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.match(Python3Parser.STAR)
                self.state = 855
                self.expr(0)
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 856
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Python3Parser.CASE, 0)

        def patterns(self):
            return self.getTypedRuleContext(Python3Parser.PatternsContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def guard(self):
            return self.getTypedRuleContext(Python3Parser.GuardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_case_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_block" ):
                listener.enterCase_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_block" ):
                listener.exitCase_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_block" ):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)




    def case_block(self):

        localctx = Python3Parser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(Python3Parser.CASE)
            self.state = 860
            self.patterns()
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.IF:
                self.state = 861
                self.guard()


            self.state = 864
            self.match(Python3Parser.COLON)
            self.state = 865
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GuardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard" ):
                listener.enterGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard" ):
                listener.exitGuard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard" ):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)




    def guard(self):

        localctx = Python3Parser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(Python3Parser.IF)
            self.state = 868
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Open_sequence_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatterns" ):
                listener.enterPatterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatterns" ):
                listener.exitPatterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatterns" ):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)




    def patterns(self):

        localctx = Python3Parser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_patterns)
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 870
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 871
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(Python3Parser.As_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Or_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = Python3Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_pattern)
        try:
            self.state = 876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.or_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class As_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Or_patternContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_as_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_pattern" ):
                listener.enterAs_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_pattern" ):
                listener.exitAs_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_pattern" ):
                return visitor.visitAs_pattern(self)
            else:
                return visitor.visitChildren(self)




    def as_pattern(self):

        localctx = Python3Parser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.or_pattern()
            self.state = 879
            self.match(Python3Parser.AS)
            self.state = 880
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Closed_patternContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR_OP)
            else:
                return self.getToken(Python3Parser.OR_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_pattern" ):
                listener.enterOr_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_pattern" ):
                listener.exitOr_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_pattern" ):
                return visitor.visitOr_pattern(self)
            else:
                return visitor.visitChildren(self)




    def or_pattern(self):

        localctx = Python3Parser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_or_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.closed_pattern()
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR_OP:
                self.state = 883
                self.match(Python3Parser.OR_OP)
                self.state = 884
                self.closed_pattern()
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Closed_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcard_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_patternContext,0)


        def literal_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Literal_patternContext,0)


        def capture_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Capture_patternContext,0)


        def value_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Value_patternContext,0)


        def group_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Group_patternContext,0)


        def sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Sequence_patternContext,0)


        def mapping_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Mapping_patternContext,0)


        def class_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Class_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_closed_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosed_pattern" ):
                listener.enterClosed_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosed_pattern" ):
                listener.exitClosed_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosed_pattern" ):
                return visitor.visitClosed_pattern(self)
            else:
                return visitor.visitChildren(self)




    def closed_pattern(self):

        localctx = Python3Parser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_closed_pattern)
        try:
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 890
                self.wildcard_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 891
                self.literal_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 892
                self.capture_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 893
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 894
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 895
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 896
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 897
                self.class_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(Python3Parser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(Python3Parser.StringsContext,0)


        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_literal_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_pattern" ):
                listener.enterLiteral_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_pattern" ):
                listener.exitLiteral_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_pattern" ):
                return visitor.visitLiteral_pattern(self)
            else:
                return visitor.visitChildren(self)




    def literal_pattern(self):

        localctx = Python3Parser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_literal_pattern)
        try:
            self.state = 908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self.signed_number()
                self.state = 901
                if not  self.CannotBePlusMinus() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " self.CannotBePlusMinus() ")
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 903
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 904
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 905
                self.match(Python3Parser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 906
                self.match(Python3Parser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 907
                self.match(Python3Parser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(Python3Parser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(Python3Parser.StringsContext,0)


        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_literal_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expr" ):
                listener.enterLiteral_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expr" ):
                listener.exitLiteral_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_expr" ):
                return visitor.visitLiteral_expr(self)
            else:
                return visitor.visitChildren(self)




    def literal_expr(self):

        localctx = Python3Parser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_literal_expr)
        try:
            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 910
                self.signed_number()
                self.state = 911
                if not  self.CannotBePlusMinus() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " self.CannotBePlusMinus() ")
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 913
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 914
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 915
                self.match(Python3Parser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 916
                self.match(Python3Parser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 917
                self.match(Python3Parser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Complex_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_real_numberContext,0)


        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def imaginary_number(self):
            return self.getTypedRuleContext(Python3Parser.Imaginary_numberContext,0)


        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_complex_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex_number" ):
                listener.enterComplex_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex_number" ):
                listener.exitComplex_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex_number" ):
                return visitor.visitComplex_number(self)
            else:
                return visitor.visitChildren(self)




    def complex_number(self):

        localctx = Python3Parser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_complex_number)
        try:
            self.state = 928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 920
                self.signed_real_number()
                self.state = 921
                self.match(Python3Parser.ADD)
                self.state = 922
                self.imaginary_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 924
                self.signed_real_number()
                self.state = 925
                self.match(Python3Parser.MINUS)
                self.state = 926
                self.imaginary_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = Python3Parser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_signed_number)
        try:
            self.state = 933
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 930
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [Python3Parser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 931
                self.match(Python3Parser.MINUS)
                self.state = 932
                self.match(Python3Parser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_real_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(Python3Parser.Real_numberContext,0)


        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_signed_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_real_number" ):
                listener.enterSigned_real_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_real_number" ):
                listener.exitSigned_real_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_real_number" ):
                return visitor.visitSigned_real_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_real_number(self):

        localctx = Python3Parser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_signed_real_number)
        try:
            self.state = 938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 935
                self.real_number()
                pass
            elif token in [Python3Parser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 936
                self.match(Python3Parser.MINUS)
                self.state = 937
                self.real_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Real_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_number" ):
                listener.enterReal_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_number" ):
                listener.exitReal_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReal_number" ):
                return visitor.visitReal_number(self)
            else:
                return visitor.visitChildren(self)




    def real_number(self):

        localctx = Python3Parser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(Python3Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Imaginary_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_imaginary_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImaginary_number" ):
                listener.enterImaginary_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImaginary_number" ):
                listener.exitImaginary_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImaginary_number" ):
                return visitor.visitImaginary_number(self)
            else:
                return visitor.visitChildren(self)




    def imaginary_number(self):

        localctx = Python3Parser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(Python3Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Capture_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_capture_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_pattern" ):
                listener.enterCapture_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_pattern" ):
                listener.exitCapture_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_pattern" ):
                return visitor.visitCapture_pattern(self)
            else:
                return visitor.visitChildren(self)




    def capture_pattern(self):

        localctx = Python3Parser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pattern_capture_targetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_pattern_capture_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_capture_target" ):
                listener.enterPattern_capture_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_capture_target" ):
                listener.exitPattern_capture_target(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern_capture_target" ):
                return visitor.visitPattern_capture_target(self)
            else:
                return visitor.visitChildren(self)




    def pattern_capture_target(self):

        localctx = Python3Parser.Pattern_capture_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.name()
            self.state = 947
            if not  self.CannotBeDotLpEq() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " self.CannotBeDotLpEq() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wildcard_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(Python3Parser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_wildcard_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_pattern" ):
                listener.enterWildcard_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_pattern" ):
                listener.exitWildcard_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_pattern" ):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_pattern(self):

        localctx = Python3Parser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(Python3Parser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_pattern" ):
                listener.enterValue_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_pattern" ):
                listener.exitValue_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_pattern" ):
                return visitor.visitValue_pattern(self)
            else:
                return visitor.visitChildren(self)




    def value_pattern(self):

        localctx = Python3Parser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.attr()
            self.state = 952
            if not  self.CannotBeDotLpEq() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " self.CannotBeDotLpEq() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = Python3Parser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.name()
            self.state = 957 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 955
                    self.match(Python3Parser.DOT)
                    self.state = 956
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 959 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_or_attrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_name_or_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_or_attr" ):
                listener.enterName_or_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_or_attr" ):
                listener.exitName_or_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_or_attr" ):
                return visitor.visitName_or_attr(self)
            else:
                return visitor.visitChildren(self)




    def name_or_attr(self):

        localctx = Python3Parser.Name_or_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_name_or_attr)
        try:
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.attr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 962
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_group_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_pattern" ):
                listener.enterGroup_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_pattern" ):
                listener.exitGroup_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_pattern" ):
                return visitor.visitGroup_pattern(self)
            else:
                return visitor.visitChildren(self)




    def group_pattern(self):

        localctx = Python3Parser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 966
            self.pattern()
            self.state = 967
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_sequence_patternContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Open_sequence_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_pattern" ):
                listener.enterSequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_pattern" ):
                listener.exitSequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_pattern" ):
                return visitor.visitSequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def sequence_pattern(self):

        localctx = Python3Parser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 969
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)))) != 0):
                    self.state = 970
                    self.maybe_sequence_pattern()


                self.state = 973
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 974
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)))) != 0):
                    self.state = 975
                    self.open_sequence_pattern()


                self.state = 978
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_sequence_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_star_patternContext,0)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_sequence_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_open_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_sequence_pattern" ):
                listener.enterOpen_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_sequence_pattern" ):
                listener.exitOpen_sequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_sequence_pattern" ):
                return visitor.visitOpen_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def open_sequence_pattern(self):

        localctx = Python3Parser.Open_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_open_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.maybe_star_pattern()
            self.state = 982
            self.match(Python3Parser.COMMA)
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)))) != 0):
                self.state = 983
                self.maybe_sequence_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maybe_sequence_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Maybe_star_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Maybe_star_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_maybe_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_sequence_pattern" ):
                listener.enterMaybe_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_sequence_pattern" ):
                listener.exitMaybe_sequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_sequence_pattern" ):
                return visitor.visitMaybe_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_sequence_pattern(self):

        localctx = Python3Parser.Maybe_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_maybe_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.maybe_star_pattern()
            self.state = 991
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 987
                    self.match(Python3Parser.COMMA)
                    self.state = 988
                    self.maybe_star_pattern() 
                self.state = 993
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 994
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maybe_star_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Star_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_maybe_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_star_pattern" ):
                listener.enterMaybe_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_star_pattern" ):
                listener.exitMaybe_star_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_star_pattern" ):
                return visitor.visitMaybe_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_star_pattern(self):

        localctx = Python3Parser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_maybe_star_pattern)
        try:
            self.state = 999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 997
                self.star_pattern()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.MINUS, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 998
                self.pattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_pattern" ):
                listener.enterStar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_pattern" ):
                listener.exitStar_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_pattern" ):
                return visitor.visitStar_pattern(self)
            else:
                return visitor.visitChildren(self)




    def star_pattern(self):

        localctx = Python3Parser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_star_pattern)
        try:
            self.state = 1005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1001
                self.match(Python3Parser.STAR)
                self.state = 1002
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1003
                self.match(Python3Parser.STAR)
                self.state = 1004
                self.wildcard_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mapping_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Double_star_patternContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Items_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_mapping_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_pattern" ):
                listener.enterMapping_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_pattern" ):
                listener.exitMapping_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping_pattern" ):
                return visitor.visitMapping_pattern(self)
            else:
                return visitor.visitChildren(self)




    def mapping_pattern(self):

        localctx = Python3Parser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_mapping_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1032
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1008
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1009
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1010
                self.double_star_pattern()
                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1011
                    self.match(Python3Parser.COMMA)


                self.state = 1014
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1016
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1017
                self.items_pattern()
                self.state = 1018
                self.match(Python3Parser.COMMA)
                self.state = 1019
                self.double_star_pattern()
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1020
                    self.match(Python3Parser.COMMA)


                self.state = 1023
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1025
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1026
                self.items_pattern()
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1027
                    self.match(Python3Parser.COMMA)


                self.state = 1030
                self.match(Python3Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Items_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Key_value_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Key_value_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_items_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItems_pattern" ):
                listener.enterItems_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItems_pattern" ):
                listener.exitItems_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItems_pattern" ):
                return visitor.visitItems_pattern(self)
            else:
                return visitor.visitChildren(self)




    def items_pattern(self):

        localctx = Python3Parser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.key_value_pattern()
            self.state = 1039
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1035
                    self.match(Python3Parser.COMMA)
                    self.state = 1036
                    self.key_value_pattern() 
                self.state = 1041
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_value_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def literal_expr(self):
            return self.getTypedRuleContext(Python3Parser.Literal_exprContext,0)


        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_key_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value_pattern" ):
                listener.enterKey_value_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value_pattern" ):
                listener.exitKey_value_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_value_pattern" ):
                return visitor.visitKey_value_pattern(self)
            else:
                return visitor.visitChildren(self)




    def key_value_pattern(self):

        localctx = Python3Parser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.FALSE, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.MINUS]:
                self.state = 1042
                self.literal_expr()
                pass
            elif token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.state = 1043
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1046
            self.match(Python3Parser.COLON)
            self.state = 1047
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_star_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_double_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_star_pattern" ):
                listener.enterDouble_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_star_pattern" ):
                listener.exitDouble_star_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_star_pattern" ):
                return visitor.visitDouble_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def double_star_pattern(self):

        localctx = Python3Parser.Double_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(Python3Parser.POWER)
            self.state = 1050
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(Python3Parser.Name_or_attrContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(Python3Parser.Positional_patternsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def keyword_patterns(self):
            return self.getTypedRuleContext(Python3Parser.Keyword_patternsContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_class_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_pattern" ):
                listener.enterClass_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_pattern" ):
                listener.exitClass_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_pattern" ):
                return visitor.visitClass_pattern(self)
            else:
                return visitor.visitChildren(self)




    def class_pattern(self):

        localctx = Python3Parser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_class_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.name_or_attr()
                self.state = 1053
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1054
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.name_or_attr()
                self.state = 1057
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1058
                self.positional_patterns()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1059
                    self.match(Python3Parser.COMMA)


                self.state = 1062
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1064
                self.name_or_attr()
                self.state = 1065
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1066
                self.keyword_patterns()
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1067
                    self.match(Python3Parser.COMMA)


                self.state = 1070
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1072
                self.name_or_attr()
                self.state = 1073
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1074
                self.positional_patterns()
                self.state = 1075
                self.match(Python3Parser.COMMA)
                self.state = 1076
                self.keyword_patterns()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1077
                    self.match(Python3Parser.COMMA)


                self.state = 1080
                self.match(Python3Parser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_patternsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.PatternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_positional_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_patterns" ):
                listener.enterPositional_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_patterns" ):
                listener.exitPositional_patterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositional_patterns" ):
                return visitor.visitPositional_patterns(self)
            else:
                return visitor.visitChildren(self)




    def positional_patterns(self):

        localctx = Python3Parser.Positional_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.pattern()
            self.state = 1089
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1085
                    self.match(Python3Parser.COMMA)
                    self.state = 1086
                    self.pattern() 
                self.state = 1091
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keyword_patternsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Keyword_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_keyword_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_patterns" ):
                listener.enterKeyword_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_patterns" ):
                listener.exitKeyword_patterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_patterns" ):
                return visitor.visitKeyword_patterns(self)
            else:
                return visitor.visitChildren(self)




    def keyword_patterns(self):

        localctx = Python3Parser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.keyword_pattern()
            self.state = 1097
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1093
                    self.match(Python3Parser.COMMA)
                    self.state = 1094
                    self.keyword_pattern() 
                self.state = 1099
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keyword_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_keyword_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_pattern" ):
                listener.enterKeyword_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_pattern" ):
                listener.exitKeyword_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_pattern" ):
                return visitor.visitKeyword_pattern(self)
            else:
                return visitor.visitChildren(self)




    def keyword_pattern(self):

        localctx = Python3Parser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.name()
            self.state = 1101
            self.match(Python3Parser.ASSIGN)
            self.state = 1102
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext,i)


        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(Python3Parser.LambdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 1113
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1104
                self.or_test()
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.IF:
                    self.state = 1105
                    self.match(Python3Parser.IF)
                    self.state = 1106
                    self.or_test()
                    self.state = 1107
                    self.match(Python3Parser.ELSE)
                    self.state = 1108
                    self.test()


                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_nocond" ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_test_nocond)
        try:
            self.state = 1117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1115
                self.or_test()
                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1116
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = Python3Parser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(Python3Parser.LAMBDA)
            self.state = 1121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0) or _la==Python3Parser.WILDCARD:
                self.state = 1120
                self.varargslist()


            self.state = 1123
            self.match(Python3Parser.COLON)
            self.state = 1124
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef_nocond" ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = Python3Parser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self.match(Python3Parser.LAMBDA)
            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0) or _la==Python3Parser.WILDCARD:
                self.state = 1127
                self.varargslist()


            self.state = 1130
            self.match(Python3Parser.COLON)
            self.state = 1131
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_test" ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.and_test()
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR:
                self.state = 1134
                self.match(Python3Parser.OR)
                self.state = 1135
                self.and_test()
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_test" ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = Python3Parser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.not_test()
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.AND:
                self.state = 1142
                self.match(Python3Parser.AND)
                self.state = 1143
                self.not_test()
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(Python3Parser.ComparisonContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_test" ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_not_test)
        try:
            self.state = 1152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1149
                self.match(Python3Parser.NOT)
                self.state = 1150
                self.not_test()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = Python3Parser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.expr(0)
            self.state = 1160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1155
                    self.comp_op()
                    self.state = 1156
                    self.expr(0) 
                self.state = 1162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(Python3Parser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(Python3Parser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(Python3Parser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(Python3Parser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(Python3Parser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(Python3Parser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(Python3Parser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_comp_op)
        try:
            self.state = 1176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1163
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1164
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1165
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1166
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1167
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1168
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1169
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1170
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1171
                self.match(Python3Parser.NOT)
                self.state = 1172
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1173
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1174
                self.match(Python3Parser.IS)
                self.state = 1175
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = Python3Parser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.match(Python3Parser.STAR)
            self.state = 1179
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def atom_expr(self):
            return self.getTypedRuleContext(Python3Parser.Atom_exprContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ADD)
            else:
                return self.getToken(Python3Parser.ADD, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.MINUS)
            else:
                return self.getToken(Python3Parser.MINUS, i)

        def NOT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NOT_OP)
            else:
                return self.getToken(Python3Parser.NOT_OP, i)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def DIV(self):
            return self.getToken(Python3Parser.DIV, 0)

        def MOD(self):
            return self.getToken(Python3Parser.MOD, 0)

        def IDIV(self):
            return self.getToken(Python3Parser.IDIV, 0)

        def LEFT_SHIFT(self):
            return self.getToken(Python3Parser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(Python3Parser.AND_OP, 0)

        def XOR(self):
            return self.getToken(Python3Parser.XOR, 0)

        def OR_OP(self):
            return self.getToken(Python3Parser.OR_OP, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Python3Parser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 192
        self.enterRecursionRule(localctx, 192, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1182
                self.expr_wildcard()
                pass

            elif la_ == 2:
                self.state = 1183
                self.atom_expr()
                pass

            elif la_ == 3:
                self.state = 1185 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1184
                        _la = self._input.LA(1)
                        if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (Python3Parser.ADD - 72)) | (1 << (Python3Parser.MINUS - 72)) | (1 << (Python3Parser.NOT_OP - 72)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1187 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

                self.state = 1189
                self.expr(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1215
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1213
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                    if la_ == 1:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1192
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1193
                        self.match(Python3Parser.POWER)
                        self.state = 1194
                        self.expr(9)
                        pass

                    elif la_ == 2:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1195
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1196
                        _la = self._input.LA(1)
                        if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & ((1 << (Python3Parser.STAR - 57)) | (1 << (Python3Parser.DIV - 57)) | (1 << (Python3Parser.MOD - 57)) | (1 << (Python3Parser.IDIV - 57)) | (1 << (Python3Parser.AT - 57)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1197
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1198
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1199
                        _la = self._input.LA(1)
                        if not(_la==Python3Parser.ADD or _la==Python3Parser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1200
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1201
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1202
                        _la = self._input.LA(1)
                        if not(_la==Python3Parser.LEFT_SHIFT or _la==Python3Parser.RIGHT_SHIFT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1203
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1204
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1205
                        self.match(Python3Parser.AND_OP)
                        self.state = 1206
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1207
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1208
                        self.match(Python3Parser.XOR)
                        self.state = 1209
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1210
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1211
                        self.match(Python3Parser.OR_OP)
                        self.state = 1212
                        self.expr(2)
                        pass

             
                self.state = 1217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Atom_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(Python3Parser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_expr" ):
                return visitor.visitAtom_expr(self)
            else:
                return visitor.visitChildren(self)




    def atom_expr(self):

        localctx = Python3Parser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AWAIT:
                self.state = 1218
                self.match(Python3Parser.AWAIT)


            self.state = 1221
            self.atom()
            self.state = 1225
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1222
                    self.trailer() 
                self.state = 1227
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext,0)


        def atom_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Atom_wildcardContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def ELLIPSIS(self):
            return self.getToken(Python3Parser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 1256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1228
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1231
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 1229
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                    self.state = 1230
                    self.testlist_comp()
                    pass
                elif token in [Python3Parser.CLOSE_PAREN]:
                    pass
                else:
                    pass
                self.state = 1233
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1234
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                    self.state = 1235
                    self.testlist_comp()


                self.state = 1238
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1239
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                    self.state = 1240
                    self.dictorsetmaker()


                self.state = 1243
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1244
                self.atom_wildcard()
                pass
            elif token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1245
                self.name()
                pass
            elif token in [Python3Parser.NUMBER]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1246
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [Python3Parser.STRING]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1248 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1247
                        self.match(Python3Parser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1250 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

                pass
            elif token in [Python3Parser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1252
                self.match(Python3Parser.ELLIPSIS)
                pass
            elif token in [Python3Parser.NONE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1253
                self.match(Python3Parser.NONE)
                pass
            elif token in [Python3Parser.TRUE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1254
                self.match(Python3Parser.TRUE)
                pass
            elif token in [Python3Parser.FALSE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1255
                self.match(Python3Parser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def UNDERSCORE(self):
            return self.getToken(Python3Parser.UNDERSCORE, 0)

        def MATCH(self):
            return self.getToken(Python3Parser.MATCH, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = Python3Parser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.state = 1260
                self.test()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 1261
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                self.state = 1264
                self.comp_for()
                pass
            elif token in [Python3Parser.CLOSE_PAREN, Python3Parser.COMMA, Python3Parser.CLOSE_BRACK]:
                self.state = 1272
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1265
                        self.match(Python3Parser.COMMA)
                        self.state = 1268
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                            self.state = 1266
                            self.test()
                            pass
                        elif token in [Python3Parser.STAR]:
                            self.state = 1267
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1274
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1275
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(Python3Parser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(Python3Parser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def atom_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Atom_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1280
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                    self.state = 1281
                    self.arglist()


                self.state = 1284
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1285
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 1286
                self.subscriptlist()
                self.state = 1287
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1289
                self.match(Python3Parser.DOT)
                self.state = 1292
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                    self.state = 1290
                    self.name()
                    pass
                elif token in [Python3Parser.WILDCARD]:
                    self.state = 1291
                    self.atom_wildcard()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Subscript_Context)
            else:
                return self.getTypedRuleContext(Python3Parser.Subscript_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = Python3Parser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.subscript_()
            self.state = 1301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1297
                    self.match(Python3Parser.COMMA)
                    self.state = 1298
                    self.subscript_() 
                self.state = 1303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1304
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subscript_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(Python3Parser.SliceopContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subscript_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_" ):
                listener.enterSubscript_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_" ):
                listener.exitSubscript_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_" ):
                return visitor.visitSubscript_(self)
            else:
                return visitor.visitChildren(self)




    def subscript_(self):

        localctx = Python3Parser.Subscript_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_subscript_)
        self._la = 0 # Token type
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1307
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                    self.state = 1308
                    self.test()


                self.state = 1311
                self.match(Python3Parser.COLON)
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                    self.state = 1312
                    self.test()


                self.state = 1316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COLON:
                    self.state = 1315
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = Python3Parser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self.match(Python3Parser.COLON)
            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                self.state = 1321
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = Python3Parser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.state = 1324
                self.expr(0)
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 1325
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1335
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1328
                    self.match(Python3Parser.COMMA)
                    self.state = 1331
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                        self.state = 1329
                        self.expr(0)
                        pass
                    elif token in [Python3Parser.STAR]:
                        self.state = 1330
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1337
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1338
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.test()
            self.state = 1346
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1342
                    self.match(Python3Parser.COMMA)
                    self.state = 1343
                    self.test() 
                self.state = 1348
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

            self.state = 1350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1349
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.POWER)
            else:
                return self.getToken(Python3Parser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1358
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                    self.state = 1352
                    self.test()
                    self.state = 1353
                    self.match(Python3Parser.COLON)
                    self.state = 1354
                    self.test()
                    pass
                elif token in [Python3Parser.POWER]:
                    self.state = 1356
                    self.match(Python3Parser.POWER)
                    self.state = 1357
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1378
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                    self.state = 1360
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 1372
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1361
                            self.match(Python3Parser.COMMA)
                            self.state = 1368
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                                self.state = 1362
                                self.test()
                                self.state = 1363
                                self.match(Python3Parser.COLON)
                                self.state = 1364
                                self.test()
                                pass
                            elif token in [Python3Parser.POWER]:
                                self.state = 1366
                                self.match(Python3Parser.POWER)
                                self.state = 1367
                                self.expr(0)
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1374
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                    self.state = 1376
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 1375
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1382
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                    self.state = 1380
                    self.test()
                    pass
                elif token in [Python3Parser.STAR]:
                    self.state = 1381
                    self.star_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1398
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                    self.state = 1384
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 1392
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1385
                            self.match(Python3Parser.COMMA)
                            self.state = 1388
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                                self.state = 1386
                                self.test()
                                pass
                            elif token in [Python3Parser.STAR]:
                                self.state = 1387
                                self.star_expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1394
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

                    self.state = 1396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 1395
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = Python3Parser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(Python3Parser.CLASS)
            self.state = 1406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1403
                self.name()
                pass

            elif la_ == 2:
                self.state = 1404
                self.simple_wildcard()
                pass

            elif la_ == 3:
                self.state = 1405
                self.var_wildcard()
                pass


            self.state = 1413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 1408
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                    self.state = 1409
                    self.arglist()


                self.state = 1412
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 1415
            self.match(Python3Parser.COLON)
            self.state = 1416
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1418
            self.argument()
            self.state = 1423
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1419
                    self.match(Python3Parser.COMMA)
                    self.state = 1420
                    self.argument() 
                self.state = 1425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

            self.state = 1427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1426
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.List_wildcardContext,0)


        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = Python3Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1429
                self.list_wildcard()
                pass

            elif la_ == 2:
                self.state = 1430
                self.expr_wildcard()
                pass

            elif la_ == 3:
                self.state = 1431
                self.test()
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASYNC or _la==Python3Parser.FOR:
                    self.state = 1432
                    self.comp_for()


                pass

            elif la_ == 4:
                self.state = 1435
                self.test()
                self.state = 1436
                self.match(Python3Parser.ASSIGN)
                self.state = 1437
                self.test()
                pass

            elif la_ == 5:
                self.state = 1439
                self.match(Python3Parser.POWER)
                self.state = 1440
                self.test()
                pass

            elif la_ == 6:
                self.state = 1441
                self.match(Python3Parser.STAR)
                self.state = 1442
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(Python3Parser.Comp_ifContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_comp_iter)
        try:
            self.state = 1447
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1445
                self.comp_for()
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASYNC:
                self.state = 1449
                self.match(Python3Parser.ASYNC)


            self.state = 1452
            self.match(Python3Parser.FOR)
            self.state = 1453
            self.exprlist()
            self.state = 1454
            self.match(Python3Parser.IN)
            self.state = 1455
            self.or_test()
            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.ASYNC) | (1 << Python3Parser.FOR) | (1 << Python3Parser.IF))) != 0):
                self.state = 1456
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_if" ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = Python3Parser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.match(Python3Parser.IF)
            self.state = 1460
            self.test_nocond()
            self.state = 1462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.ASYNC) | (1 << Python3Parser.FOR) | (1 << Python3Parser.IF))) != 0):
                self.state = 1461
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Encoding_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_encoding_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncoding_decl" ):
                listener.enterEncoding_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncoding_decl" ):
                listener.exitEncoding_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncoding_decl" ):
                return visitor.visitEncoding_decl(self)
            else:
                return visitor.visitChildren(self)




    def encoding_decl(self):

        localctx = Python3Parser.Encoding_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_encoding_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(Python3Parser.Yield_argContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = Python3Parser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self.match(Python3Parser.YIELD)
            self.state = 1468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0):
                self.state = 1467
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = Python3Parser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_yield_arg)
        try:
            self.state = 1473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1470
                self.match(Python3Parser.FROM)
                self.state = 1471
                self.test()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1472
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_strings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrings" ):
                listener.enterStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrings" ):
                listener.exitStrings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrings" ):
                return visitor.visitStrings(self)
            else:
                return visitor.visitChildren(self)




    def strings(self):

        localctx = Python3Parser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_strings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1475
                self.match(Python3Parser.STRING)
                self.state = 1478 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.STRING):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wildcard_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_wildcard_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_type" ):
                listener.enterWildcard_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_type" ):
                listener.exitWildcard_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_type" ):
                return visitor.visitWildcard_type(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_type(self):

        localctx = Python3Parser.Wildcard_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_wildcard_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.match(Python3Parser.OPEN_BRACK)
            self.state = 1481
            self.name()
            self.state = 1486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 1482
                self.match(Python3Parser.COMMA)
                self.state = 1483
                self.name()
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1489
            self.match(Python3Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wildcard_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NUMBER)
            else:
                return self.getToken(Python3Parser.NUMBER, i)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_wildcard_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_number" ):
                listener.enterWildcard_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_number" ):
                listener.exitWildcard_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_number" ):
                return visitor.visitWildcard_number(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_number(self):

        localctx = Python3Parser.Wildcard_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_wildcard_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self.match(Python3Parser.OPEN_BRACE)
            self.state = 1492
            self.match(Python3Parser.NUMBER)
            self.state = 1496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1493
                self.match(Python3Parser.COMMA)

            elif la_ == 2:
                self.state = 1494
                self.match(Python3Parser.COMMA)
                self.state = 1495
                self.match(Python3Parser.NUMBER)


            self.state = 1498
            self.match(Python3Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stmt_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def double_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Double_wildcardContext,0)


        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def contains_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Contains_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt_wildcard" ):
                listener.enterStmt_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt_wildcard" ):
                listener.exitStmt_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt_wildcard" ):
                return visitor.visitStmt_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def stmt_wildcard(self):

        localctx = Python3Parser.Stmt_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_stmt_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1500
                self.double_wildcard()
                pass

            elif la_ == 2:
                self.state = 1501
                self.simple_wildcard()
                pass

            elif la_ == 3:
                self.state = 1502
                self.var_wildcard()
                pass

            elif la_ == 4:
                self.state = 1503
                self.contains_wildcard()
                pass


            self.state = 1506
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def contains_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Contains_wildcardContext,0)


        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_expr_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_wildcard" ):
                listener.enterExpr_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_wildcard" ):
                listener.exitExpr_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_wildcard" ):
                return visitor.visitExpr_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def expr_wildcard(self):

        localctx = Python3Parser.Expr_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_expr_wildcard)
        try:
            self.state = 1511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1508
                self.var_wildcard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1509
                self.contains_wildcard()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1510
                self.simple_wildcard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Atom_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_atom_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_wildcard" ):
                listener.enterAtom_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_wildcard" ):
                listener.exitAtom_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_wildcard" ):
                return visitor.visitAtom_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def atom_wildcard(self):

        localctx = Python3Parser.Atom_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_atom_wildcard)
        try:
            self.state = 1515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1513
                self.simple_wildcard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1514
                self.var_wildcard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def wildcard_number(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_numberContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_wildcard" ):
                listener.enterSimple_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_wildcard" ):
                listener.exitSimple_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_wildcard" ):
                return visitor.visitSimple_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def simple_wildcard(self):

        localctx = Python3Parser.Simple_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_simple_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(Python3Parser.WILDCARD)
            self.state = 1519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1518
                self.wildcard_type()


            self.state = 1522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1521
                self.wildcard_number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_double_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_wildcard" ):
                listener.enterDouble_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_wildcard" ):
                listener.exitDouble_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_wildcard" ):
                return visitor.visitDouble_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def double_wildcard(self):

        localctx = Python3Parser.Double_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_double_wildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.match(Python3Parser.WILDCARD)
            self.state = 1526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_BRACK:
                self.state = 1525
                self.wildcard_type()


            self.state = 1528
            self.match(Python3Parser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Var_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_var_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_wildcard" ):
                listener.enterVar_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_wildcard" ):
                listener.exitVar_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_wildcard" ):
                return visitor.visitVar_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def var_wildcard(self):

        localctx = Python3Parser.Var_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_var_wildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.match(Python3Parser.WILDCARD)
            self.state = 1532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_BRACK:
                self.state = 1531
                self.wildcard_type()


            self.state = 1534
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Contains_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def LESS_THAN(self):
            return self.getToken(Python3Parser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(Python3Parser.GREATER_THAN, 0)

        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext,0)


        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_contains_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContains_wildcard" ):
                listener.enterContains_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContains_wildcard" ):
                listener.exitContains_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContains_wildcard" ):
                return visitor.visitContains_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def contains_wildcard(self):

        localctx = Python3Parser.Contains_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_contains_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.match(Python3Parser.WILDCARD)
            self.state = 1537
            self.match(Python3Parser.LESS_THAN)
            self.state = 1540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1538
                self.expr_wildcard()
                pass

            elif la_ == 2:
                self.state = 1539
                self.expr_stmt()
                pass


            self.state = 1542
            self.match(Python3Parser.GREATER_THAN)
            self.state = 1544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.state = 1543
                self.wildcard_type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_compound_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_compound_wildcardContext,0)


        def multiple_compound_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Multiple_compound_wildcardContext,0)


        def strict_mode(self):
            return self.getTypedRuleContext(Python3Parser.Strict_modeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_wildcard" ):
                listener.enterCompound_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_wildcard" ):
                listener.exitCompound_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_wildcard" ):
                return visitor.visitCompound_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def compound_wildcard(self):

        localctx = Python3Parser.Compound_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_compound_wildcard)
        try:
            self.state = 1549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1546
                self.simple_compound_wildcard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1547
                self.multiple_compound_wildcard()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1548
                self.strict_mode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_compound_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def wildcard_number(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_numberContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_compound_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_compound_wildcard" ):
                listener.enterSimple_compound_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_compound_wildcard" ):
                listener.exitSimple_compound_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_compound_wildcard" ):
                return visitor.visitSimple_compound_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def simple_compound_wildcard(self):

        localctx = Python3Parser.Simple_compound_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_simple_compound_wildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(Python3Parser.WILDCARD)
            self.state = 1553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_BRACK:
                self.state = 1552
                self.wildcard_type()


            self.state = 1555
            self.match(Python3Parser.COLON)
            self.state = 1557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1556
                self.wildcard_number()


            self.state = 1559
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiple_compound_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_multiple_compound_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiple_compound_wildcard" ):
                listener.enterMultiple_compound_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiple_compound_wildcard" ):
                listener.exitMultiple_compound_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiple_compound_wildcard" ):
                return visitor.visitMultiple_compound_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def multiple_compound_wildcard(self):

        localctx = Python3Parser.Multiple_compound_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_multiple_compound_wildcard)
        self._la = 0 # Token type
        try:
            self.state = 1575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1561
                self.match(Python3Parser.WILDCARD)
                self.state = 1563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.OPEN_BRACK:
                    self.state = 1562
                    self.wildcard_type()


                self.state = 1565
                self.match(Python3Parser.COLON)
                self.state = 1566
                self.match(Python3Parser.STAR)
                self.state = 1567
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1568
                self.match(Python3Parser.WILDCARD)
                self.state = 1570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.OPEN_BRACK:
                    self.state = 1569
                    self.wildcard_type()


                self.state = 1572
                self.match(Python3Parser.STAR)
                self.state = 1573
                self.match(Python3Parser.COLON)
                self.state = 1574
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Strict_modeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def STRICT(self):
            return self.getToken(Python3Parser.STRICT, 0)

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_strict_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrict_mode" ):
                listener.enterStrict_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrict_mode" ):
                listener.exitStrict_mode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrict_mode" ):
                return visitor.visitStrict_mode(self)
            else:
                return visitor.visitChildren(self)




    def strict_mode(self):

        localctx = Python3Parser.Strict_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_strict_mode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self.match(Python3Parser.WILDCARD)
            self.state = 1578
            self.match(Python3Parser.STRICT)
            self.state = 1579
            self.match(Python3Parser.OPEN_BRACK)
            self.state = 1587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.ASSERT, Python3Parser.AWAIT, Python3Parser.BREAK, Python3Parser.CONTINUE, Python3Parser.DEL, Python3Parser.FALSE, Python3Parser.FROM, Python3Parser.GLOBAL, Python3Parser.IMPORT, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NONLOCAL, Python3Parser.NOT, Python3Parser.PASS, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.YIELD, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.state = 1580
                self.simple_stmts()
                pass
            elif token in [Python3Parser.NEWLINE]:
                self.state = 1581
                self.match(Python3Parser.NEWLINE)
                self.state = 1583 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1582
                    self.stmt()
                    self.state = 1585 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.DEF) | (1 << Python3Parser.DEL) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.FROM) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.IF) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.NOT) | (1 << Python3Parser.PASS) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.TRY) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.WITH) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.ADD - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.AT - 65)) | (1 << (Python3Parser.WILDCARD - 65)))) != 0)):
                        break

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1589
            self.match(Python3Parser.CLOSE_BRACK)
            self.state = 1590
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_list_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_wildcard" ):
                listener.enterList_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_wildcard" ):
                listener.exitList_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_wildcard" ):
                return visitor.visitList_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def list_wildcard(self):

        localctx = Python3Parser.List_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_list_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            self.match(Python3Parser.WILDCARD)
            self.state = 1593
            self.match(Python3Parser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[59] = self.literal_pattern_sempred
        self._predicates[60] = self.literal_expr_sempred
        self._predicates[67] = self.pattern_capture_target_sempred
        self._predicates[69] = self.value_pattern_sempred
        self._predicates[96] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def literal_pattern_sempred(self, localctx:Literal_patternContext, predIndex:int):
            if predIndex == 0:
                return  self.CannotBePlusMinus() 
         

    def literal_expr_sempred(self, localctx:Literal_exprContext, predIndex:int):
            if predIndex == 1:
                return  self.CannotBePlusMinus() 
         

    def pattern_capture_target_sempred(self, localctx:Pattern_capture_targetContext, predIndex:int):
            if predIndex == 2:
                return  self.CannotBeDotLpEq() 
         

    def value_pattern_sempred(self, localctx:Value_patternContext, predIndex:int):
            if predIndex == 3:
                return  self.CannotBeDotLpEq() 
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         




