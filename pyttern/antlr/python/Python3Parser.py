# Generated from Python3Parser.g4 by ANTLR 4.13.2
# encoding: utf-8
import sys

from antlr4 import *

if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .Python3ParserBase import Python3ParserBase
else:
    from Python3ParserBase import Python3ParserBase

def serializedATN():
    return [
        4,1,105,1596,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,1,0,1,0,1,0,1,0,1,0,3,0,270,8,0,1,1,1,1,5,1,274,8,1,10,1,12,
        1,277,9,1,1,1,1,1,1,2,1,2,5,2,283,8,2,10,2,12,2,286,9,2,1,2,1,2,
        1,3,1,3,1,3,1,3,3,3,294,8,3,1,3,3,3,297,8,3,1,3,1,3,1,4,4,4,302,
        8,4,11,4,12,4,303,1,5,1,5,1,5,1,5,3,5,310,8,5,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,3,7,319,8,7,1,7,1,7,1,7,3,7,324,8,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,8,3,8,333,8,8,1,8,1,8,1,8,1,8,3,8,339,8,8,5,8,341,8,8,10,
        8,12,8,344,9,8,1,8,1,8,1,8,3,8,349,8,8,1,8,1,8,1,8,1,8,3,8,355,8,
        8,5,8,357,8,8,10,8,12,8,360,9,8,1,8,1,8,1,8,1,8,3,8,366,8,8,3,8,
        368,8,8,3,8,370,8,8,1,8,1,8,1,8,3,8,375,8,8,3,8,377,8,8,3,8,379,
        8,8,1,8,1,8,3,8,383,8,8,1,8,1,8,1,8,1,8,3,8,389,8,8,5,8,391,8,8,
        10,8,12,8,394,9,8,1,8,1,8,1,8,1,8,3,8,400,8,8,3,8,402,8,8,3,8,404,
        8,8,1,8,1,8,1,8,3,8,409,8,8,3,8,411,8,8,1,8,1,8,1,9,1,9,1,9,3,9,
        418,8,9,1,9,1,9,3,9,422,8,9,1,10,1,10,1,10,3,10,427,8,10,1,10,1,
        10,1,10,1,10,3,10,433,8,10,5,10,435,8,10,10,10,12,10,438,9,10,1,
        10,1,10,1,10,3,10,443,8,10,1,10,1,10,1,10,1,10,3,10,449,8,10,5,10,
        451,8,10,10,10,12,10,454,9,10,1,10,1,10,1,10,1,10,3,10,460,8,10,
        3,10,462,8,10,3,10,464,8,10,1,10,1,10,1,10,3,10,469,8,10,3,10,471,
        8,10,3,10,473,8,10,1,10,1,10,3,10,477,8,10,1,10,1,10,1,10,1,10,3,
        10,483,8,10,5,10,485,8,10,10,10,12,10,488,9,10,1,10,1,10,1,10,1,
        10,3,10,494,8,10,3,10,496,8,10,3,10,498,8,10,1,10,1,10,1,10,3,10,
        503,8,10,3,10,505,8,10,1,11,1,11,3,11,509,8,11,1,12,1,12,1,12,3,
        12,514,8,12,1,13,1,13,1,13,5,13,519,8,13,10,13,12,13,522,9,13,1,
        13,3,13,525,8,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,3,14,537,8,14,1,15,1,15,1,15,1,15,1,15,3,15,544,8,15,1,15,1,15,
        1,15,3,15,549,8,15,5,15,551,8,15,10,15,12,15,554,9,15,3,15,556,8,
        15,1,16,1,16,1,16,1,16,3,16,562,8,16,1,17,1,17,3,17,566,8,17,1,17,
        1,17,1,17,3,17,571,8,17,5,17,573,8,17,10,17,12,17,576,9,17,1,17,
        3,17,579,8,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,
        1,21,1,21,3,21,593,8,21,1,22,1,22,1,23,1,23,1,24,1,24,3,24,601,8,
        24,1,25,1,25,1,26,1,26,1,26,1,26,3,26,609,8,26,3,26,611,8,26,1,27,
        1,27,3,27,615,8,27,1,28,1,28,1,28,1,29,1,29,5,29,622,8,29,10,29,
        12,29,625,9,29,1,29,1,29,4,29,629,8,29,11,29,12,29,630,3,29,633,
        8,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,642,8,29,1,30,1,30,
        1,30,3,30,647,8,30,1,31,1,31,1,31,3,31,652,8,31,1,32,1,32,1,32,5,
        32,657,8,32,10,32,12,32,660,9,32,1,32,3,32,663,8,32,1,33,1,33,1,
        33,5,33,668,8,33,10,33,12,33,671,9,33,1,34,1,34,1,34,5,34,676,8,
        34,10,34,12,34,679,9,34,1,35,1,35,1,35,1,35,5,35,685,8,35,10,35,
        12,35,688,9,35,1,36,1,36,1,36,1,36,5,36,694,8,36,10,36,12,36,697,
        9,36,1,37,1,37,1,37,1,37,3,37,703,8,37,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,3,38,716,8,38,1,39,1,39,1,39,1,39,
        3,39,722,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,
        733,8,40,10,40,12,40,736,9,40,1,40,1,40,1,40,3,40,741,8,40,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,3,41,750,8,41,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,3,42,761,8,42,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,4,43,770,8,43,11,43,12,43,771,1,43,1,43,1,43,3,43,777,
        8,43,1,43,1,43,1,43,3,43,782,8,43,1,43,1,43,1,43,3,43,787,8,43,1,
        44,1,44,1,44,1,44,5,44,793,8,44,10,44,12,44,796,9,44,1,44,1,44,1,
        44,1,45,1,45,1,45,3,45,804,8,45,1,46,1,46,1,46,1,46,3,46,810,8,46,
        3,46,812,8,46,1,47,1,47,1,47,1,47,4,47,818,8,47,11,47,12,47,819,
        1,47,1,47,3,47,824,8,47,1,48,1,48,1,48,1,48,1,48,1,48,4,48,832,8,
        48,11,48,12,48,833,1,48,1,48,1,49,1,49,1,49,3,49,841,8,49,1,49,3,
        49,844,8,49,1,50,1,50,4,50,848,8,50,11,50,12,50,849,1,50,3,50,853,
        8,50,1,51,1,51,1,51,3,51,858,8,51,1,52,1,52,1,52,3,52,863,8,52,1,
        52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,3,54,873,8,54,1,55,1,55,3,
        55,877,8,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,5,57,886,8,57,10,
        57,12,57,889,9,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,899,
        8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,909,8,59,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,919,8,60,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,3,61,929,8,61,1,62,1,62,1,62,3,62,934,8,
        62,1,63,1,63,1,63,3,63,939,8,63,1,64,1,64,1,65,1,65,1,66,1,66,1,
        67,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,4,70,958,8,
        70,11,70,12,70,959,1,71,1,71,3,71,964,8,71,1,72,1,72,1,72,1,72,1,
        73,1,73,3,73,972,8,73,1,73,1,73,1,73,3,73,977,8,73,1,73,3,73,980,
        8,73,1,74,1,74,1,74,3,74,985,8,74,1,75,1,75,1,75,5,75,990,8,75,10,
        75,12,75,993,9,75,1,75,3,75,996,8,75,1,76,1,76,3,76,1000,8,76,1,
        77,1,77,1,77,1,77,3,77,1006,8,77,1,78,1,78,1,78,1,78,1,78,3,78,1013,
        8,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1022,8,78,1,78,1,78,
        1,78,1,78,1,78,3,78,1029,8,78,1,78,1,78,3,78,1033,8,78,1,79,1,79,
        1,79,5,79,1038,8,79,10,79,12,79,1041,9,79,1,80,1,80,3,80,1045,8,
        80,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,3,82,1061,8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1069,8,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1079,8,82,1,82,1,
        82,3,82,1083,8,82,1,83,1,83,1,83,5,83,1088,8,83,10,83,12,83,1091,
        9,83,1,84,1,84,1,84,5,84,1096,8,84,10,84,12,84,1099,9,84,1,85,1,
        85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1111,8,86,1,86,3,
        86,1114,8,86,1,87,1,87,3,87,1118,8,87,1,88,1,88,3,88,1122,8,88,1,
        88,1,88,1,88,1,89,1,89,3,89,1129,8,89,1,89,1,89,1,89,1,90,1,90,1,
        90,5,90,1137,8,90,10,90,12,90,1140,9,90,1,91,1,91,1,91,5,91,1145,
        8,91,10,91,12,91,1148,9,91,1,92,1,92,1,92,3,92,1153,8,92,1,93,1,
        93,1,93,1,93,5,93,1159,8,93,10,93,12,93,1162,9,93,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1177,8,94,
        1,95,1,95,1,95,1,96,1,96,1,96,1,96,4,96,1186,8,96,11,96,12,96,1187,
        1,96,3,96,1191,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,
        1214,8,96,10,96,12,96,1217,9,96,1,97,3,97,1220,8,97,1,97,1,97,5,
        97,1224,8,97,10,97,12,97,1227,9,97,1,98,1,98,1,98,3,98,1232,8,98,
        1,98,1,98,1,98,3,98,1237,8,98,1,98,1,98,1,98,3,98,1242,8,98,1,98,
        1,98,1,98,1,98,1,98,4,98,1249,8,98,11,98,12,98,1250,1,98,1,98,1,
        98,1,98,3,98,1257,8,98,1,99,1,99,1,100,1,100,3,100,1263,8,100,1,
        100,1,100,1,100,1,100,3,100,1269,8,100,5,100,1271,8,100,10,100,12,
        100,1274,9,100,1,100,3,100,1277,8,100,3,100,1279,8,100,1,101,1,101,
        3,101,1283,8,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        3,101,1293,8,101,3,101,1295,8,101,1,102,1,102,1,102,5,102,1300,8,
        102,10,102,12,102,1303,9,102,1,102,3,102,1306,8,102,1,103,1,103,
        3,103,1310,8,103,1,103,1,103,3,103,1314,8,103,1,103,3,103,1317,8,
        103,3,103,1319,8,103,1,104,1,104,3,104,1323,8,104,1,105,1,105,3,
        105,1327,8,105,1,105,1,105,1,105,3,105,1332,8,105,5,105,1334,8,105,
        10,105,12,105,1337,9,105,1,105,3,105,1340,8,105,1,106,1,106,1,106,
        5,106,1345,8,106,10,106,12,106,1348,9,106,1,106,3,106,1351,8,106,
        1,107,1,107,1,107,1,107,1,107,1,107,3,107,1359,8,107,1,107,1,107,
        1,107,1,107,1,107,1,107,1,107,1,107,3,107,1369,8,107,5,107,1371,
        8,107,10,107,12,107,1374,9,107,1,107,3,107,1377,8,107,3,107,1379,
        8,107,1,107,1,107,3,107,1383,8,107,1,107,1,107,1,107,1,107,3,107,
        1389,8,107,5,107,1391,8,107,10,107,12,107,1394,9,107,1,107,3,107,
        1397,8,107,3,107,1399,8,107,3,107,1401,8,107,1,108,1,108,1,108,1,
        108,3,108,1407,8,108,1,108,1,108,3,108,1411,8,108,1,108,3,108,1414,
        8,108,1,108,1,108,1,108,1,109,1,109,1,109,5,109,1422,8,109,10,109,
        12,109,1425,9,109,1,109,3,109,1428,8,109,1,110,1,110,1,110,1,110,
        3,110,1434,8,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,
        3,110,1444,8,110,1,111,1,111,3,111,1448,8,111,1,112,3,112,1451,8,
        112,1,112,1,112,1,112,1,112,1,112,3,112,1458,8,112,1,113,1,113,1,
        113,3,113,1463,8,113,1,114,1,114,1,115,1,115,3,115,1469,8,115,1,
        116,1,116,1,116,3,116,1474,8,116,1,117,4,117,1477,8,117,11,117,12,
        117,1478,1,118,1,118,1,118,1,118,5,118,1485,8,118,10,118,12,118,
        1488,9,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,3,119,1497,
        8,119,1,119,1,119,1,120,1,120,1,120,1,120,3,120,1505,8,120,1,120,
        1,120,1,121,1,121,1,121,3,121,1512,8,121,1,122,1,122,3,122,1516,
        8,122,1,123,1,123,3,123,1520,8,123,1,123,3,123,1523,8,123,1,124,
        1,124,3,124,1527,8,124,1,124,1,124,1,125,1,125,3,125,1533,8,125,
        1,125,1,125,1,126,1,126,1,126,1,126,3,126,1541,8,126,1,126,1,126,
        3,126,1545,8,126,1,127,1,127,1,127,3,127,1550,8,127,1,128,1,128,
        3,128,1554,8,128,1,128,1,128,3,128,1558,8,128,1,128,1,128,1,129,
        1,129,3,129,1564,8,129,1,129,1,129,1,129,1,129,1,129,3,129,1571,
        8,129,1,129,1,129,1,129,3,129,1576,8,129,1,130,1,130,1,130,1,130,
        1,130,1,130,4,130,1584,8,130,11,130,12,130,1585,3,130,1588,8,130,
        1,130,1,130,1,130,1,131,1,131,1,131,1,131,0,1,192,132,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,0,7,1,0,89,101,1,0,55,56,2,0,72,73,77,77,3,0,57,57,74,76,
        87,87,1,0,72,73,1,0,70,71,3,0,30,30,40,40,46,46,1772,0,269,1,0,0,
        0,2,275,1,0,0,0,4,280,1,0,0,0,6,289,1,0,0,0,8,301,1,0,0,0,10,305,
        1,0,0,0,12,311,1,0,0,0,14,314,1,0,0,0,16,328,1,0,0,0,18,421,1,0,
        0,0,20,504,1,0,0,0,22,508,1,0,0,0,24,513,1,0,0,0,26,515,1,0,0,0,
        28,536,1,0,0,0,30,538,1,0,0,0,32,557,1,0,0,0,34,565,1,0,0,0,36,580,
        1,0,0,0,38,582,1,0,0,0,40,585,1,0,0,0,42,592,1,0,0,0,44,594,1,0,
        0,0,46,596,1,0,0,0,48,598,1,0,0,0,50,602,1,0,0,0,52,604,1,0,0,0,
        54,614,1,0,0,0,56,616,1,0,0,0,58,619,1,0,0,0,60,643,1,0,0,0,62,648,
        1,0,0,0,64,653,1,0,0,0,66,664,1,0,0,0,68,672,1,0,0,0,70,680,1,0,
        0,0,72,689,1,0,0,0,74,698,1,0,0,0,76,715,1,0,0,0,78,717,1,0,0,0,
        80,723,1,0,0,0,82,742,1,0,0,0,84,751,1,0,0,0,86,762,1,0,0,0,88,788,
        1,0,0,0,90,800,1,0,0,0,92,805,1,0,0,0,94,823,1,0,0,0,96,825,1,0,
        0,0,98,843,1,0,0,0,100,845,1,0,0,0,102,857,1,0,0,0,104,859,1,0,0,
        0,106,867,1,0,0,0,108,872,1,0,0,0,110,876,1,0,0,0,112,878,1,0,0,
        0,114,882,1,0,0,0,116,898,1,0,0,0,118,908,1,0,0,0,120,918,1,0,0,
        0,122,928,1,0,0,0,124,933,1,0,0,0,126,938,1,0,0,0,128,940,1,0,0,
        0,130,942,1,0,0,0,132,944,1,0,0,0,134,946,1,0,0,0,136,949,1,0,0,
        0,138,951,1,0,0,0,140,954,1,0,0,0,142,963,1,0,0,0,144,965,1,0,0,
        0,146,979,1,0,0,0,148,981,1,0,0,0,150,986,1,0,0,0,152,999,1,0,0,
        0,154,1005,1,0,0,0,156,1032,1,0,0,0,158,1034,1,0,0,0,160,1044,1,
        0,0,0,162,1049,1,0,0,0,164,1082,1,0,0,0,166,1084,1,0,0,0,168,1092,
        1,0,0,0,170,1100,1,0,0,0,172,1113,1,0,0,0,174,1117,1,0,0,0,176,1119,
        1,0,0,0,178,1126,1,0,0,0,180,1133,1,0,0,0,182,1141,1,0,0,0,184,1152,
        1,0,0,0,186,1154,1,0,0,0,188,1176,1,0,0,0,190,1178,1,0,0,0,192,1190,
        1,0,0,0,194,1219,1,0,0,0,196,1256,1,0,0,0,198,1258,1,0,0,0,200,1262,
        1,0,0,0,202,1294,1,0,0,0,204,1296,1,0,0,0,206,1318,1,0,0,0,208,1320,
        1,0,0,0,210,1326,1,0,0,0,212,1341,1,0,0,0,214,1400,1,0,0,0,216,1402,
        1,0,0,0,218,1418,1,0,0,0,220,1443,1,0,0,0,222,1447,1,0,0,0,224,1450,
        1,0,0,0,226,1459,1,0,0,0,228,1464,1,0,0,0,230,1466,1,0,0,0,232,1473,
        1,0,0,0,234,1476,1,0,0,0,236,1480,1,0,0,0,238,1491,1,0,0,0,240,1504,
        1,0,0,0,242,1511,1,0,0,0,244,1515,1,0,0,0,246,1517,1,0,0,0,248,1524,
        1,0,0,0,250,1530,1,0,0,0,252,1536,1,0,0,0,254,1549,1,0,0,0,256,1551,
        1,0,0,0,258,1575,1,0,0,0,260,1577,1,0,0,0,262,1592,1,0,0,0,264,270,
        5,45,0,0,265,270,3,26,13,0,266,267,3,76,38,0,267,268,5,45,0,0,268,
        270,1,0,0,0,269,264,1,0,0,0,269,265,1,0,0,0,269,266,1,0,0,0,270,
        1,1,0,0,0,271,274,5,45,0,0,272,274,3,24,12,0,273,271,1,0,0,0,273,
        272,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,
        278,1,0,0,0,277,275,1,0,0,0,278,279,5,0,0,1,279,3,1,0,0,0,280,284,
        3,212,106,0,281,283,5,45,0,0,282,281,1,0,0,0,283,286,1,0,0,0,284,
        282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,
        288,5,0,0,1,288,5,1,0,0,0,289,290,5,87,0,0,290,296,3,68,34,0,291,
        293,5,58,0,0,292,294,3,218,109,0,293,292,1,0,0,0,293,294,1,0,0,0,
        294,295,1,0,0,0,295,297,5,59,0,0,296,291,1,0,0,0,296,297,1,0,0,0,
        297,298,1,0,0,0,298,299,5,45,0,0,299,7,1,0,0,0,300,302,3,6,3,0,301,
        300,1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,
        9,1,0,0,0,305,309,3,8,4,0,306,310,3,216,108,0,307,310,3,14,7,0,308,
        310,3,12,6,0,309,306,1,0,0,0,309,307,1,0,0,0,309,308,1,0,0,0,310,
        11,1,0,0,0,311,312,5,9,0,0,312,313,3,14,7,0,313,13,1,0,0,0,314,318,
        5,15,0,0,315,319,3,198,99,0,316,319,3,246,123,0,317,319,3,250,125,
        0,318,315,1,0,0,0,318,316,1,0,0,0,318,317,1,0,0,0,319,320,1,0,0,
        0,320,323,3,16,8,0,321,322,5,88,0,0,322,324,3,172,86,0,323,321,1,
        0,0,0,323,324,1,0,0,0,324,325,1,0,0,0,325,326,5,61,0,0,326,327,3,
        94,47,0,327,15,1,0,0,0,328,410,5,58,0,0,329,332,3,18,9,0,330,331,
        5,64,0,0,331,333,3,172,86,0,332,330,1,0,0,0,332,333,1,0,0,0,333,
        342,1,0,0,0,334,335,5,60,0,0,335,338,3,18,9,0,336,337,5,64,0,0,337,
        339,3,172,86,0,338,336,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,
        334,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,
        378,1,0,0,0,344,342,1,0,0,0,345,376,5,60,0,0,346,348,5,57,0,0,347,
        349,3,18,9,0,348,347,1,0,0,0,348,349,1,0,0,0,349,358,1,0,0,0,350,
        351,5,60,0,0,351,354,3,18,9,0,352,353,5,64,0,0,353,355,3,172,86,
        0,354,352,1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,350,1,0,0,
        0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,369,1,0,0,
        0,360,358,1,0,0,0,361,367,5,60,0,0,362,363,5,63,0,0,363,365,3,18,
        9,0,364,366,5,60,0,0,365,364,1,0,0,0,365,366,1,0,0,0,366,368,1,0,
        0,0,367,362,1,0,0,0,367,368,1,0,0,0,368,370,1,0,0,0,369,361,1,0,
        0,0,369,370,1,0,0,0,370,377,1,0,0,0,371,372,5,63,0,0,372,374,3,18,
        9,0,373,375,5,60,0,0,374,373,1,0,0,0,374,375,1,0,0,0,375,377,1,0,
        0,0,376,346,1,0,0,0,376,371,1,0,0,0,376,377,1,0,0,0,377,379,1,0,
        0,0,378,345,1,0,0,0,378,379,1,0,0,0,379,411,1,0,0,0,380,382,5,57,
        0,0,381,383,3,18,9,0,382,381,1,0,0,0,382,383,1,0,0,0,383,392,1,0,
        0,0,384,385,5,60,0,0,385,388,3,18,9,0,386,387,5,64,0,0,387,389,3,
        172,86,0,388,386,1,0,0,0,388,389,1,0,0,0,389,391,1,0,0,0,390,384,
        1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,403,
        1,0,0,0,394,392,1,0,0,0,395,401,5,60,0,0,396,397,5,63,0,0,397,399,
        3,18,9,0,398,400,5,60,0,0,399,398,1,0,0,0,399,400,1,0,0,0,400,402,
        1,0,0,0,401,396,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,395,
        1,0,0,0,403,404,1,0,0,0,404,411,1,0,0,0,405,406,5,63,0,0,406,408,
        3,18,9,0,407,409,5,60,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,411,
        1,0,0,0,410,329,1,0,0,0,410,380,1,0,0,0,410,405,1,0,0,0,410,411,
        1,0,0,0,411,412,1,0,0,0,412,413,5,59,0,0,413,17,1,0,0,0,414,417,
        3,198,99,0,415,416,5,61,0,0,416,418,3,172,86,0,417,415,1,0,0,0,417,
        418,1,0,0,0,418,422,1,0,0,0,419,422,3,242,121,0,420,422,3,262,131,
        0,421,414,1,0,0,0,421,419,1,0,0,0,421,420,1,0,0,0,422,19,1,0,0,0,
        423,426,3,22,11,0,424,425,5,64,0,0,425,427,3,172,86,0,426,424,1,
        0,0,0,426,427,1,0,0,0,427,436,1,0,0,0,428,429,5,60,0,0,429,432,3,
        22,11,0,430,431,5,64,0,0,431,433,3,172,86,0,432,430,1,0,0,0,432,
        433,1,0,0,0,433,435,1,0,0,0,434,428,1,0,0,0,435,438,1,0,0,0,436,
        434,1,0,0,0,436,437,1,0,0,0,437,472,1,0,0,0,438,436,1,0,0,0,439,
        470,5,60,0,0,440,442,5,57,0,0,441,443,3,22,11,0,442,441,1,0,0,0,
        442,443,1,0,0,0,443,452,1,0,0,0,444,445,5,60,0,0,445,448,3,22,11,
        0,446,447,5,64,0,0,447,449,3,172,86,0,448,446,1,0,0,0,448,449,1,
        0,0,0,449,451,1,0,0,0,450,444,1,0,0,0,451,454,1,0,0,0,452,450,1,
        0,0,0,452,453,1,0,0,0,453,463,1,0,0,0,454,452,1,0,0,0,455,461,5,
        60,0,0,456,457,5,63,0,0,457,459,3,22,11,0,458,460,5,60,0,0,459,458,
        1,0,0,0,459,460,1,0,0,0,460,462,1,0,0,0,461,456,1,0,0,0,461,462,
        1,0,0,0,462,464,1,0,0,0,463,455,1,0,0,0,463,464,1,0,0,0,464,471,
        1,0,0,0,465,466,5,63,0,0,466,468,3,22,11,0,467,469,5,60,0,0,468,
        467,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,470,440,1,0,0,0,470,
        465,1,0,0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,439,1,0,0,0,472,
        473,1,0,0,0,473,505,1,0,0,0,474,476,5,57,0,0,475,477,3,22,11,0,476,
        475,1,0,0,0,476,477,1,0,0,0,477,486,1,0,0,0,478,479,5,60,0,0,479,
        482,3,22,11,0,480,481,5,64,0,0,481,483,3,172,86,0,482,480,1,0,0,
        0,482,483,1,0,0,0,483,485,1,0,0,0,484,478,1,0,0,0,485,488,1,0,0,
        0,486,484,1,0,0,0,486,487,1,0,0,0,487,497,1,0,0,0,488,486,1,0,0,
        0,489,495,5,60,0,0,490,491,5,63,0,0,491,493,3,22,11,0,492,494,5,
        60,0,0,493,492,1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,490,1,
        0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,497,489,1,0,0,0,497,498,1,
        0,0,0,498,505,1,0,0,0,499,500,5,63,0,0,500,502,3,22,11,0,501,503,
        5,60,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,505,1,0,0,0,504,423,
        1,0,0,0,504,474,1,0,0,0,504,499,1,0,0,0,505,21,1,0,0,0,506,509,3,
        198,99,0,507,509,3,242,121,0,508,506,1,0,0,0,508,507,1,0,0,0,509,
        23,1,0,0,0,510,514,3,240,120,0,511,514,3,26,13,0,512,514,3,76,38,
        0,513,510,1,0,0,0,513,511,1,0,0,0,513,512,1,0,0,0,514,25,1,0,0,0,
        515,520,3,28,14,0,516,517,5,62,0,0,517,519,3,28,14,0,518,516,1,0,
        0,0,519,522,1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,524,1,0,
        0,0,522,520,1,0,0,0,523,525,5,62,0,0,524,523,1,0,0,0,524,525,1,0,
        0,0,525,526,1,0,0,0,526,527,5,45,0,0,527,27,1,0,0,0,528,537,3,30,
        15,0,529,537,3,38,19,0,530,537,3,40,20,0,531,537,3,42,21,0,532,537,
        3,54,27,0,533,537,3,70,35,0,534,537,3,72,36,0,535,537,3,74,37,0,
        536,528,1,0,0,0,536,529,1,0,0,0,536,530,1,0,0,0,536,531,1,0,0,0,
        536,532,1,0,0,0,536,533,1,0,0,0,536,534,1,0,0,0,536,535,1,0,0,0,
        537,29,1,0,0,0,538,555,3,34,17,0,539,556,3,32,16,0,540,543,3,36,
        18,0,541,544,3,230,115,0,542,544,3,212,106,0,543,541,1,0,0,0,543,
        542,1,0,0,0,544,556,1,0,0,0,545,548,5,64,0,0,546,549,3,230,115,0,
        547,549,3,34,17,0,548,546,1,0,0,0,548,547,1,0,0,0,549,551,1,0,0,
        0,550,545,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,
        0,553,556,1,0,0,0,554,552,1,0,0,0,555,539,1,0,0,0,555,540,1,0,0,
        0,555,552,1,0,0,0,556,31,1,0,0,0,557,558,5,61,0,0,558,561,3,172,
        86,0,559,560,5,64,0,0,560,562,3,172,86,0,561,559,1,0,0,0,561,562,
        1,0,0,0,562,33,1,0,0,0,563,566,3,172,86,0,564,566,3,190,95,0,565,
        563,1,0,0,0,565,564,1,0,0,0,566,574,1,0,0,0,567,570,5,60,0,0,568,
        571,3,172,86,0,569,571,3,190,95,0,570,568,1,0,0,0,570,569,1,0,0,
        0,571,573,1,0,0,0,572,567,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,
        0,574,575,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,577,579,5,60,0,
        0,578,577,1,0,0,0,578,579,1,0,0,0,579,35,1,0,0,0,580,581,7,0,0,0,
        581,37,1,0,0,0,582,583,5,16,0,0,583,584,3,210,105,0,584,39,1,0,0,
        0,585,586,5,35,0,0,586,41,1,0,0,0,587,593,3,44,22,0,588,593,3,46,
        23,0,589,593,3,48,24,0,590,593,3,52,26,0,591,593,3,50,25,0,592,587,
        1,0,0,0,592,588,1,0,0,0,592,589,1,0,0,0,592,590,1,0,0,0,592,591,
        1,0,0,0,593,43,1,0,0,0,594,595,5,11,0,0,595,45,1,0,0,0,596,597,5,
        14,0,0,597,47,1,0,0,0,598,600,5,37,0,0,599,601,3,212,106,0,600,599,
        1,0,0,0,600,601,1,0,0,0,601,49,1,0,0,0,602,603,3,230,115,0,603,51,
        1,0,0,0,604,610,5,36,0,0,605,608,3,172,86,0,606,607,5,23,0,0,607,
        609,3,172,86,0,608,606,1,0,0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,
        605,1,0,0,0,610,611,1,0,0,0,611,53,1,0,0,0,612,615,3,56,28,0,613,
        615,3,58,29,0,614,612,1,0,0,0,614,613,1,0,0,0,615,55,1,0,0,0,616,
        617,5,26,0,0,617,618,3,66,33,0,618,57,1,0,0,0,619,632,5,23,0,0,620,
        622,7,1,0,0,621,620,1,0,0,0,622,625,1,0,0,0,623,621,1,0,0,0,623,
        624,1,0,0,0,624,626,1,0,0,0,625,623,1,0,0,0,626,633,3,68,34,0,627,
        629,7,1,0,0,628,627,1,0,0,0,629,630,1,0,0,0,630,628,1,0,0,0,630,
        631,1,0,0,0,631,633,1,0,0,0,632,623,1,0,0,0,632,628,1,0,0,0,633,
        634,1,0,0,0,634,641,5,26,0,0,635,642,5,57,0,0,636,637,5,58,0,0,637,
        638,3,64,32,0,638,639,5,59,0,0,639,642,1,0,0,0,640,642,3,64,32,0,
        641,635,1,0,0,0,641,636,1,0,0,0,641,640,1,0,0,0,642,59,1,0,0,0,643,
        646,3,198,99,0,644,645,5,7,0,0,645,647,3,198,99,0,646,644,1,0,0,
        0,646,647,1,0,0,0,647,61,1,0,0,0,648,651,3,68,34,0,649,650,5,7,0,
        0,650,652,3,198,99,0,651,649,1,0,0,0,651,652,1,0,0,0,652,63,1,0,
        0,0,653,658,3,60,30,0,654,655,5,60,0,0,655,657,3,60,30,0,656,654,
        1,0,0,0,657,660,1,0,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,662,
        1,0,0,0,660,658,1,0,0,0,661,663,5,60,0,0,662,661,1,0,0,0,662,663,
        1,0,0,0,663,65,1,0,0,0,664,669,3,62,31,0,665,666,5,60,0,0,666,668,
        3,62,31,0,667,665,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,
        1,0,0,0,670,67,1,0,0,0,671,669,1,0,0,0,672,677,3,198,99,0,673,674,
        5,55,0,0,674,676,3,198,99,0,675,673,1,0,0,0,676,679,1,0,0,0,677,
        675,1,0,0,0,677,678,1,0,0,0,678,69,1,0,0,0,679,677,1,0,0,0,680,681,
        5,24,0,0,681,686,3,198,99,0,682,683,5,60,0,0,683,685,3,198,99,0,
        684,682,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,686,687,1,0,0,0,
        687,71,1,0,0,0,688,686,1,0,0,0,689,690,5,32,0,0,690,695,3,198,99,
        0,691,692,5,60,0,0,692,694,3,198,99,0,693,691,1,0,0,0,694,697,1,
        0,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,73,1,0,0,0,697,695,1,0,
        0,0,698,699,5,8,0,0,699,702,3,172,86,0,700,701,5,60,0,0,701,703,
        3,172,86,0,702,700,1,0,0,0,702,703,1,0,0,0,703,75,1,0,0,0,704,716,
        3,254,127,0,705,716,3,80,40,0,706,716,3,82,41,0,707,716,3,84,42,
        0,708,716,3,86,43,0,709,716,3,88,44,0,710,716,3,14,7,0,711,716,3,
        216,108,0,712,716,3,10,5,0,713,716,3,78,39,0,714,716,3,96,48,0,715,
        704,1,0,0,0,715,705,1,0,0,0,715,706,1,0,0,0,715,707,1,0,0,0,715,
        708,1,0,0,0,715,709,1,0,0,0,715,710,1,0,0,0,715,711,1,0,0,0,715,
        712,1,0,0,0,715,713,1,0,0,0,715,714,1,0,0,0,716,77,1,0,0,0,717,721,
        5,9,0,0,718,722,3,14,7,0,719,722,3,88,44,0,720,722,3,84,42,0,721,
        718,1,0,0,0,721,719,1,0,0,0,721,720,1,0,0,0,722,79,1,0,0,0,723,724,
        5,25,0,0,724,725,3,172,86,0,725,726,5,61,0,0,726,734,3,94,47,0,727,
        728,5,17,0,0,728,729,3,172,86,0,729,730,5,61,0,0,730,731,3,94,47,
        0,731,733,1,0,0,0,732,727,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,
        0,734,735,1,0,0,0,735,740,1,0,0,0,736,734,1,0,0,0,737,738,5,18,0,
        0,738,739,5,61,0,0,739,741,3,94,47,0,740,737,1,0,0,0,740,741,1,0,
        0,0,741,81,1,0,0,0,742,743,5,41,0,0,743,744,3,172,86,0,744,745,5,
        61,0,0,745,749,3,94,47,0,746,747,5,18,0,0,747,748,5,61,0,0,748,750,
        3,94,47,0,749,746,1,0,0,0,749,750,1,0,0,0,750,83,1,0,0,0,751,752,
        5,22,0,0,752,753,3,210,105,0,753,754,5,27,0,0,754,755,3,212,106,
        0,755,756,5,61,0,0,756,760,3,94,47,0,757,758,5,18,0,0,758,759,5,
        61,0,0,759,761,3,94,47,0,760,757,1,0,0,0,760,761,1,0,0,0,761,85,
        1,0,0,0,762,763,5,39,0,0,763,764,5,61,0,0,764,786,3,94,47,0,765,
        766,3,92,46,0,766,767,5,61,0,0,767,768,3,94,47,0,768,770,1,0,0,0,
        769,765,1,0,0,0,770,771,1,0,0,0,771,769,1,0,0,0,771,772,1,0,0,0,
        772,776,1,0,0,0,773,774,5,18,0,0,774,775,5,61,0,0,775,777,3,94,47,
        0,776,773,1,0,0,0,776,777,1,0,0,0,777,781,1,0,0,0,778,779,5,21,0,
        0,779,780,5,61,0,0,780,782,3,94,47,0,781,778,1,0,0,0,781,782,1,0,
        0,0,782,787,1,0,0,0,783,784,5,21,0,0,784,785,5,61,0,0,785,787,3,
        94,47,0,786,769,1,0,0,0,786,783,1,0,0,0,787,87,1,0,0,0,788,789,5,
        42,0,0,789,794,3,90,45,0,790,791,5,60,0,0,791,793,3,90,45,0,792,
        790,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,794,795,1,0,0,0,795,
        797,1,0,0,0,796,794,1,0,0,0,797,798,5,61,0,0,798,799,3,94,47,0,799,
        89,1,0,0,0,800,803,3,172,86,0,801,802,5,7,0,0,802,804,3,192,96,0,
        803,801,1,0,0,0,803,804,1,0,0,0,804,91,1,0,0,0,805,811,5,19,0,0,
        806,809,3,172,86,0,807,808,5,7,0,0,808,810,3,198,99,0,809,807,1,
        0,0,0,809,810,1,0,0,0,810,812,1,0,0,0,811,806,1,0,0,0,811,812,1,
        0,0,0,812,93,1,0,0,0,813,824,3,26,13,0,814,815,5,45,0,0,815,817,
        5,1,0,0,816,818,3,24,12,0,817,816,1,0,0,0,818,819,1,0,0,0,819,817,
        1,0,0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,822,5,2,0,0,822,824,
        1,0,0,0,823,813,1,0,0,0,823,814,1,0,0,0,824,95,1,0,0,0,825,826,5,
        30,0,0,826,827,3,98,49,0,827,828,5,61,0,0,828,829,5,45,0,0,829,831,
        5,1,0,0,830,832,3,104,52,0,831,830,1,0,0,0,832,833,1,0,0,0,833,831,
        1,0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,836,5,2,0,0,836,97,1,
        0,0,0,837,838,3,102,51,0,838,840,5,60,0,0,839,841,3,100,50,0,840,
        839,1,0,0,0,840,841,1,0,0,0,841,844,1,0,0,0,842,844,3,172,86,0,843,
        837,1,0,0,0,843,842,1,0,0,0,844,99,1,0,0,0,845,847,5,60,0,0,846,
        848,3,102,51,0,847,846,1,0,0,0,848,849,1,0,0,0,849,847,1,0,0,0,849,
        850,1,0,0,0,850,852,1,0,0,0,851,853,5,60,0,0,852,851,1,0,0,0,852,
        853,1,0,0,0,853,101,1,0,0,0,854,855,5,57,0,0,855,858,3,192,96,0,
        856,858,3,172,86,0,857,854,1,0,0,0,857,856,1,0,0,0,858,103,1,0,0,
        0,859,860,5,12,0,0,860,862,3,108,54,0,861,863,3,106,53,0,862,861,
        1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,865,5,61,0,0,865,866,
        3,94,47,0,866,105,1,0,0,0,867,868,5,25,0,0,868,869,3,172,86,0,869,
        107,1,0,0,0,870,873,3,148,74,0,871,873,3,110,55,0,872,870,1,0,0,
        0,872,871,1,0,0,0,873,109,1,0,0,0,874,877,3,112,56,0,875,877,3,114,
        57,0,876,874,1,0,0,0,876,875,1,0,0,0,877,111,1,0,0,0,878,879,3,114,
        57,0,879,880,5,7,0,0,880,881,3,134,67,0,881,113,1,0,0,0,882,887,
        3,116,58,0,883,884,5,67,0,0,884,886,3,116,58,0,885,883,1,0,0,0,886,
        889,1,0,0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,115,1,0,0,0,889,
        887,1,0,0,0,890,899,3,136,68,0,891,899,3,118,59,0,892,899,3,132,
        66,0,893,899,3,138,69,0,894,899,3,144,72,0,895,899,3,146,73,0,896,
        899,3,156,78,0,897,899,3,164,82,0,898,890,1,0,0,0,898,891,1,0,0,
        0,898,892,1,0,0,0,898,893,1,0,0,0,898,894,1,0,0,0,898,895,1,0,0,
        0,898,896,1,0,0,0,898,897,1,0,0,0,899,117,1,0,0,0,900,901,3,124,
        62,0,901,902,4,59,0,0,902,909,1,0,0,0,903,909,3,122,61,0,904,909,
        3,234,117,0,905,909,5,31,0,0,906,909,5,38,0,0,907,909,5,20,0,0,908,
        900,1,0,0,0,908,903,1,0,0,0,908,904,1,0,0,0,908,905,1,0,0,0,908,
        906,1,0,0,0,908,907,1,0,0,0,909,119,1,0,0,0,910,911,3,124,62,0,911,
        912,4,60,1,0,912,919,1,0,0,0,913,919,3,122,61,0,914,919,3,234,117,
        0,915,919,5,31,0,0,916,919,5,38,0,0,917,919,5,20,0,0,918,910,1,0,
        0,0,918,913,1,0,0,0,918,914,1,0,0,0,918,915,1,0,0,0,918,916,1,0,
        0,0,918,917,1,0,0,0,919,121,1,0,0,0,920,921,3,126,63,0,921,922,5,
        72,0,0,922,923,3,130,65,0,923,929,1,0,0,0,924,925,3,126,63,0,925,
        926,5,73,0,0,926,927,3,130,65,0,927,929,1,0,0,0,928,920,1,0,0,0,
        928,924,1,0,0,0,929,123,1,0,0,0,930,934,5,4,0,0,931,932,5,73,0,0,
        932,934,5,4,0,0,933,930,1,0,0,0,933,931,1,0,0,0,934,125,1,0,0,0,
        935,939,3,128,64,0,936,937,5,73,0,0,937,939,3,128,64,0,938,935,1,
        0,0,0,938,936,1,0,0,0,939,127,1,0,0,0,940,941,5,4,0,0,941,129,1,
        0,0,0,942,943,5,4,0,0,943,131,1,0,0,0,944,945,3,134,67,0,945,133,
        1,0,0,0,946,947,3,198,99,0,947,948,4,67,2,0,948,135,1,0,0,0,949,
        950,5,40,0,0,950,137,1,0,0,0,951,952,3,140,70,0,952,953,4,69,3,0,
        953,139,1,0,0,0,954,957,3,198,99,0,955,956,5,55,0,0,956,958,3,198,
        99,0,957,955,1,0,0,0,958,959,1,0,0,0,959,957,1,0,0,0,959,960,1,0,
        0,0,960,141,1,0,0,0,961,964,3,140,70,0,962,964,3,198,99,0,963,961,
        1,0,0,0,963,962,1,0,0,0,964,143,1,0,0,0,965,966,5,58,0,0,966,967,
        3,110,55,0,967,968,5,59,0,0,968,145,1,0,0,0,969,971,5,65,0,0,970,
        972,3,150,75,0,971,970,1,0,0,0,971,972,1,0,0,0,972,973,1,0,0,0,973,
        980,5,66,0,0,974,976,5,58,0,0,975,977,3,148,74,0,976,975,1,0,0,0,
        976,977,1,0,0,0,977,978,1,0,0,0,978,980,5,59,0,0,979,969,1,0,0,0,
        979,974,1,0,0,0,980,147,1,0,0,0,981,982,3,152,76,0,982,984,5,60,
        0,0,983,985,3,150,75,0,984,983,1,0,0,0,984,985,1,0,0,0,985,149,1,
        0,0,0,986,991,3,152,76,0,987,988,5,60,0,0,988,990,3,152,76,0,989,
        987,1,0,0,0,990,993,1,0,0,0,991,989,1,0,0,0,991,992,1,0,0,0,992,
        995,1,0,0,0,993,991,1,0,0,0,994,996,5,60,0,0,995,994,1,0,0,0,995,
        996,1,0,0,0,996,151,1,0,0,0,997,1000,3,154,77,0,998,1000,3,110,55,
        0,999,997,1,0,0,0,999,998,1,0,0,0,1000,153,1,0,0,0,1001,1002,5,57,
        0,0,1002,1006,3,134,67,0,1003,1004,5,57,0,0,1004,1006,3,136,68,0,
        1005,1001,1,0,0,0,1005,1003,1,0,0,0,1006,155,1,0,0,0,1007,1008,5,
        78,0,0,1008,1033,5,79,0,0,1009,1010,5,78,0,0,1010,1012,3,162,81,
        0,1011,1013,5,60,0,0,1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,1014,
        1,0,0,0,1014,1015,5,79,0,0,1015,1033,1,0,0,0,1016,1017,5,78,0,0,
        1017,1018,3,158,79,0,1018,1019,5,60,0,0,1019,1021,3,162,81,0,1020,
        1022,5,60,0,0,1021,1020,1,0,0,0,1021,1022,1,0,0,0,1022,1023,1,0,
        0,0,1023,1024,5,79,0,0,1024,1033,1,0,0,0,1025,1026,5,78,0,0,1026,
        1028,3,158,79,0,1027,1029,5,60,0,0,1028,1027,1,0,0,0,1028,1029,1,
        0,0,0,1029,1030,1,0,0,0,1030,1031,5,79,0,0,1031,1033,1,0,0,0,1032,
        1007,1,0,0,0,1032,1009,1,0,0,0,1032,1016,1,0,0,0,1032,1025,1,0,0,
        0,1033,157,1,0,0,0,1034,1039,3,160,80,0,1035,1036,5,60,0,0,1036,
        1038,3,160,80,0,1037,1035,1,0,0,0,1038,1041,1,0,0,0,1039,1037,1,
        0,0,0,1039,1040,1,0,0,0,1040,159,1,0,0,0,1041,1039,1,0,0,0,1042,
        1045,3,120,60,0,1043,1045,3,140,70,0,1044,1042,1,0,0,0,1044,1043,
        1,0,0,0,1045,1046,1,0,0,0,1046,1047,5,61,0,0,1047,1048,3,110,55,
        0,1048,161,1,0,0,0,1049,1050,5,63,0,0,1050,1051,3,134,67,0,1051,
        163,1,0,0,0,1052,1053,3,142,71,0,1053,1054,5,58,0,0,1054,1055,5,
        59,0,0,1055,1083,1,0,0,0,1056,1057,3,142,71,0,1057,1058,5,58,0,0,
        1058,1060,3,166,83,0,1059,1061,5,60,0,0,1060,1059,1,0,0,0,1060,1061,
        1,0,0,0,1061,1062,1,0,0,0,1062,1063,5,59,0,0,1063,1083,1,0,0,0,1064,
        1065,3,142,71,0,1065,1066,5,58,0,0,1066,1068,3,168,84,0,1067,1069,
        5,60,0,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,1070,1,0,0,0,1070,
        1071,5,59,0,0,1071,1083,1,0,0,0,1072,1073,3,142,71,0,1073,1074,5,
        58,0,0,1074,1075,3,166,83,0,1075,1076,5,60,0,0,1076,1078,3,168,84,
        0,1077,1079,5,60,0,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,1079,1080,
        1,0,0,0,1080,1081,5,59,0,0,1081,1083,1,0,0,0,1082,1052,1,0,0,0,1082,
        1056,1,0,0,0,1082,1064,1,0,0,0,1082,1072,1,0,0,0,1083,165,1,0,0,
        0,1084,1089,3,110,55,0,1085,1086,5,60,0,0,1086,1088,3,110,55,0,1087,
        1085,1,0,0,0,1088,1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,
        0,1090,167,1,0,0,0,1091,1089,1,0,0,0,1092,1097,3,170,85,0,1093,1094,
        5,60,0,0,1094,1096,3,170,85,0,1095,1093,1,0,0,0,1096,1099,1,0,0,
        0,1097,1095,1,0,0,0,1097,1098,1,0,0,0,1098,169,1,0,0,0,1099,1097,
        1,0,0,0,1100,1101,3,198,99,0,1101,1102,5,64,0,0,1102,1103,3,110,
        55,0,1103,171,1,0,0,0,1104,1110,3,180,90,0,1105,1106,5,25,0,0,1106,
        1107,3,180,90,0,1107,1108,5,18,0,0,1108,1109,3,172,86,0,1109,1111,
        1,0,0,0,1110,1105,1,0,0,0,1110,1111,1,0,0,0,1111,1114,1,0,0,0,1112,
        1114,3,176,88,0,1113,1104,1,0,0,0,1113,1112,1,0,0,0,1114,173,1,0,
        0,0,1115,1118,3,180,90,0,1116,1118,3,178,89,0,1117,1115,1,0,0,0,
        1117,1116,1,0,0,0,1118,175,1,0,0,0,1119,1121,5,29,0,0,1120,1122,
        3,20,10,0,1121,1120,1,0,0,0,1121,1122,1,0,0,0,1122,1123,1,0,0,0,
        1123,1124,5,61,0,0,1124,1125,3,172,86,0,1125,177,1,0,0,0,1126,1128,
        5,29,0,0,1127,1129,3,20,10,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,
        1129,1130,1,0,0,0,1130,1131,5,61,0,0,1131,1132,3,174,87,0,1132,179,
        1,0,0,0,1133,1138,3,182,91,0,1134,1135,5,34,0,0,1135,1137,3,182,
        91,0,1136,1134,1,0,0,0,1137,1140,1,0,0,0,1138,1136,1,0,0,0,1138,
        1139,1,0,0,0,1139,181,1,0,0,0,1140,1138,1,0,0,0,1141,1146,3,184,
        92,0,1142,1143,5,6,0,0,1143,1145,3,184,92,0,1144,1142,1,0,0,0,1145,
        1148,1,0,0,0,1146,1144,1,0,0,0,1146,1147,1,0,0,0,1147,183,1,0,0,
        0,1148,1146,1,0,0,0,1149,1150,5,33,0,0,1150,1153,3,184,92,0,1151,
        1153,3,186,93,0,1152,1149,1,0,0,0,1152,1151,1,0,0,0,1153,185,1,0,
        0,0,1154,1160,3,192,96,0,1155,1156,3,188,94,0,1156,1157,3,192,96,
        0,1157,1159,1,0,0,0,1158,1155,1,0,0,0,1159,1162,1,0,0,0,1160,1158,
        1,0,0,0,1160,1161,1,0,0,0,1161,187,1,0,0,0,1162,1160,1,0,0,0,1163,
        1177,5,80,0,0,1164,1177,5,81,0,0,1165,1177,5,82,0,0,1166,1177,5,
        83,0,0,1167,1177,5,84,0,0,1168,1177,5,85,0,0,1169,1177,5,86,0,0,
        1170,1177,5,27,0,0,1171,1172,5,33,0,0,1172,1177,5,27,0,0,1173,1177,
        5,28,0,0,1174,1175,5,28,0,0,1175,1177,5,33,0,0,1176,1163,1,0,0,0,
        1176,1164,1,0,0,0,1176,1165,1,0,0,0,1176,1166,1,0,0,0,1176,1167,
        1,0,0,0,1176,1168,1,0,0,0,1176,1169,1,0,0,0,1176,1170,1,0,0,0,1176,
        1171,1,0,0,0,1176,1173,1,0,0,0,1176,1174,1,0,0,0,1177,189,1,0,0,
        0,1178,1179,5,57,0,0,1179,1180,3,192,96,0,1180,191,1,0,0,0,1181,
        1182,6,96,-1,0,1182,1191,3,242,121,0,1183,1191,3,194,97,0,1184,1186,
        7,2,0,0,1185,1184,1,0,0,0,1186,1187,1,0,0,0,1187,1185,1,0,0,0,1187,
        1188,1,0,0,0,1188,1189,1,0,0,0,1189,1191,3,192,96,7,1190,1181,1,
        0,0,0,1190,1183,1,0,0,0,1190,1185,1,0,0,0,1191,1215,1,0,0,0,1192,
        1193,10,8,0,0,1193,1194,5,63,0,0,1194,1214,3,192,96,9,1195,1196,
        10,6,0,0,1196,1197,7,3,0,0,1197,1214,3,192,96,7,1198,1199,10,5,0,
        0,1199,1200,7,4,0,0,1200,1214,3,192,96,6,1201,1202,10,4,0,0,1202,
        1203,7,5,0,0,1203,1214,3,192,96,5,1204,1205,10,3,0,0,1205,1206,5,
        69,0,0,1206,1214,3,192,96,4,1207,1208,10,2,0,0,1208,1209,5,68,0,
        0,1209,1214,3,192,96,3,1210,1211,10,1,0,0,1211,1212,5,67,0,0,1212,
        1214,3,192,96,2,1213,1192,1,0,0,0,1213,1195,1,0,0,0,1213,1198,1,
        0,0,0,1213,1201,1,0,0,0,1213,1204,1,0,0,0,1213,1207,1,0,0,0,1213,
        1210,1,0,0,0,1214,1217,1,0,0,0,1215,1213,1,0,0,0,1215,1216,1,0,0,
        0,1216,193,1,0,0,0,1217,1215,1,0,0,0,1218,1220,5,10,0,0,1219,1218,
        1,0,0,0,1219,1220,1,0,0,0,1220,1221,1,0,0,0,1221,1225,3,196,98,0,
        1222,1224,3,202,101,0,1223,1222,1,0,0,0,1224,1227,1,0,0,0,1225,1223,
        1,0,0,0,1225,1226,1,0,0,0,1226,195,1,0,0,0,1227,1225,1,0,0,0,1228,
        1231,5,58,0,0,1229,1232,3,230,115,0,1230,1232,3,200,100,0,1231,1229,
        1,0,0,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,1232,1233,1,0,0,0,1233,
        1257,5,59,0,0,1234,1236,5,65,0,0,1235,1237,3,200,100,0,1236,1235,
        1,0,0,0,1236,1237,1,0,0,0,1237,1238,1,0,0,0,1238,1257,5,66,0,0,1239,
        1241,5,78,0,0,1240,1242,3,214,107,0,1241,1240,1,0,0,0,1241,1242,
        1,0,0,0,1242,1243,1,0,0,0,1243,1257,5,79,0,0,1244,1257,3,244,122,
        0,1245,1257,3,198,99,0,1246,1257,5,4,0,0,1247,1249,5,3,0,0,1248,
        1247,1,0,0,0,1249,1250,1,0,0,0,1250,1248,1,0,0,0,1250,1251,1,0,0,
        0,1251,1257,1,0,0,0,1252,1257,5,56,0,0,1253,1257,5,31,0,0,1254,1257,
        5,38,0,0,1255,1257,5,20,0,0,1256,1228,1,0,0,0,1256,1234,1,0,0,0,
        1256,1239,1,0,0,0,1256,1244,1,0,0,0,1256,1245,1,0,0,0,1256,1246,
        1,0,0,0,1256,1248,1,0,0,0,1256,1252,1,0,0,0,1256,1253,1,0,0,0,1256,
        1254,1,0,0,0,1256,1255,1,0,0,0,1257,197,1,0,0,0,1258,1259,7,6,0,
        0,1259,199,1,0,0,0,1260,1263,3,172,86,0,1261,1263,3,190,95,0,1262,
        1260,1,0,0,0,1262,1261,1,0,0,0,1263,1278,1,0,0,0,1264,1279,3,224,
        112,0,1265,1268,5,60,0,0,1266,1269,3,172,86,0,1267,1269,3,190,95,
        0,1268,1266,1,0,0,0,1268,1267,1,0,0,0,1269,1271,1,0,0,0,1270,1265,
        1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1272,1273,1,0,0,0,1273,
        1276,1,0,0,0,1274,1272,1,0,0,0,1275,1277,5,60,0,0,1276,1275,1,0,
        0,0,1276,1277,1,0,0,0,1277,1279,1,0,0,0,1278,1264,1,0,0,0,1278,1272,
        1,0,0,0,1279,201,1,0,0,0,1280,1282,5,58,0,0,1281,1283,3,218,109,
        0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,0,1284,1295,
        5,59,0,0,1285,1286,5,65,0,0,1286,1287,3,204,102,0,1287,1288,5,66,
        0,0,1288,1295,1,0,0,0,1289,1292,5,55,0,0,1290,1293,3,198,99,0,1291,
        1293,3,244,122,0,1292,1290,1,0,0,0,1292,1291,1,0,0,0,1293,1295,1,
        0,0,0,1294,1280,1,0,0,0,1294,1285,1,0,0,0,1294,1289,1,0,0,0,1295,
        203,1,0,0,0,1296,1301,3,206,103,0,1297,1298,5,60,0,0,1298,1300,3,
        206,103,0,1299,1297,1,0,0,0,1300,1303,1,0,0,0,1301,1299,1,0,0,0,
        1301,1302,1,0,0,0,1302,1305,1,0,0,0,1303,1301,1,0,0,0,1304,1306,
        5,60,0,0,1305,1304,1,0,0,0,1305,1306,1,0,0,0,1306,205,1,0,0,0,1307,
        1319,3,172,86,0,1308,1310,3,172,86,0,1309,1308,1,0,0,0,1309,1310,
        1,0,0,0,1310,1311,1,0,0,0,1311,1313,5,61,0,0,1312,1314,3,172,86,
        0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,1316,1,0,0,0,1315,1317,
        3,208,104,0,1316,1315,1,0,0,0,1316,1317,1,0,0,0,1317,1319,1,0,0,
        0,1318,1307,1,0,0,0,1318,1309,1,0,0,0,1319,207,1,0,0,0,1320,1322,
        5,61,0,0,1321,1323,3,172,86,0,1322,1321,1,0,0,0,1322,1323,1,0,0,
        0,1323,209,1,0,0,0,1324,1327,3,192,96,0,1325,1327,3,190,95,0,1326,
        1324,1,0,0,0,1326,1325,1,0,0,0,1327,1335,1,0,0,0,1328,1331,5,60,
        0,0,1329,1332,3,192,96,0,1330,1332,3,190,95,0,1331,1329,1,0,0,0,
        1331,1330,1,0,0,0,1332,1334,1,0,0,0,1333,1328,1,0,0,0,1334,1337,
        1,0,0,0,1335,1333,1,0,0,0,1335,1336,1,0,0,0,1336,1339,1,0,0,0,1337,
        1335,1,0,0,0,1338,1340,5,60,0,0,1339,1338,1,0,0,0,1339,1340,1,0,
        0,0,1340,211,1,0,0,0,1341,1346,3,172,86,0,1342,1343,5,60,0,0,1343,
        1345,3,172,86,0,1344,1342,1,0,0,0,1345,1348,1,0,0,0,1346,1344,1,
        0,0,0,1346,1347,1,0,0,0,1347,1350,1,0,0,0,1348,1346,1,0,0,0,1349,
        1351,5,60,0,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,213,1,0,0,
        0,1352,1353,3,172,86,0,1353,1354,5,61,0,0,1354,1355,3,172,86,0,1355,
        1359,1,0,0,0,1356,1357,5,63,0,0,1357,1359,3,192,96,0,1358,1352,1,
        0,0,0,1358,1356,1,0,0,0,1359,1378,1,0,0,0,1360,1379,3,224,112,0,
        1361,1368,5,60,0,0,1362,1363,3,172,86,0,1363,1364,5,61,0,0,1364,
        1365,3,172,86,0,1365,1369,1,0,0,0,1366,1367,5,63,0,0,1367,1369,3,
        192,96,0,1368,1362,1,0,0,0,1368,1366,1,0,0,0,1369,1371,1,0,0,0,1370,
        1361,1,0,0,0,1371,1374,1,0,0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,
        0,1373,1376,1,0,0,0,1374,1372,1,0,0,0,1375,1377,5,60,0,0,1376,1375,
        1,0,0,0,1376,1377,1,0,0,0,1377,1379,1,0,0,0,1378,1360,1,0,0,0,1378,
        1372,1,0,0,0,1379,1401,1,0,0,0,1380,1383,3,172,86,0,1381,1383,3,
        190,95,0,1382,1380,1,0,0,0,1382,1381,1,0,0,0,1383,1398,1,0,0,0,1384,
        1399,3,224,112,0,1385,1388,5,60,0,0,1386,1389,3,172,86,0,1387,1389,
        3,190,95,0,1388,1386,1,0,0,0,1388,1387,1,0,0,0,1389,1391,1,0,0,0,
        1390,1385,1,0,0,0,1391,1394,1,0,0,0,1392,1390,1,0,0,0,1392,1393,
        1,0,0,0,1393,1396,1,0,0,0,1394,1392,1,0,0,0,1395,1397,5,60,0,0,1396,
        1395,1,0,0,0,1396,1397,1,0,0,0,1397,1399,1,0,0,0,1398,1384,1,0,0,
        0,1398,1392,1,0,0,0,1399,1401,1,0,0,0,1400,1358,1,0,0,0,1400,1382,
        1,0,0,0,1401,215,1,0,0,0,1402,1406,5,13,0,0,1403,1407,3,198,99,0,
        1404,1407,3,246,123,0,1405,1407,3,250,125,0,1406,1403,1,0,0,0,1406,
        1404,1,0,0,0,1406,1405,1,0,0,0,1407,1413,1,0,0,0,1408,1410,5,58,
        0,0,1409,1411,3,218,109,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,
        1412,1,0,0,0,1412,1414,5,59,0,0,1413,1408,1,0,0,0,1413,1414,1,0,
        0,0,1414,1415,1,0,0,0,1415,1416,5,61,0,0,1416,1417,3,94,47,0,1417,
        217,1,0,0,0,1418,1423,3,220,110,0,1419,1420,5,60,0,0,1420,1422,3,
        220,110,0,1421,1419,1,0,0,0,1422,1425,1,0,0,0,1423,1421,1,0,0,0,
        1423,1424,1,0,0,0,1424,1427,1,0,0,0,1425,1423,1,0,0,0,1426,1428,
        5,60,0,0,1427,1426,1,0,0,0,1427,1428,1,0,0,0,1428,219,1,0,0,0,1429,
        1444,3,262,131,0,1430,1444,3,242,121,0,1431,1433,3,172,86,0,1432,
        1434,3,224,112,0,1433,1432,1,0,0,0,1433,1434,1,0,0,0,1434,1444,1,
        0,0,0,1435,1436,3,172,86,0,1436,1437,5,64,0,0,1437,1438,3,172,86,
        0,1438,1444,1,0,0,0,1439,1440,5,63,0,0,1440,1444,3,172,86,0,1441,
        1442,5,57,0,0,1442,1444,3,172,86,0,1443,1429,1,0,0,0,1443,1430,1,
        0,0,0,1443,1431,1,0,0,0,1443,1435,1,0,0,0,1443,1439,1,0,0,0,1443,
        1441,1,0,0,0,1444,221,1,0,0,0,1445,1448,3,224,112,0,1446,1448,3,
        226,113,0,1447,1445,1,0,0,0,1447,1446,1,0,0,0,1448,223,1,0,0,0,1449,
        1451,5,9,0,0,1450,1449,1,0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,
        0,1452,1453,5,22,0,0,1453,1454,3,210,105,0,1454,1455,5,27,0,0,1455,
        1457,3,180,90,0,1456,1458,3,222,111,0,1457,1456,1,0,0,0,1457,1458,
        1,0,0,0,1458,225,1,0,0,0,1459,1460,5,25,0,0,1460,1462,3,174,87,0,
        1461,1463,3,222,111,0,1462,1461,1,0,0,0,1462,1463,1,0,0,0,1463,227,
        1,0,0,0,1464,1465,3,198,99,0,1465,229,1,0,0,0,1466,1468,5,43,0,0,
        1467,1469,3,232,116,0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,231,
        1,0,0,0,1470,1471,5,23,0,0,1471,1474,3,172,86,0,1472,1474,3,212,
        106,0,1473,1470,1,0,0,0,1473,1472,1,0,0,0,1474,233,1,0,0,0,1475,
        1477,5,3,0,0,1476,1475,1,0,0,0,1477,1478,1,0,0,0,1478,1476,1,0,0,
        0,1478,1479,1,0,0,0,1479,235,1,0,0,0,1480,1481,5,65,0,0,1481,1486,
        3,198,99,0,1482,1483,5,60,0,0,1483,1485,3,198,99,0,1484,1482,1,0,
        0,0,1485,1488,1,0,0,0,1486,1484,1,0,0,0,1486,1487,1,0,0,0,1487,1489,
        1,0,0,0,1488,1486,1,0,0,0,1489,1490,5,66,0,0,1490,237,1,0,0,0,1491,
        1492,5,78,0,0,1492,1496,5,4,0,0,1493,1497,5,60,0,0,1494,1495,5,60,
        0,0,1495,1497,5,4,0,0,1496,1493,1,0,0,0,1496,1494,1,0,0,0,1496,1497,
        1,0,0,0,1497,1498,1,0,0,0,1498,1499,5,79,0,0,1499,239,1,0,0,0,1500,
        1505,3,248,124,0,1501,1505,3,246,123,0,1502,1505,3,250,125,0,1503,
        1505,3,252,126,0,1504,1500,1,0,0,0,1504,1501,1,0,0,0,1504,1502,1,
        0,0,0,1504,1503,1,0,0,0,1505,1506,1,0,0,0,1506,1507,5,45,0,0,1507,
        241,1,0,0,0,1508,1512,3,250,125,0,1509,1512,3,252,126,0,1510,1512,
        3,246,123,0,1511,1508,1,0,0,0,1511,1509,1,0,0,0,1511,1510,1,0,0,
        0,1512,243,1,0,0,0,1513,1516,3,246,123,0,1514,1516,3,250,125,0,1515,
        1513,1,0,0,0,1515,1514,1,0,0,0,1516,245,1,0,0,0,1517,1519,5,102,
        0,0,1518,1520,3,236,118,0,1519,1518,1,0,0,0,1519,1520,1,0,0,0,1520,
        1522,1,0,0,0,1521,1523,3,238,119,0,1522,1521,1,0,0,0,1522,1523,1,
        0,0,0,1523,247,1,0,0,0,1524,1526,5,102,0,0,1525,1527,3,236,118,0,
        1526,1525,1,0,0,0,1526,1527,1,0,0,0,1527,1528,1,0,0,0,1528,1529,
        5,57,0,0,1529,249,1,0,0,0,1530,1532,5,102,0,0,1531,1533,3,236,118,
        0,1532,1531,1,0,0,0,1532,1533,1,0,0,0,1533,1534,1,0,0,0,1534,1535,
        3,198,99,0,1535,251,1,0,0,0,1536,1537,5,102,0,0,1537,1540,5,80,0,
        0,1538,1541,3,242,121,0,1539,1541,3,30,15,0,1540,1538,1,0,0,0,1540,
        1539,1,0,0,0,1541,1542,1,0,0,0,1542,1544,5,81,0,0,1543,1545,3,236,
        118,0,1544,1543,1,0,0,0,1544,1545,1,0,0,0,1545,253,1,0,0,0,1546,
        1550,3,256,128,0,1547,1550,3,258,129,0,1548,1550,3,260,130,0,1549,
        1546,1,0,0,0,1549,1547,1,0,0,0,1549,1548,1,0,0,0,1550,255,1,0,0,
        0,1551,1553,5,102,0,0,1552,1554,3,236,118,0,1553,1552,1,0,0,0,1553,
        1554,1,0,0,0,1554,1555,1,0,0,0,1555,1557,5,61,0,0,1556,1558,3,238,
        119,0,1557,1556,1,0,0,0,1557,1558,1,0,0,0,1558,1559,1,0,0,0,1559,
        1560,3,94,47,0,1560,257,1,0,0,0,1561,1563,5,102,0,0,1562,1564,3,
        236,118,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1565,1,0,0,0,
        1565,1566,5,61,0,0,1566,1567,5,57,0,0,1567,1576,3,94,47,0,1568,1570,
        5,102,0,0,1569,1571,3,236,118,0,1570,1569,1,0,0,0,1570,1571,1,0,
        0,0,1571,1572,1,0,0,0,1572,1573,5,57,0,0,1573,1574,5,61,0,0,1574,
        1576,3,94,47,0,1575,1561,1,0,0,0,1575,1568,1,0,0,0,1576,259,1,0,
        0,0,1577,1578,5,102,0,0,1578,1579,5,44,0,0,1579,1587,5,65,0,0,1580,
        1588,3,26,13,0,1581,1583,5,45,0,0,1582,1584,3,24,12,0,1583,1582,
        1,0,0,0,1584,1585,1,0,0,0,1585,1583,1,0,0,0,1585,1586,1,0,0,0,1586,
        1588,1,0,0,0,1587,1580,1,0,0,0,1587,1581,1,0,0,0,1588,1589,1,0,0,
        0,1589,1590,5,66,0,0,1590,1591,5,45,0,0,1591,261,1,0,0,0,1592,1593,
        5,102,0,0,1593,1594,5,57,0,0,1594,263,1,0,0,0,224,269,273,275,284,
        293,296,303,309,318,323,332,338,342,348,354,358,365,367,369,374,
        376,378,382,388,392,399,401,403,408,410,417,421,426,432,436,442,
        448,452,459,461,463,468,470,472,476,482,486,493,495,497,502,504,
        508,513,520,524,536,543,548,552,555,561,565,570,574,578,592,600,
        608,610,614,623,630,632,641,646,651,658,662,669,677,686,695,702,
        715,721,734,740,749,760,771,776,781,786,794,803,809,811,819,823,
        833,840,843,849,852,857,862,872,876,887,898,908,918,928,933,938,
        959,963,971,976,979,984,991,995,999,1005,1012,1021,1028,1032,1039,
        1044,1060,1068,1078,1082,1089,1097,1110,1113,1117,1121,1128,1138,
        1146,1152,1160,1176,1187,1190,1213,1215,1219,1225,1231,1236,1241,
        1250,1256,1262,1268,1272,1276,1278,1282,1292,1294,1301,1305,1309,
        1313,1316,1318,1322,1326,1331,1335,1339,1346,1350,1358,1368,1372,
        1376,1378,1382,1388,1392,1396,1398,1400,1406,1410,1413,1423,1427,
        1433,1443,1447,1450,1457,1462,1468,1473,1478,1486,1496,1504,1511,
        1515,1519,1522,1526,1532,1540,1544,1549,1553,1557,1563,1570,1575,
        1585,1587
    ]

class Python3Parser ( Python3ParserBase ):

    grammarFileName = "Python3Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'and'", "'as'", "'assert'", 
                     "'async'", "'await'", "'break'", "'case'", "'class'", 
                     "'continue'", "'def'", "'del'", "'elif'", "'else'", 
                     "'except'", "'False'", "'finally'", "'for'", "'from'", 
                     "'global'", "'if'", "'import'", "'in'", "'is'", "'lambda'", 
                     "'match'", "'None'", "'nonlocal'", "'not'", "'or'", 
                     "'pass'", "'raise'", "'return'", "'True'", "'try'", 
                     "'_'", "'while'", "'with'", "'yield'", "'strict'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'.'", "'...'", "'*'", "'('", 
                     "')'", "','", "':'", "';'", "'**'", "'='", "'['", "']'", 
                     "'|'", "'^'", "'&'", "'<<'", "'>>'", "'+'", "'-'", 
                     "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", 
                     "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", 
                     "'+='", "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", 
                     "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='", 
                     "'?'", "'?!['" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "STRING", "NUMBER", 
                      "INTEGER", "AND", "AS", "ASSERT", "ASYNC", "AWAIT", 
                      "BREAK", "CASE", "CLASS", "CONTINUE", "DEF", "DEL", 
                      "ELIF", "ELSE", "EXCEPT", "FALSE", "FINALLY", "FOR", 
                      "FROM", "GLOBAL", "IF", "IMPORT", "IN", "IS", "LAMBDA", 
                      "MATCH", "NONE", "NONLOCAL", "NOT", "OR", "PASS", 
                      "RAISE", "RETURN", "TRUE", "TRY", "UNDERSCORE", "WHILE", 
                      "WITH", "YIELD", "STRICT", "NEWLINE", "NAME", "STRING_LITERAL", 
                      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "WILDCARD", "SYNTAX_STRICT_START", 
                      "SKIP_", "UNKNOWN_CHAR" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_async_funcdef = 6
    RULE_funcdef = 7
    RULE_parameters = 8
    RULE_tfpdef = 9
    RULE_varargslist = 10
    RULE_vfpdef = 11
    RULE_stmt = 12
    RULE_simple_stmts = 13
    RULE_simple_stmt = 14
    RULE_expr_stmt = 15
    RULE_annassign = 16
    RULE_testlist_star_expr = 17
    RULE_augassign = 18
    RULE_del_stmt = 19
    RULE_pass_stmt = 20
    RULE_flow_stmt = 21
    RULE_break_stmt = 22
    RULE_continue_stmt = 23
    RULE_return_stmt = 24
    RULE_yield_stmt = 25
    RULE_raise_stmt = 26
    RULE_import_stmt = 27
    RULE_import_name = 28
    RULE_import_from = 29
    RULE_import_as_name = 30
    RULE_dotted_as_name = 31
    RULE_import_as_names = 32
    RULE_dotted_as_names = 33
    RULE_dotted_name = 34
    RULE_global_stmt = 35
    RULE_nonlocal_stmt = 36
    RULE_assert_stmt = 37
    RULE_compound_stmt = 38
    RULE_async_stmt = 39
    RULE_if_stmt = 40
    RULE_while_stmt = 41
    RULE_for_stmt = 42
    RULE_try_stmt = 43
    RULE_with_stmt = 44
    RULE_with_item = 45
    RULE_except_clause = 46
    RULE_block = 47
    RULE_match_stmt = 48
    RULE_subject_expr = 49
    RULE_star_named_expressions = 50
    RULE_star_named_expression = 51
    RULE_case_block = 52
    RULE_guard = 53
    RULE_patterns = 54
    RULE_pattern = 55
    RULE_as_pattern = 56
    RULE_or_pattern = 57
    RULE_closed_pattern = 58
    RULE_literal_pattern = 59
    RULE_literal_expr = 60
    RULE_complex_number = 61
    RULE_signed_number = 62
    RULE_signed_real_number = 63
    RULE_real_number = 64
    RULE_imaginary_number = 65
    RULE_capture_pattern = 66
    RULE_pattern_capture_target = 67
    RULE_wildcard_pattern = 68
    RULE_value_pattern = 69
    RULE_attr = 70
    RULE_name_or_attr = 71
    RULE_group_pattern = 72
    RULE_sequence_pattern = 73
    RULE_open_sequence_pattern = 74
    RULE_maybe_sequence_pattern = 75
    RULE_maybe_star_pattern = 76
    RULE_star_pattern = 77
    RULE_mapping_pattern = 78
    RULE_items_pattern = 79
    RULE_key_value_pattern = 80
    RULE_double_star_pattern = 81
    RULE_class_pattern = 82
    RULE_positional_patterns = 83
    RULE_keyword_patterns = 84
    RULE_keyword_pattern = 85
    RULE_test = 86
    RULE_test_nocond = 87
    RULE_lambdef = 88
    RULE_lambdef_nocond = 89
    RULE_or_test = 90
    RULE_and_test = 91
    RULE_not_test = 92
    RULE_comparison = 93
    RULE_comp_op = 94
    RULE_star_expr = 95
    RULE_expr = 96
    RULE_atom_expr = 97
    RULE_atom = 98
    RULE_name = 99
    RULE_testlist_comp = 100
    RULE_trailer = 101
    RULE_subscriptlist = 102
    RULE_subscript_ = 103
    RULE_sliceop = 104
    RULE_exprlist = 105
    RULE_testlist = 106
    RULE_dictorsetmaker = 107
    RULE_classdef = 108
    RULE_arglist = 109
    RULE_argument = 110
    RULE_comp_iter = 111
    RULE_comp_for = 112
    RULE_comp_if = 113
    RULE_encoding_decl = 114
    RULE_yield_expr = 115
    RULE_yield_arg = 116
    RULE_strings = 117
    RULE_wildcard_type = 118
    RULE_wildcard_number = 119
    RULE_stmt_wildcard = 120
    RULE_expr_wildcard = 121
    RULE_atom_wildcard = 122
    RULE_simple_wildcard = 123
    RULE_double_wildcard = 124
    RULE_var_wildcard = 125
    RULE_contains_wildcard = 126
    RULE_compound_wildcard = 127
    RULE_simple_compound_wildcard = 128
    RULE_multiple_compound_wildcard = 129
    RULE_strict_mode = 130
    RULE_list_wildcard = 131

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "async_funcdef", "funcdef", 
                   "parameters", "tfpdef", "varargslist", "vfpdef", "stmt", 
                   "simple_stmts", "simple_stmt", "expr_stmt", "annassign", 
                   "testlist_star_expr", "augassign", "del_stmt", "pass_stmt", 
                   "flow_stmt", "break_stmt", "continue_stmt", "return_stmt", 
                   "yield_stmt", "raise_stmt", "import_stmt", "import_name", 
                   "import_from", "import_as_name", "dotted_as_name", "import_as_names", 
                   "dotted_as_names", "dotted_name", "global_stmt", "nonlocal_stmt", 
                   "assert_stmt", "compound_stmt", "async_stmt", "if_stmt", 
                   "while_stmt", "for_stmt", "try_stmt", "with_stmt", "with_item", 
                   "except_clause", "block", "match_stmt", "subject_expr", 
                   "star_named_expressions", "star_named_expression", "case_block", 
                   "guard", "patterns", "pattern", "as_pattern", "or_pattern", 
                   "closed_pattern", "literal_pattern", "literal_expr", 
                   "complex_number", "signed_number", "signed_real_number", 
                   "real_number", "imaginary_number", "capture_pattern", 
                   "pattern_capture_target", "wildcard_pattern", "value_pattern", 
                   "attr", "name_or_attr", "group_pattern", "sequence_pattern", 
                   "open_sequence_pattern", "maybe_sequence_pattern", "maybe_star_pattern", 
                   "star_pattern", "mapping_pattern", "items_pattern", "key_value_pattern", 
                   "double_star_pattern", "class_pattern", "positional_patterns", 
                   "keyword_patterns", "keyword_pattern", "test", "test_nocond", 
                   "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "atom_expr", 
                   "atom", "name", "testlist_comp", "trailer", "subscriptlist", 
                   "subscript_", "sliceop", "exprlist", "testlist", "dictorsetmaker", 
                   "classdef", "arglist", "argument", "comp_iter", "comp_for", 
                   "comp_if", "encoding_decl", "yield_expr", "yield_arg", 
                   "strings", "wildcard_type", "wildcard_number", "stmt_wildcard", 
                   "expr_wildcard", "atom_wildcard", "simple_wildcard", 
                   "double_wildcard", "var_wildcard", "contains_wildcard", 
                   "compound_wildcard", "simple_compound_wildcard", "multiple_compound_wildcard", 
                   "strict_mode", "list_wildcard" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    STRING=3
    NUMBER=4
    INTEGER=5
    AND=6
    AS=7
    ASSERT=8
    ASYNC=9
    AWAIT=10
    BREAK=11
    CASE=12
    CLASS=13
    CONTINUE=14
    DEF=15
    DEL=16
    ELIF=17
    ELSE=18
    EXCEPT=19
    FALSE=20
    FINALLY=21
    FOR=22
    FROM=23
    GLOBAL=24
    IF=25
    IMPORT=26
    IN=27
    IS=28
    LAMBDA=29
    MATCH=30
    NONE=31
    NONLOCAL=32
    NOT=33
    OR=34
    PASS=35
    RAISE=36
    RETURN=37
    TRUE=38
    TRY=39
    UNDERSCORE=40
    WHILE=41
    WITH=42
    YIELD=43
    STRICT=44
    NEWLINE=45
    NAME=46
    STRING_LITERAL=47
    BYTES_LITERAL=48
    DECIMAL_INTEGER=49
    OCT_INTEGER=50
    HEX_INTEGER=51
    BIN_INTEGER=52
    FLOAT_NUMBER=53
    IMAG_NUMBER=54
    DOT=55
    ELLIPSIS=56
    STAR=57
    OPEN_PAREN=58
    CLOSE_PAREN=59
    COMMA=60
    COLON=61
    SEMI_COLON=62
    POWER=63
    ASSIGN=64
    OPEN_BRACK=65
    CLOSE_BRACK=66
    OR_OP=67
    XOR=68
    AND_OP=69
    LEFT_SHIFT=70
    RIGHT_SHIFT=71
    ADD=72
    MINUS=73
    DIV=74
    MOD=75
    IDIV=76
    NOT_OP=77
    OPEN_BRACE=78
    CLOSE_BRACE=79
    LESS_THAN=80
    GREATER_THAN=81
    EQUALS=82
    GT_EQ=83
    LT_EQ=84
    NOT_EQ_1=85
    NOT_EQ_2=86
    AT=87
    ARROW=88
    ADD_ASSIGN=89
    SUB_ASSIGN=90
    MULT_ASSIGN=91
    AT_ASSIGN=92
    DIV_ASSIGN=93
    MOD_ASSIGN=94
    AND_ASSIGN=95
    OR_ASSIGN=96
    XOR_ASSIGN=97
    LEFT_SHIFT_ASSIGN=98
    RIGHT_SHIFT_ASSIGN=99
    POWER_ASSIGN=100
    IDIV_ASSIGN=101
    WILDCARD=102
    SYNTAX_STRICT_START=103
    SKIP_=104
    UNKNOWN_CHAR=105

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = Python3Parser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 264
                self.match(Python3Parser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 265
                self.simple_stmts()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 266
                self.compound_stmt()
                self.state = 267
                self.match(Python3Parser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 504526285982265112) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137443160449) != 0):
                self.state = 273
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [45]:
                    self.state = 271
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [3, 4, 8, 9, 10, 11, 13, 14, 15, 16, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 56, 57, 58, 65, 72, 73, 77, 78, 87, 102]:
                    self.state = 272
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 278
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = Python3Parser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.testlist()
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 281
                self.match(Python3Parser.NEWLINE)
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 287
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = Python3Parser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.match(Python3Parser.AT)
            self.state = 290
            self.dotted_name()
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 291
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8718897123106487272) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0):
                    self.state = 292
                    self.arglist()


                self.state = 295
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 298
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DecoratorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DecoratorContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = Python3Parser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 300
                self.decorator()
                self.state = 303 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==87):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(Python3Parser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def async_funcdef(self):
            return self.getTypedRuleContext(Python3Parser.Async_funcdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = Python3Parser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.decorators()
            self.state = 309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 306
                self.classdef()
                pass
            elif token in [15]:
                self.state = 307
                self.funcdef()
                pass
            elif token in [9]:
                self.state = 308
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_funcdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_funcdef" ):
                listener.enterAsync_funcdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_funcdef" ):
                listener.exitAsync_funcdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_funcdef" ):
                return visitor.visitAsync_funcdef(self)
            else:
                return visitor.visitChildren(self)




    def async_funcdef(self):

        localctx = Python3Parser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(Python3Parser.ASYNC)
            self.state = 312
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def parameters(self):
            return self.getTypedRuleContext(Python3Parser.ParametersContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def ARROW(self):
            return self.getToken(Python3Parser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = Python3Parser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(Python3Parser.DEF)
            self.state = 318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 315
                self.name()
                pass

            elif la_ == 2:
                self.state = 316
                self.simple_wildcard()
                pass

            elif la_ == 3:
                self.state = 317
                self.var_wildcard()
                pass


            self.state = 320
            self.parameters()
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 321
                self.match(Python3Parser.ARROW)
                self.state = 322
                self.test()


            self.state = 325
            self.match(Python3Parser.COLON)
            self.state = 326
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = Python3Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 40, 46, 102]:
                self.state = 329
                self.tfpdef()
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 330
                    self.match(Python3Parser.ASSIGN)
                    self.state = 331
                    self.test()


                self.state = 342
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 334
                        self.match(Python3Parser.COMMA)
                        self.state = 335
                        self.tfpdef()
                        self.state = 338
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==64:
                            self.state = 336
                            self.match(Python3Parser.ASSIGN)
                            self.state = 337
                            self.test()

                 
                    self.state = 344
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 345
                    self.match(Python3Parser.COMMA)
                    self.state = 376
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [57]:
                        self.state = 346
                        self.match(Python3Parser.STAR)
                        self.state = 348
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 71469329547264) != 0) or _la==102:
                            self.state = 347
                            self.tfpdef()


                        self.state = 358
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 350
                                self.match(Python3Parser.COMMA)
                                self.state = 351
                                self.tfpdef()
                                self.state = 354
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==64:
                                    self.state = 352
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 353
                                    self.test()

                         
                            self.state = 360
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 369
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==60:
                            self.state = 361
                            self.match(Python3Parser.COMMA)
                            self.state = 367
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==63:
                                self.state = 362
                                self.match(Python3Parser.POWER)
                                self.state = 363
                                self.tfpdef()
                                self.state = 365
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==60:
                                    self.state = 364
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [63]:
                        self.state = 371
                        self.match(Python3Parser.POWER)
                        self.state = 372
                        self.tfpdef()
                        self.state = 374
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==60:
                            self.state = 373
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [59]:
                        pass
                    else:
                        pass


                pass
            elif token in [57]:
                self.state = 380
                self.match(Python3Parser.STAR)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 71469329547264) != 0) or _la==102:
                    self.state = 381
                    self.tfpdef()


                self.state = 392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 384
                        self.match(Python3Parser.COMMA)
                        self.state = 385
                        self.tfpdef()
                        self.state = 388
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==64:
                            self.state = 386
                            self.match(Python3Parser.ASSIGN)
                            self.state = 387
                            self.test()

                 
                    self.state = 394
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 395
                    self.match(Python3Parser.COMMA)
                    self.state = 401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 396
                        self.match(Python3Parser.POWER)
                        self.state = 397
                        self.tfpdef()
                        self.state = 399
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==60:
                            self.state = 398
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [63]:
                self.state = 405
                self.match(Python3Parser.POWER)
                self.state = 406
                self.tfpdef()
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 407
                    self.match(Python3Parser.COMMA)


                pass
            elif token in [59]:
                pass
            else:
                pass
            self.state = 412
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def list_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.List_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTfpdef" ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = Python3Parser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 414
                self.name()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 415
                    self.match(Python3Parser.COLON)
                    self.state = 416
                    self.test()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 419
                self.expr_wildcard()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 420
                self.list_wildcard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.VfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.VfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 40, 46, 102]:
                self.state = 423
                self.vfpdef()
                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 424
                    self.match(Python3Parser.ASSIGN)
                    self.state = 425
                    self.test()


                self.state = 436
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 428
                        self.match(Python3Parser.COMMA)
                        self.state = 429
                        self.vfpdef()
                        self.state = 432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==64:
                            self.state = 430
                            self.match(Python3Parser.ASSIGN)
                            self.state = 431
                            self.test()

                 
                    self.state = 438
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 439
                    self.match(Python3Parser.COMMA)
                    self.state = 470
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [57]:
                        self.state = 440
                        self.match(Python3Parser.STAR)
                        self.state = 442
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 71469329547264) != 0) or _la==102:
                            self.state = 441
                            self.vfpdef()


                        self.state = 452
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 444
                                self.match(Python3Parser.COMMA)
                                self.state = 445
                                self.vfpdef()
                                self.state = 448
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==64:
                                    self.state = 446
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 447
                                    self.test()

                         
                            self.state = 454
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

                        self.state = 463
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==60:
                            self.state = 455
                            self.match(Python3Parser.COMMA)
                            self.state = 461
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==63:
                                self.state = 456
                                self.match(Python3Parser.POWER)
                                self.state = 457
                                self.vfpdef()
                                self.state = 459
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==60:
                                    self.state = 458
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [63]:
                        self.state = 465
                        self.match(Python3Parser.POWER)
                        self.state = 466
                        self.vfpdef()
                        self.state = 468
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==60:
                            self.state = 467
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [61]:
                        pass
                    else:
                        pass


                pass
            elif token in [57]:
                self.state = 474
                self.match(Python3Parser.STAR)
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 71469329547264) != 0) or _la==102:
                    self.state = 475
                    self.vfpdef()


                self.state = 486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 478
                        self.match(Python3Parser.COMMA)
                        self.state = 479
                        self.vfpdef()
                        self.state = 482
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==64:
                            self.state = 480
                            self.match(Python3Parser.ASSIGN)
                            self.state = 481
                            self.test()

                 
                    self.state = 488
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 489
                    self.match(Python3Parser.COMMA)
                    self.state = 495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 490
                        self.match(Python3Parser.POWER)
                        self.state = 491
                        self.vfpdef()
                        self.state = 493
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==60:
                            self.state = 492
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [63]:
                self.state = 499
                self.match(Python3Parser.POWER)
                self.state = 500
                self.vfpdef()
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 501
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpdef" ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = Python3Parser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_vfpdef)
        try:
            self.state = 508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 40, 46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self.name()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.expr_wildcard()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Stmt_wildcardContext,0)


        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stmt)
        try:
            self.state = 513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.stmt_wildcard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 511
                self.simple_stmts()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 512
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.SEMI_COLON)
            else:
                return self.getToken(Python3Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmts" ):
                listener.enterSimple_stmts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmts" ):
                listener.exitSimple_stmts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmts" ):
                return visitor.visitSimple_stmts(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmts(self):

        localctx = Python3Parser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_stmts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.simple_stmt()
            self.state = 520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 516
                    self.match(Python3Parser.SEMI_COLON)
                    self.state = 517
                    self.simple_stmt() 
                self.state = 522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 523
                self.match(Python3Parser.SEMI_COLON)


            self.state = 526
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = Python3Parser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_simple_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 57, 58, 65, 72, 73, 77, 78, 102]:
                self.state = 528
                self.expr_stmt()
                pass
            elif token in [16]:
                self.state = 529
                self.del_stmt()
                pass
            elif token in [35]:
                self.state = 530
                self.pass_stmt()
                pass
            elif token in [11, 14, 36, 37, 43]:
                self.state = 531
                self.flow_stmt()
                pass
            elif token in [23, 26]:
                self.state = 532
                self.import_stmt()
                pass
            elif token in [24]:
                self.state = 533
                self.global_stmt()
                pass
            elif token in [32]:
                self.state = 534
                self.nonlocal_stmt()
                pass
            elif token in [8]:
                self.state = 535
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext,i)


        def annassign(self):
            return self.getTypedRuleContext(Python3Parser.AnnassignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = Python3Parser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.testlist_star_expr()
            self.state = 555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.state = 539
                self.annassign()
                pass
            elif token in [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]:
                self.state = 540
                self.augassign()
                self.state = 543
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [43]:
                    self.state = 541
                    self.yield_expr()
                    pass
                elif token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                    self.state = 542
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [45, 62, 64, 81]:
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==64:
                    self.state = 545
                    self.match(Python3Parser.ASSIGN)
                    self.state = 548
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [43]:
                        self.state = 546
                        self.yield_expr()
                        pass
                    elif token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 57, 58, 65, 72, 73, 77, 78, 102]:
                        self.state = 547
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_annassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnassign" ):
                listener.enterAnnassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnassign" ):
                listener.exitAnnassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnassign" ):
                return visitor.visitAnnassign(self)
            else:
                return visitor.visitChildren(self)




    def annassign(self):

        localctx = Python3Parser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_annassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(Python3Parser.COLON)
            self.state = 558
            self.test()
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 559
                self.match(Python3Parser.ASSIGN)
                self.state = 560
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = Python3Parser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                self.state = 563
                self.test()
                pass
            elif token in [57]:
                self.state = 564
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 574
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 567
                    self.match(Python3Parser.COMMA)
                    self.state = 570
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                        self.state = 568
                        self.test()
                        pass
                    elif token in [57]:
                        self.state = 569
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 576
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 577
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(Python3Parser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(Python3Parser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(Python3Parser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(Python3Parser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(Python3Parser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(Python3Parser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(Python3Parser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(Python3Parser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(Python3Parser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(Python3Parser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(Python3Parser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            _la = self._input.LA(1)
            if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 8191) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = Python3Parser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(Python3Parser.DEL)
            self.state = 583
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = Python3Parser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(Python3Parser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flow_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = Python3Parser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_flow_stmt)
        try:
            self.state = 592
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 587
                self.break_stmt()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 588
                self.continue_stmt()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 3)
                self.state = 589
                self.return_stmt()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 4)
                self.state = 590
                self.raise_stmt()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 5)
                self.state = 591
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(Python3Parser.RETURN)
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 360359725672432664) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0):
                self.state = 599
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(Python3Parser.RAISE)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 360359725672432664) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0):
                self.state = 605
                self.test()
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 606
                    self.match(Python3Parser.FROM)
                    self.state = 607
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(Python3Parser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(Python3Parser.Import_fromContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = Python3Parser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_stmt)
        try:
            self.state = 614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.import_name()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = Python3Parser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(Python3Parser.IMPORT)
            self.state = 617
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Import_as_namesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELLIPSIS)
            else:
                return self.getToken(Python3Parser.ELLIPSIS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = Python3Parser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(Python3Parser.FROM)
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==55 or _la==56:
                    self.state = 620
                    _la = self._input.LA(1)
                    if not(_la==55 or _la==56):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 626
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 628 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 627
                    _la = self._input.LA(1)
                    if not(_la==55 or _la==56):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 630 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==55 or _la==56):
                        break

                pass


            self.state = 634
            self.match(Python3Parser.IMPORT)
            self.state = 641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.state = 635
                self.match(Python3Parser.STAR)
                pass
            elif token in [58]:
                self.state = 636
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 637
                self.import_as_names()
                self.state = 638
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [30, 40, 46]:
                self.state = 640
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = Python3Parser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.name()
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 644
                self.match(Python3Parser.AS)
                self.state = 645
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = Python3Parser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.dotted_name()
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 649
                self.match(Python3Parser.AS)
                self.state = 650
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = Python3Parser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.import_as_name()
            self.state = 658
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 654
                    self.match(Python3Parser.COMMA)
                    self.state = 655
                    self.import_as_name() 
                self.state = 660
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 661
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = Python3Parser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.dotted_as_name()
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 665
                self.match(Python3Parser.COMMA)
                self.state = 666
                self.dotted_as_name()
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = Python3Parser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.name()
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==55:
                self.state = 673
                self.match(Python3Parser.DOT)
                self.state = 674
                self.name()
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = Python3Parser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(Python3Parser.GLOBAL)
            self.state = 681
            self.name()
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 682
                self.match(Python3Parser.COMMA)
                self.state = 683
                self.name()
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = Python3Parser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(Python3Parser.NONLOCAL)
            self.state = 690
            self.name()
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 691
                self.match(Python3Parser.COMMA)
                self.state = 692
                self.name()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(Python3Parser.ASSERT)
            self.state = 699
            self.test()
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 700
                self.match(Python3Parser.COMMA)
                self.state = 701
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Compound_wildcardContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(Python3Parser.DecoratedContext,0)


        def async_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Async_stmtContext,0)


        def match_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Match_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = Python3Parser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_compound_stmt)
        try:
            self.state = 715
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.compound_wildcard()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self.if_stmt()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 706
                self.while_stmt()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 4)
                self.state = 707
                self.for_stmt()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 5)
                self.state = 708
                self.try_stmt()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 6)
                self.state = 709
                self.with_stmt()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 7)
                self.state = 710
                self.funcdef()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 8)
                self.state = 711
                self.classdef()
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 9)
                self.state = 712
                self.decorated()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 10)
                self.state = 713
                self.async_stmt()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 11)
                self.state = 714
                self.match_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_stmt" ):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_stmt" ):
                listener.exitAsync_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_stmt" ):
                return visitor.visitAsync_stmt(self)
            else:
                return visitor.visitChildren(self)




    def async_stmt(self):

        localctx = Python3Parser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(Python3Parser.ASYNC)
            self.state = 721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 718
                self.funcdef()
                pass
            elif token in [42]:
                self.state = 719
                self.with_stmt()
                pass
            elif token in [22]:
                self.state = 720
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(Python3Parser.IF)
            self.state = 724
            self.test()
            self.state = 725
            self.match(Python3Parser.COLON)
            self.state = 726
            self.block()
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==17:
                self.state = 727
                self.match(Python3Parser.ELIF)
                self.state = 728
                self.test()
                self.state = 729
                self.match(Python3Parser.COLON)
                self.state = 730
                self.block()
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 737
                self.match(Python3Parser.ELSE)
                self.state = 738
                self.match(Python3Parser.COLON)
                self.state = 739
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(Python3Parser.WHILE)
            self.state = 743
            self.test()
            self.state = 744
            self.match(Python3Parser.COLON)
            self.state = 745
            self.block()
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 746
                self.match(Python3Parser.ELSE)
                self.state = 747
                self.match(Python3Parser.COLON)
                self.state = 748
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(Python3Parser.FOR)
            self.state = 752
            self.exprlist()
            self.state = 753
            self.match(Python3Parser.IN)
            self.state = 754
            self.testlist()
            self.state = 755
            self.match(Python3Parser.COLON)
            self.state = 756
            self.block()
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 757
                self.match(Python3Parser.ELSE)
                self.state = 758
                self.match(Python3Parser.COLON)
                self.state = 759
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(Python3Parser.TRY)
            self.state = 763
            self.match(Python3Parser.COLON)
            self.state = 764
            self.block()
            self.state = 786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.state = 769 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 765
                    self.except_clause()
                    self.state = 766
                    self.match(Python3Parser.COLON)
                    self.state = 767
                    self.block()
                    self.state = 771 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==19):
                        break

                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 773
                    self.match(Python3Parser.ELSE)
                    self.state = 774
                    self.match(Python3Parser.COLON)
                    self.state = 775
                    self.block()


                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 778
                    self.match(Python3Parser.FINALLY)
                    self.state = 779
                    self.match(Python3Parser.COLON)
                    self.state = 780
                    self.block()


                pass
            elif token in [21]:
                self.state = 783
                self.match(Python3Parser.FINALLY)
                self.state = 784
                self.match(Python3Parser.COLON)
                self.state = 785
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.With_itemContext)
            else:
                return self.getTypedRuleContext(Python3Parser.With_itemContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = Python3Parser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(Python3Parser.WITH)
            self.state = 789
            self.with_item()
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 790
                self.match(Python3Parser.COMMA)
                self.state = 791
                self.with_item()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 797
            self.match(Python3Parser.COLON)
            self.state = 798
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = Python3Parser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.test()
            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 801
                self.match(Python3Parser.AS)
                self.state = 802
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(Python3Parser.EXCEPT)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 360359725672432664) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0):
                self.state = 806
                self.test()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 807
                    self.match(Python3Parser.AS)
                    self.state = 808
                    self.name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = Python3Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.state = 823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 10, 11, 14, 16, 20, 23, 24, 26, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 43, 46, 56, 57, 58, 65, 72, 73, 77, 78, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                self.simple_stmts()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 814
                self.match(Python3Parser.NEWLINE)
                self.state = 815
                self.match(Python3Parser.INDENT)
                self.state = 817 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 816
                    self.stmt()
                    self.state = 819 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 504491101610176280) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137443160449) != 0)):
                        break

                self.state = 821
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(Python3Parser.MATCH, 0)

        def subject_expr(self):
            return self.getTypedRuleContext(Python3Parser.Subject_exprContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Case_blockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Case_blockContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_match_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_stmt" ):
                listener.enterMatch_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_stmt" ):
                listener.exitMatch_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_stmt" ):
                return visitor.visitMatch_stmt(self)
            else:
                return visitor.visitChildren(self)




    def match_stmt(self):

        localctx = Python3Parser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_match_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(Python3Parser.MATCH)
            self.state = 826
            self.subject_expr()
            self.state = 827
            self.match(Python3Parser.COLON)
            self.state = 828
            self.match(Python3Parser.NEWLINE)
            self.state = 829
            self.match(Python3Parser.INDENT)
            self.state = 831 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 830
                self.case_block()
                self.state = 833 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==12):
                    break

            self.state = 835
            self.match(Python3Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subject_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(Python3Parser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(Python3Parser.Star_named_expressionsContext,0)


        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subject_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubject_expr" ):
                listener.enterSubject_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubject_expr" ):
                listener.exitSubject_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubject_expr" ):
                return visitor.visitSubject_expr(self)
            else:
                return visitor.visitChildren(self)




    def subject_expr(self):

        localctx = Python3Parser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_subject_expr)
        self._la = 0 # Token type
        try:
            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 837
                self.star_named_expression()
                self.state = 838
                self.match(Python3Parser.COMMA)
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 839
                    self.star_named_expressions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 842
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def star_named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_named_expressionContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_named_expressionContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_named_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expressions" ):
                listener.enterStar_named_expressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expressions" ):
                listener.exitStar_named_expressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expressions" ):
                return visitor.visitStar_named_expressions(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expressions(self):

        localctx = Python3Parser.Star_named_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_star_named_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(Python3Parser.COMMA)
            self.state = 847 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 846
                self.star_named_expression()
                self.state = 849 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 504474913748288536) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0)):
                    break

            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 851
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_named_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expression" ):
                listener.enterStar_named_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expression" ):
                listener.exitStar_named_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expression" ):
                return visitor.visitStar_named_expression(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expression(self):

        localctx = Python3Parser.Star_named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_star_named_expression)
        try:
            self.state = 857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.match(Python3Parser.STAR)
                self.state = 855
                self.expr(0)
                pass
            elif token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 856
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Python3Parser.CASE, 0)

        def patterns(self):
            return self.getTypedRuleContext(Python3Parser.PatternsContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def guard(self):
            return self.getTypedRuleContext(Python3Parser.GuardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_case_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_block" ):
                listener.enterCase_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_block" ):
                listener.exitCase_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_block" ):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)




    def case_block(self):

        localctx = Python3Parser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(Python3Parser.CASE)
            self.state = 860
            self.patterns()
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 861
                self.guard()


            self.state = 864
            self.match(Python3Parser.COLON)
            self.state = 865
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard" ):
                listener.enterGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard" ):
                listener.exitGuard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard" ):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)




    def guard(self):

        localctx = Python3Parser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(Python3Parser.IF)
            self.state = 868
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Open_sequence_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatterns" ):
                listener.enterPatterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatterns" ):
                listener.exitPatterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatterns" ):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)




    def patterns(self):

        localctx = Python3Parser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_patterns)
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 870
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 871
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(Python3Parser.As_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Or_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = Python3Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_pattern)
        try:
            self.state = 876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.or_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Or_patternContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_as_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_pattern" ):
                listener.enterAs_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_pattern" ):
                listener.exitAs_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_pattern" ):
                return visitor.visitAs_pattern(self)
            else:
                return visitor.visitChildren(self)




    def as_pattern(self):

        localctx = Python3Parser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.or_pattern()
            self.state = 879
            self.match(Python3Parser.AS)
            self.state = 880
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Closed_patternContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR_OP)
            else:
                return self.getToken(Python3Parser.OR_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_pattern" ):
                listener.enterOr_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_pattern" ):
                listener.exitOr_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_pattern" ):
                return visitor.visitOr_pattern(self)
            else:
                return visitor.visitChildren(self)




    def or_pattern(self):

        localctx = Python3Parser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_or_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.closed_pattern()
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==67:
                self.state = 883
                self.match(Python3Parser.OR_OP)
                self.state = 884
                self.closed_pattern()
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closed_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcard_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_patternContext,0)


        def literal_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Literal_patternContext,0)


        def capture_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Capture_patternContext,0)


        def value_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Value_patternContext,0)


        def group_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Group_patternContext,0)


        def sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Sequence_patternContext,0)


        def mapping_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Mapping_patternContext,0)


        def class_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Class_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_closed_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosed_pattern" ):
                listener.enterClosed_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosed_pattern" ):
                listener.exitClosed_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosed_pattern" ):
                return visitor.visitClosed_pattern(self)
            else:
                return visitor.visitChildren(self)




    def closed_pattern(self):

        localctx = Python3Parser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_closed_pattern)
        try:
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 890
                self.wildcard_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 891
                self.literal_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 892
                self.capture_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 893
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 894
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 895
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 896
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 897
                self.class_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(Python3Parser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(Python3Parser.StringsContext,0)


        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_literal_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_pattern" ):
                listener.enterLiteral_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_pattern" ):
                listener.exitLiteral_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_pattern" ):
                return visitor.visitLiteral_pattern(self)
            else:
                return visitor.visitChildren(self)




    def literal_pattern(self):

        localctx = Python3Parser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_literal_pattern)
        try:
            self.state = 908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self.signed_number()
                self.state = 901
                if not  self.CannotBePlusMinus() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " self.CannotBePlusMinus() ")
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 903
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 904
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 905
                self.match(Python3Parser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 906
                self.match(Python3Parser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 907
                self.match(Python3Parser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(Python3Parser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(Python3Parser.StringsContext,0)


        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_literal_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expr" ):
                listener.enterLiteral_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expr" ):
                listener.exitLiteral_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_expr" ):
                return visitor.visitLiteral_expr(self)
            else:
                return visitor.visitChildren(self)




    def literal_expr(self):

        localctx = Python3Parser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_literal_expr)
        try:
            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 910
                self.signed_number()
                self.state = 911
                if not  self.CannotBePlusMinus() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " self.CannotBePlusMinus() ")
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 913
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 914
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 915
                self.match(Python3Parser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 916
                self.match(Python3Parser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 917
                self.match(Python3Parser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Complex_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_real_numberContext,0)


        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def imaginary_number(self):
            return self.getTypedRuleContext(Python3Parser.Imaginary_numberContext,0)


        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_complex_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex_number" ):
                listener.enterComplex_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex_number" ):
                listener.exitComplex_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex_number" ):
                return visitor.visitComplex_number(self)
            else:
                return visitor.visitChildren(self)




    def complex_number(self):

        localctx = Python3Parser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_complex_number)
        try:
            self.state = 928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 920
                self.signed_real_number()
                self.state = 921
                self.match(Python3Parser.ADD)
                self.state = 922
                self.imaginary_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 924
                self.signed_real_number()
                self.state = 925
                self.match(Python3Parser.MINUS)
                self.state = 926
                self.imaginary_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = Python3Parser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_signed_number)
        try:
            self.state = 933
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 930
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 931
                self.match(Python3Parser.MINUS)
                self.state = 932
                self.match(Python3Parser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(Python3Parser.Real_numberContext,0)


        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_signed_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_real_number" ):
                listener.enterSigned_real_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_real_number" ):
                listener.exitSigned_real_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_real_number" ):
                return visitor.visitSigned_real_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_real_number(self):

        localctx = Python3Parser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_signed_real_number)
        try:
            self.state = 938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 935
                self.real_number()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 936
                self.match(Python3Parser.MINUS)
                self.state = 937
                self.real_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_number" ):
                listener.enterReal_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_number" ):
                listener.exitReal_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReal_number" ):
                return visitor.visitReal_number(self)
            else:
                return visitor.visitChildren(self)




    def real_number(self):

        localctx = Python3Parser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(Python3Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Imaginary_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_imaginary_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImaginary_number" ):
                listener.enterImaginary_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImaginary_number" ):
                listener.exitImaginary_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImaginary_number" ):
                return visitor.visitImaginary_number(self)
            else:
                return visitor.visitChildren(self)




    def imaginary_number(self):

        localctx = Python3Parser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(Python3Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_capture_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_pattern" ):
                listener.enterCapture_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_pattern" ):
                listener.exitCapture_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_pattern" ):
                return visitor.visitCapture_pattern(self)
            else:
                return visitor.visitChildren(self)




    def capture_pattern(self):

        localctx = Python3Parser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_capture_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_pattern_capture_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_capture_target" ):
                listener.enterPattern_capture_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_capture_target" ):
                listener.exitPattern_capture_target(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern_capture_target" ):
                return visitor.visitPattern_capture_target(self)
            else:
                return visitor.visitChildren(self)




    def pattern_capture_target(self):

        localctx = Python3Parser.Pattern_capture_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.name()
            self.state = 947
            if not  self.CannotBeDotLpEq() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " self.CannotBeDotLpEq() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wildcard_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(Python3Parser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_wildcard_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_pattern" ):
                listener.enterWildcard_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_pattern" ):
                listener.exitWildcard_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_pattern" ):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_pattern(self):

        localctx = Python3Parser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(Python3Parser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_pattern" ):
                listener.enterValue_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_pattern" ):
                listener.exitValue_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_pattern" ):
                return visitor.visitValue_pattern(self)
            else:
                return visitor.visitChildren(self)




    def value_pattern(self):

        localctx = Python3Parser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.attr()
            self.state = 952
            if not  self.CannotBeDotLpEq() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " self.CannotBeDotLpEq() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = Python3Parser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.name()
            self.state = 957 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 955
                    self.match(Python3Parser.DOT)
                    self.state = 956
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 959 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_or_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_name_or_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_or_attr" ):
                listener.enterName_or_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_or_attr" ):
                listener.exitName_or_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_or_attr" ):
                return visitor.visitName_or_attr(self)
            else:
                return visitor.visitChildren(self)




    def name_or_attr(self):

        localctx = Python3Parser.Name_or_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_name_or_attr)
        try:
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.attr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 962
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_group_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_pattern" ):
                listener.enterGroup_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_pattern" ):
                listener.exitGroup_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_pattern" ):
                return visitor.visitGroup_pattern(self)
            else:
                return visitor.visitChildren(self)




    def group_pattern(self):

        localctx = Python3Parser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 966
            self.pattern()
            self.state = 967
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_sequence_patternContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Open_sequence_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_pattern" ):
                listener.enterSequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_pattern" ):
                listener.exitSequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_pattern" ):
                return visitor.visitSequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def sequence_pattern(self):

        localctx = Python3Parser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 969
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 432417310583554072) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 8449) != 0):
                    self.state = 970
                    self.maybe_sequence_pattern()


                self.state = 973
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 974
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 432417310583554072) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 8449) != 0):
                    self.state = 975
                    self.open_sequence_pattern()


                self.state = 978
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_star_patternContext,0)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_sequence_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_open_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_sequence_pattern" ):
                listener.enterOpen_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_sequence_pattern" ):
                listener.exitOpen_sequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_sequence_pattern" ):
                return visitor.visitOpen_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def open_sequence_pattern(self):

        localctx = Python3Parser.Open_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_open_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.maybe_star_pattern()
            self.state = 982
            self.match(Python3Parser.COMMA)
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 432417310583554072) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 8449) != 0):
                self.state = 983
                self.maybe_sequence_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Maybe_star_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Maybe_star_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_maybe_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_sequence_pattern" ):
                listener.enterMaybe_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_sequence_pattern" ):
                listener.exitMaybe_sequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_sequence_pattern" ):
                return visitor.visitMaybe_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_sequence_pattern(self):

        localctx = Python3Parser.Maybe_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_maybe_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.maybe_star_pattern()
            self.state = 991
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 987
                    self.match(Python3Parser.COMMA)
                    self.state = 988
                    self.maybe_star_pattern() 
                self.state = 993
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 994
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Star_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_maybe_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_star_pattern" ):
                listener.enterMaybe_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_star_pattern" ):
                listener.exitMaybe_star_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_star_pattern" ):
                return visitor.visitMaybe_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_star_pattern(self):

        localctx = Python3Parser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_maybe_star_pattern)
        try:
            self.state = 999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 997
                self.star_pattern()
                pass
            elif token in [3, 4, 20, 30, 31, 38, 40, 46, 58, 65, 73, 78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 998
                self.pattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_pattern" ):
                listener.enterStar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_pattern" ):
                listener.exitStar_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_pattern" ):
                return visitor.visitStar_pattern(self)
            else:
                return visitor.visitChildren(self)




    def star_pattern(self):

        localctx = Python3Parser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_star_pattern)
        try:
            self.state = 1005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1001
                self.match(Python3Parser.STAR)
                self.state = 1002
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1003
                self.match(Python3Parser.STAR)
                self.state = 1004
                self.wildcard_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Double_star_patternContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Items_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_mapping_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_pattern" ):
                listener.enterMapping_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_pattern" ):
                listener.exitMapping_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping_pattern" ):
                return visitor.visitMapping_pattern(self)
            else:
                return visitor.visitChildren(self)




    def mapping_pattern(self):

        localctx = Python3Parser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_mapping_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1032
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1008
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1009
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1010
                self.double_star_pattern()
                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 1011
                    self.match(Python3Parser.COMMA)


                self.state = 1014
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1016
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1017
                self.items_pattern()
                self.state = 1018
                self.match(Python3Parser.COMMA)
                self.state = 1019
                self.double_star_pattern()
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 1020
                    self.match(Python3Parser.COMMA)


                self.state = 1023
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1025
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1026
                self.items_pattern()
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 1027
                    self.match(Python3Parser.COMMA)


                self.state = 1030
                self.match(Python3Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Items_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Key_value_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Key_value_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_items_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItems_pattern" ):
                listener.enterItems_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItems_pattern" ):
                listener.exitItems_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItems_pattern" ):
                return visitor.visitItems_pattern(self)
            else:
                return visitor.visitChildren(self)




    def items_pattern(self):

        localctx = Python3Parser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.key_value_pattern()
            self.state = 1039
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1035
                    self.match(Python3Parser.COMMA)
                    self.state = 1036
                    self.key_value_pattern() 
                self.state = 1041
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def literal_expr(self):
            return self.getTypedRuleContext(Python3Parser.Literal_exprContext,0)


        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_key_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value_pattern" ):
                listener.enterKey_value_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value_pattern" ):
                listener.exitKey_value_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_value_pattern" ):
                return visitor.visitKey_value_pattern(self)
            else:
                return visitor.visitChildren(self)




    def key_value_pattern(self):

        localctx = Python3Parser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 20, 31, 38, 73]:
                self.state = 1042
                self.literal_expr()
                pass
            elif token in [30, 40, 46]:
                self.state = 1043
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1046
            self.match(Python3Parser.COLON)
            self.state = 1047
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_double_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_star_pattern" ):
                listener.enterDouble_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_star_pattern" ):
                listener.exitDouble_star_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_star_pattern" ):
                return visitor.visitDouble_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def double_star_pattern(self):

        localctx = Python3Parser.Double_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(Python3Parser.POWER)
            self.state = 1050
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(Python3Parser.Name_or_attrContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(Python3Parser.Positional_patternsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def keyword_patterns(self):
            return self.getTypedRuleContext(Python3Parser.Keyword_patternsContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_class_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_pattern" ):
                listener.enterClass_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_pattern" ):
                listener.exitClass_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_pattern" ):
                return visitor.visitClass_pattern(self)
            else:
                return visitor.visitChildren(self)




    def class_pattern(self):

        localctx = Python3Parser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_class_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.name_or_attr()
                self.state = 1053
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1054
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.name_or_attr()
                self.state = 1057
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1058
                self.positional_patterns()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 1059
                    self.match(Python3Parser.COMMA)


                self.state = 1062
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1064
                self.name_or_attr()
                self.state = 1065
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1066
                self.keyword_patterns()
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 1067
                    self.match(Python3Parser.COMMA)


                self.state = 1070
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1072
                self.name_or_attr()
                self.state = 1073
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1074
                self.positional_patterns()
                self.state = 1075
                self.match(Python3Parser.COMMA)
                self.state = 1076
                self.keyword_patterns()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 1077
                    self.match(Python3Parser.COMMA)


                self.state = 1080
                self.match(Python3Parser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positional_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.PatternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_positional_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_patterns" ):
                listener.enterPositional_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_patterns" ):
                listener.exitPositional_patterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositional_patterns" ):
                return visitor.visitPositional_patterns(self)
            else:
                return visitor.visitChildren(self)




    def positional_patterns(self):

        localctx = Python3Parser.Positional_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.pattern()
            self.state = 1089
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1085
                    self.match(Python3Parser.COMMA)
                    self.state = 1086
                    self.pattern() 
                self.state = 1091
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Keyword_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_keyword_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_patterns" ):
                listener.enterKeyword_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_patterns" ):
                listener.exitKeyword_patterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_patterns" ):
                return visitor.visitKeyword_patterns(self)
            else:
                return visitor.visitChildren(self)




    def keyword_patterns(self):

        localctx = Python3Parser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.keyword_pattern()
            self.state = 1097
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1093
                    self.match(Python3Parser.COMMA)
                    self.state = 1094
                    self.keyword_pattern() 
                self.state = 1099
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_keyword_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_pattern" ):
                listener.enterKeyword_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_pattern" ):
                listener.exitKeyword_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_pattern" ):
                return visitor.visitKeyword_pattern(self)
            else:
                return visitor.visitChildren(self)




    def keyword_pattern(self):

        localctx = Python3Parser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.name()
            self.state = 1101
            self.match(Python3Parser.ASSIGN)
            self.state = 1102
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext,i)


        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(Python3Parser.LambdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 1113
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1104
                self.or_test()
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 1105
                    self.match(Python3Parser.IF)
                    self.state = 1106
                    self.or_test()
                    self.state = 1107
                    self.match(Python3Parser.ELSE)
                    self.state = 1108
                    self.test()


                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_nocond" ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_test_nocond)
        try:
            self.state = 1117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1115
                self.or_test()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1116
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = Python3Parser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(Python3Parser.LAMBDA)
            self.state = 1121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9079185379449372672) != 0) or _la==102:
                self.state = 1120
                self.varargslist()


            self.state = 1123
            self.match(Python3Parser.COLON)
            self.state = 1124
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambdef_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef_nocond" ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = Python3Parser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self.match(Python3Parser.LAMBDA)
            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9079185379449372672) != 0) or _la==102:
                self.state = 1127
                self.varargslist()


            self.state = 1130
            self.match(Python3Parser.COLON)
            self.state = 1131
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_test" ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.and_test()
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 1134
                self.match(Python3Parser.OR)
                self.state = 1135
                self.and_test()
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_test" ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = Python3Parser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.not_test()
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 1142
                self.match(Python3Parser.AND)
                self.state = 1143
                self.not_test()
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(Python3Parser.ComparisonContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_test" ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_not_test)
        try:
            self.state = 1152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1149
                self.match(Python3Parser.NOT)
                self.state = 1150
                self.not_test()
                pass
            elif token in [3, 4, 10, 20, 30, 31, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = Python3Parser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.expr(0)
            self.state = 1160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1155
                    self.comp_op()
                    self.state = 1156
                    self.expr(0) 
                self.state = 1162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(Python3Parser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(Python3Parser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(Python3Parser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(Python3Parser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(Python3Parser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(Python3Parser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(Python3Parser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_comp_op)
        try:
            self.state = 1176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1163
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1164
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1165
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1166
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1167
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1168
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1169
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1170
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1171
                self.match(Python3Parser.NOT)
                self.state = 1172
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1173
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1174
                self.match(Python3Parser.IS)
                self.state = 1175
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = Python3Parser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.match(Python3Parser.STAR)
            self.state = 1179
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def atom_expr(self):
            return self.getTypedRuleContext(Python3Parser.Atom_exprContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ADD)
            else:
                return self.getToken(Python3Parser.ADD, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.MINUS)
            else:
                return self.getToken(Python3Parser.MINUS, i)

        def NOT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NOT_OP)
            else:
                return self.getToken(Python3Parser.NOT_OP, i)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def DIV(self):
            return self.getToken(Python3Parser.DIV, 0)

        def MOD(self):
            return self.getToken(Python3Parser.MOD, 0)

        def IDIV(self):
            return self.getToken(Python3Parser.IDIV, 0)

        def LEFT_SHIFT(self):
            return self.getToken(Python3Parser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(Python3Parser.AND_OP, 0)

        def XOR(self):
            return self.getToken(Python3Parser.XOR, 0)

        def OR_OP(self):
            return self.getToken(Python3Parser.OR_OP, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Python3Parser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 192
        self.enterRecursionRule(localctx, 192, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1182
                self.expr_wildcard()
                pass

            elif la_ == 2:
                self.state = 1183
                self.atom_expr()
                pass

            elif la_ == 3:
                self.state = 1185 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1184
                        _la = self._input.LA(1)
                        if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 35) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1187 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

                self.state = 1189
                self.expr(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1215
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1213
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                    if la_ == 1:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1192
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1193
                        self.match(Python3Parser.POWER)
                        self.state = 1194
                        self.expr(9)
                        pass

                    elif la_ == 2:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1195
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1196
                        _la = self._input.LA(1)
                        if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 1074659329) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1197
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1198
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1199
                        _la = self._input.LA(1)
                        if not(_la==72 or _la==73):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1200
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1201
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1202
                        _la = self._input.LA(1)
                        if not(_la==70 or _la==71):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1203
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1204
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1205
                        self.match(Python3Parser.AND_OP)
                        self.state = 1206
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1207
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1208
                        self.match(Python3Parser.XOR)
                        self.state = 1209
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1210
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1211
                        self.match(Python3Parser.OR_OP)
                        self.state = 1212
                        self.expr(2)
                        pass

             
                self.state = 1217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(Python3Parser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_expr" ):
                return visitor.visitAtom_expr(self)
            else:
                return visitor.visitChildren(self)




    def atom_expr(self):

        localctx = Python3Parser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1218
                self.match(Python3Parser.AWAIT)


            self.state = 1221
            self.atom()
            self.state = 1225
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1222
                    self.trailer() 
                self.state = 1227
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext,0)


        def atom_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Atom_wildcardContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def ELLIPSIS(self):
            return self.getToken(Python3Parser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 1256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1228
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1231
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [43]:
                    self.state = 1229
                    self.yield_expr()
                    pass
                elif token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 57, 58, 65, 72, 73, 77, 78, 102]:
                    self.state = 1230
                    self.testlist_comp()
                    pass
                elif token in [59]:
                    pass
                else:
                    pass
                self.state = 1233
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1234
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 504474913748288536) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0):
                    self.state = 1235
                    self.testlist_comp()


                self.state = 1238
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1239
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8718897123106487272) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0):
                    self.state = 1240
                    self.dictorsetmaker()


                self.state = 1243
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1244
                self.atom_wildcard()
                pass
            elif token in [30, 40, 46]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1245
                self.name()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1246
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1248 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1247
                        self.match(Python3Parser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1250 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1252
                self.match(Python3Parser.ELLIPSIS)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1253
                self.match(Python3Parser.NONE)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1254
                self.match(Python3Parser.TRUE)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1255
                self.match(Python3Parser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def UNDERSCORE(self):
            return self.getToken(Python3Parser.UNDERSCORE, 0)

        def MATCH(self):
            return self.getToken(Python3Parser.MATCH, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = Python3Parser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 71469329547264) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                self.state = 1260
                self.test()
                pass
            elif token in [57]:
                self.state = 1261
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 22]:
                self.state = 1264
                self.comp_for()
                pass
            elif token in [59, 60, 66]:
                self.state = 1272
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1265
                        self.match(Python3Parser.COMMA)
                        self.state = 1268
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                            self.state = 1266
                            self.test()
                            pass
                        elif token in [57]:
                            self.state = 1267
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1274
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 1275
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(Python3Parser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(Python3Parser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def atom_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Atom_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1280
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8718897123106487272) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0):
                    self.state = 1281
                    self.arglist()


                self.state = 1284
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1285
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 1286
                self.subscriptlist()
                self.state = 1287
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1289
                self.match(Python3Parser.DOT)
                self.state = 1292
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 40, 46]:
                    self.state = 1290
                    self.name()
                    pass
                elif token in [102]:
                    self.state = 1291
                    self.atom_wildcard()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Subscript_Context)
            else:
                return self.getTypedRuleContext(Python3Parser.Subscript_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = Python3Parser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.subscript_()
            self.state = 1301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1297
                    self.match(Python3Parser.COMMA)
                    self.state = 1298
                    self.subscript_() 
                self.state = 1303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 1304
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(Python3Parser.SliceopContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subscript_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_" ):
                listener.enterSubscript_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_" ):
                listener.exitSubscript_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_" ):
                return visitor.visitSubscript_(self)
            else:
                return visitor.visitChildren(self)




    def subscript_(self):

        localctx = Python3Parser.Subscript_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_subscript_)
        self._la = 0 # Token type
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1307
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 360359725672432664) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0):
                    self.state = 1308
                    self.test()


                self.state = 1311
                self.match(Python3Parser.COLON)
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 360359725672432664) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0):
                    self.state = 1312
                    self.test()


                self.state = 1316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 1315
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = Python3Parser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self.match(Python3Parser.COLON)
            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 360359725672432664) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0):
                self.state = 1321
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = Python3Parser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 10, 20, 30, 31, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                self.state = 1324
                self.expr(0)
                pass
            elif token in [57]:
                self.state = 1325
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1335
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1328
                    self.match(Python3Parser.COMMA)
                    self.state = 1331
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 4, 10, 20, 30, 31, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                        self.state = 1329
                        self.expr(0)
                        pass
                    elif token in [57]:
                        self.state = 1330
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1337
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 1338
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.test()
            self.state = 1346
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1342
                    self.match(Python3Parser.COMMA)
                    self.state = 1343
                    self.test() 
                self.state = 1348
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

            self.state = 1350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 1349
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.POWER)
            else:
                return self.getToken(Python3Parser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1358
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                    self.state = 1352
                    self.test()
                    self.state = 1353
                    self.match(Python3Parser.COLON)
                    self.state = 1354
                    self.test()
                    pass
                elif token in [63]:
                    self.state = 1356
                    self.match(Python3Parser.POWER)
                    self.state = 1357
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1378
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [9, 22]:
                    self.state = 1360
                    self.comp_for()
                    pass
                elif token in [60, 79]:
                    self.state = 1372
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1361
                            self.match(Python3Parser.COMMA)
                            self.state = 1368
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                                self.state = 1362
                                self.test()
                                self.state = 1363
                                self.match(Python3Parser.COLON)
                                self.state = 1364
                                self.test()
                                pass
                            elif token in [63]:
                                self.state = 1366
                                self.match(Python3Parser.POWER)
                                self.state = 1367
                                self.expr(0)
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1374
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                    self.state = 1376
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==60:
                        self.state = 1375
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1382
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                    self.state = 1380
                    self.test()
                    pass
                elif token in [57]:
                    self.state = 1381
                    self.star_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1398
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [9, 22]:
                    self.state = 1384
                    self.comp_for()
                    pass
                elif token in [60, 79]:
                    self.state = 1392
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1385
                            self.match(Python3Parser.COMMA)
                            self.state = 1388
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                                self.state = 1386
                                self.test()
                                pass
                            elif token in [57]:
                                self.state = 1387
                                self.star_expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1394
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

                    self.state = 1396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==60:
                        self.state = 1395
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = Python3Parser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(Python3Parser.CLASS)
            self.state = 1406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1403
                self.name()
                pass

            elif la_ == 2:
                self.state = 1404
                self.simple_wildcard()
                pass

            elif la_ == 3:
                self.state = 1405
                self.var_wildcard()
                pass


            self.state = 1413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 1408
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8718897123106487272) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0):
                    self.state = 1409
                    self.arglist()


                self.state = 1412
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 1415
            self.match(Python3Parser.COLON)
            self.state = 1416
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1418
            self.argument()
            self.state = 1423
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1419
                    self.match(Python3Parser.COMMA)
                    self.state = 1420
                    self.argument() 
                self.state = 1425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

            self.state = 1427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 1426
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.List_wildcardContext,0)


        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = Python3Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1429
                self.list_wildcard()
                pass

            elif la_ == 2:
                self.state = 1430
                self.expr_wildcard()
                pass

            elif la_ == 3:
                self.state = 1431
                self.test()
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9 or _la==22:
                    self.state = 1432
                    self.comp_for()


                pass

            elif la_ == 4:
                self.state = 1435
                self.test()
                self.state = 1436
                self.match(Python3Parser.ASSIGN)
                self.state = 1437
                self.test()
                pass

            elif la_ == 5:
                self.state = 1439
                self.match(Python3Parser.POWER)
                self.state = 1440
                self.test()
                pass

            elif la_ == 6:
                self.state = 1441
                self.match(Python3Parser.STAR)
                self.state = 1442
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(Python3Parser.Comp_ifContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_comp_iter)
        try:
            self.state = 1447
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1445
                self.comp_for()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1449
                self.match(Python3Parser.ASYNC)


            self.state = 1452
            self.match(Python3Parser.FOR)
            self.state = 1453
            self.exprlist()
            self.state = 1454
            self.match(Python3Parser.IN)
            self.state = 1455
            self.or_test()
            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 37749248) != 0):
                self.state = 1456
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_if" ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = Python3Parser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.match(Python3Parser.IF)
            self.state = 1460
            self.test_nocond()
            self.state = 1462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 37749248) != 0):
                self.state = 1461
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encoding_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_encoding_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncoding_decl" ):
                listener.enterEncoding_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncoding_decl" ):
                listener.exitEncoding_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncoding_decl" ):
                return visitor.visitEncoding_decl(self)
            else:
                return visitor.visitChildren(self)




    def encoding_decl(self):

        localctx = Python3Parser.Encoding_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_encoding_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(Python3Parser.Yield_argContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = Python3Parser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self.match(Python3Parser.YIELD)
            self.state = 1468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 360359725680821272) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137438966145) != 0):
                self.state = 1467
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = Python3Parser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_yield_arg)
        try:
            self.state = 1473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1470
                self.match(Python3Parser.FROM)
                self.state = 1471
                self.test()
                pass
            elif token in [3, 4, 10, 20, 29, 30, 31, 33, 38, 40, 46, 56, 58, 65, 72, 73, 77, 78, 102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1472
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_strings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrings" ):
                listener.enterStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrings" ):
                listener.exitStrings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrings" ):
                return visitor.visitStrings(self)
            else:
                return visitor.visitChildren(self)




    def strings(self):

        localctx = Python3Parser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_strings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1475
                self.match(Python3Parser.STRING)
                self.state = 1478 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==3):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wildcard_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_wildcard_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_type" ):
                listener.enterWildcard_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_type" ):
                listener.exitWildcard_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_type" ):
                return visitor.visitWildcard_type(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_type(self):

        localctx = Python3Parser.Wildcard_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_wildcard_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.match(Python3Parser.OPEN_BRACK)
            self.state = 1481
            self.name()
            self.state = 1486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 1482
                self.match(Python3Parser.COMMA)
                self.state = 1483
                self.name()
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1489
            self.match(Python3Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wildcard_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NUMBER)
            else:
                return self.getToken(Python3Parser.NUMBER, i)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_wildcard_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_number" ):
                listener.enterWildcard_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_number" ):
                listener.exitWildcard_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_number" ):
                return visitor.visitWildcard_number(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_number(self):

        localctx = Python3Parser.Wildcard_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_wildcard_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self.match(Python3Parser.OPEN_BRACE)
            self.state = 1492
            self.match(Python3Parser.NUMBER)
            self.state = 1496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1493
                self.match(Python3Parser.COMMA)

            elif la_ == 2:
                self.state = 1494
                self.match(Python3Parser.COMMA)
                self.state = 1495
                self.match(Python3Parser.NUMBER)


            self.state = 1498
            self.match(Python3Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stmt_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def double_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Double_wildcardContext,0)


        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def contains_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Contains_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt_wildcard" ):
                listener.enterStmt_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt_wildcard" ):
                listener.exitStmt_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt_wildcard" ):
                return visitor.visitStmt_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def stmt_wildcard(self):

        localctx = Python3Parser.Stmt_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_stmt_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1500
                self.double_wildcard()
                pass

            elif la_ == 2:
                self.state = 1501
                self.simple_wildcard()
                pass

            elif la_ == 3:
                self.state = 1502
                self.var_wildcard()
                pass

            elif la_ == 4:
                self.state = 1503
                self.contains_wildcard()
                pass


            self.state = 1506
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def contains_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Contains_wildcardContext,0)


        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_expr_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_wildcard" ):
                listener.enterExpr_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_wildcard" ):
                listener.exitExpr_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_wildcard" ):
                return visitor.visitExpr_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def expr_wildcard(self):

        localctx = Python3Parser.Expr_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_expr_wildcard)
        try:
            self.state = 1511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1508
                self.var_wildcard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1509
                self.contains_wildcard()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1510
                self.simple_wildcard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_atom_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_wildcard" ):
                listener.enterAtom_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_wildcard" ):
                listener.exitAtom_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_wildcard" ):
                return visitor.visitAtom_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def atom_wildcard(self):

        localctx = Python3Parser.Atom_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_atom_wildcard)
        try:
            self.state = 1515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1513
                self.simple_wildcard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1514
                self.var_wildcard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def wildcard_number(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_numberContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_wildcard" ):
                listener.enterSimple_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_wildcard" ):
                listener.exitSimple_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_wildcard" ):
                return visitor.visitSimple_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def simple_wildcard(self):

        localctx = Python3Parser.Simple_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_simple_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(Python3Parser.WILDCARD)
            self.state = 1519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1518
                self.wildcard_type()


            self.state = 1522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1521
                self.wildcard_number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_double_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_wildcard" ):
                listener.enterDouble_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_wildcard" ):
                listener.exitDouble_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_wildcard" ):
                return visitor.visitDouble_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def double_wildcard(self):

        localctx = Python3Parser.Double_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_double_wildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.match(Python3Parser.WILDCARD)
            self.state = 1526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 1525
                self.wildcard_type()


            self.state = 1528
            self.match(Python3Parser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_var_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_wildcard" ):
                listener.enterVar_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_wildcard" ):
                listener.exitVar_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_wildcard" ):
                return visitor.visitVar_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def var_wildcard(self):

        localctx = Python3Parser.Var_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_var_wildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.match(Python3Parser.WILDCARD)
            self.state = 1532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 1531
                self.wildcard_type()


            self.state = 1534
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Contains_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def LESS_THAN(self):
            return self.getToken(Python3Parser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(Python3Parser.GREATER_THAN, 0)

        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext,0)


        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_contains_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContains_wildcard" ):
                listener.enterContains_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContains_wildcard" ):
                listener.exitContains_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContains_wildcard" ):
                return visitor.visitContains_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def contains_wildcard(self):

        localctx = Python3Parser.Contains_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_contains_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.match(Python3Parser.WILDCARD)
            self.state = 1537
            self.match(Python3Parser.LESS_THAN)
            self.state = 1540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1538
                self.expr_wildcard()
                pass

            elif la_ == 2:
                self.state = 1539
                self.expr_stmt()
                pass


            self.state = 1542
            self.match(Python3Parser.GREATER_THAN)
            self.state = 1544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.state = 1543
                self.wildcard_type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_compound_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_compound_wildcardContext,0)


        def multiple_compound_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Multiple_compound_wildcardContext,0)


        def strict_mode(self):
            return self.getTypedRuleContext(Python3Parser.Strict_modeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_wildcard" ):
                listener.enterCompound_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_wildcard" ):
                listener.exitCompound_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_wildcard" ):
                return visitor.visitCompound_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def compound_wildcard(self):

        localctx = Python3Parser.Compound_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_compound_wildcard)
        try:
            self.state = 1549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1546
                self.simple_compound_wildcard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1547
                self.multiple_compound_wildcard()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1548
                self.strict_mode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_compound_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def wildcard_number(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_numberContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_compound_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_compound_wildcard" ):
                listener.enterSimple_compound_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_compound_wildcard" ):
                listener.exitSimple_compound_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_compound_wildcard" ):
                return visitor.visitSimple_compound_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def simple_compound_wildcard(self):

        localctx = Python3Parser.Simple_compound_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_simple_compound_wildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(Python3Parser.WILDCARD)
            self.state = 1553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 1552
                self.wildcard_type()


            self.state = 1555
            self.match(Python3Parser.COLON)
            self.state = 1557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1556
                self.wildcard_number()


            self.state = 1559
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiple_compound_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_multiple_compound_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiple_compound_wildcard" ):
                listener.enterMultiple_compound_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiple_compound_wildcard" ):
                listener.exitMultiple_compound_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiple_compound_wildcard" ):
                return visitor.visitMultiple_compound_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def multiple_compound_wildcard(self):

        localctx = Python3Parser.Multiple_compound_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_multiple_compound_wildcard)
        self._la = 0 # Token type
        try:
            self.state = 1575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1561
                self.match(Python3Parser.WILDCARD)
                self.state = 1563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1562
                    self.wildcard_type()


                self.state = 1565
                self.match(Python3Parser.COLON)
                self.state = 1566
                self.match(Python3Parser.STAR)
                self.state = 1567
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1568
                self.match(Python3Parser.WILDCARD)
                self.state = 1570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1569
                    self.wildcard_type()


                self.state = 1572
                self.match(Python3Parser.STAR)
                self.state = 1573
                self.match(Python3Parser.COLON)
                self.state = 1574
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Strict_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def STRICT(self):
            return self.getToken(Python3Parser.STRICT, 0)

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_strict_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrict_mode" ):
                listener.enterStrict_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrict_mode" ):
                listener.exitStrict_mode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrict_mode" ):
                return visitor.visitStrict_mode(self)
            else:
                return visitor.visitChildren(self)




    def strict_mode(self):

        localctx = Python3Parser.Strict_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_strict_mode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self.match(Python3Parser.WILDCARD)
            self.state = 1578
            self.match(Python3Parser.STRICT)
            self.state = 1579
            self.match(Python3Parser.OPEN_BRACK)
            self.state = 1587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 10, 11, 14, 16, 20, 23, 24, 26, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 43, 46, 56, 57, 58, 65, 72, 73, 77, 78, 102]:
                self.state = 1580
                self.simple_stmts()
                pass
            elif token in [45]:
                self.state = 1581
                self.match(Python3Parser.NEWLINE)
                self.state = 1583 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1582
                    self.stmt()
                    self.state = 1585 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 504491101610176280) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 137443160449) != 0)):
                        break

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1589
            self.match(Python3Parser.CLOSE_BRACK)
            self.state = 1590
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_list_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_wildcard" ):
                listener.enterList_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_wildcard" ):
                listener.exitList_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_wildcard" ):
                return visitor.visitList_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def list_wildcard(self):

        localctx = Python3Parser.List_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_list_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            self.match(Python3Parser.WILDCARD)
            self.state = 1593
            self.match(Python3Parser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[59] = self.literal_pattern_sempred
        self._predicates[60] = self.literal_expr_sempred
        self._predicates[67] = self.pattern_capture_target_sempred
        self._predicates[69] = self.value_pattern_sempred
        self._predicates[96] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def literal_pattern_sempred(self, localctx:Literal_patternContext, predIndex:int):
            if predIndex == 0:
                return  self.CannotBePlusMinus() 
         

    def literal_expr_sempred(self, localctx:Literal_exprContext, predIndex:int):
            if predIndex == 1:
                return  self.CannotBePlusMinus() 
         

    def pattern_capture_target_sempred(self, localctx:Pattern_capture_targetContext, predIndex:int):
            if predIndex == 2:
                return  self.CannotBeDotLpEq() 
         

    def value_pattern_sempred(self, localctx:Value_patternContext, predIndex:int):
            if predIndex == 3:
                return  self.CannotBeDotLpEq() 
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         




