# Generated from Python3.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3h")
        buf.write("\u0480\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\3")
        buf.write("\2\3\2\3\2\3\2\3\2\5\2\u00c2\n\2\3\3\3\3\7\3\u00c6\n\3")
        buf.write("\f\3\16\3\u00c9\13\3\3\3\3\3\3\4\3\4\7\4\u00cf\n\4\f\4")
        buf.write("\16\4\u00d2\13\4\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u00da\n\5")
        buf.write("\3\5\5\5\u00dd\n\5\3\5\3\5\3\6\6\6\u00e2\n\6\r\6\16\6")
        buf.write("\u00e3\3\7\3\7\3\7\3\7\5\7\u00ea\n\7\3\b\3\b\3\b\3\t\3")
        buf.write("\t\3\t\3\t\3\t\5\t\u00f4\n\t\3\t\3\t\3\t\3\n\3\n\5\n\u00fb")
        buf.write("\n\n\3\n\3\n\3\13\3\13\3\13\5\13\u0102\n\13\3\13\3\13")
        buf.write("\3\13\3\13\5\13\u0108\n\13\7\13\u010a\n\13\f\13\16\13")
        buf.write("\u010d\13\13\3\13\3\13\3\13\5\13\u0112\n\13\3\13\3\13")
        buf.write("\3\13\3\13\5\13\u0118\n\13\7\13\u011a\n\13\f\13\16\13")
        buf.write("\u011d\13\13\3\13\3\13\3\13\3\13\5\13\u0123\n\13\5\13")
        buf.write("\u0125\n\13\5\13\u0127\n\13\3\13\3\13\3\13\5\13\u012c")
        buf.write("\n\13\5\13\u012e\n\13\5\13\u0130\n\13\3\13\3\13\5\13\u0134")
        buf.write("\n\13\3\13\3\13\3\13\3\13\5\13\u013a\n\13\7\13\u013c\n")
        buf.write("\13\f\13\16\13\u013f\13\13\3\13\3\13\3\13\3\13\5\13\u0145")
        buf.write("\n\13\5\13\u0147\n\13\5\13\u0149\n\13\3\13\3\13\3\13\5")
        buf.write("\13\u014e\n\13\5\13\u0150\n\13\3\f\3\f\3\f\5\f\u0155\n")
        buf.write("\f\3\f\5\f\u0158\n\f\3\r\3\r\3\r\5\r\u015d\n\r\3\r\3\r")
        buf.write("\3\r\3\r\5\r\u0163\n\r\7\r\u0165\n\r\f\r\16\r\u0168\13")
        buf.write("\r\3\r\3\r\3\r\5\r\u016d\n\r\3\r\3\r\3\r\3\r\5\r\u0173")
        buf.write("\n\r\7\r\u0175\n\r\f\r\16\r\u0178\13\r\3\r\3\r\3\r\3\r")
        buf.write("\5\r\u017e\n\r\5\r\u0180\n\r\5\r\u0182\n\r\3\r\3\r\3\r")
        buf.write("\5\r\u0187\n\r\5\r\u0189\n\r\5\r\u018b\n\r\3\r\3\r\5\r")
        buf.write("\u018f\n\r\3\r\3\r\3\r\3\r\5\r\u0195\n\r\7\r\u0197\n\r")
        buf.write("\f\r\16\r\u019a\13\r\3\r\3\r\3\r\3\r\5\r\u01a0\n\r\5\r")
        buf.write("\u01a2\n\r\5\r\u01a4\n\r\3\r\3\r\3\r\5\r\u01a9\n\r\5\r")
        buf.write("\u01ab\n\r\3\16\3\16\5\16\u01af\n\16\3\17\3\17\5\17\u01b3")
        buf.write("\n\17\3\20\3\20\3\20\7\20\u01b8\n\20\f\20\16\20\u01bb")
        buf.write("\13\20\3\20\5\20\u01be\n\20\3\20\3\20\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\5\21\u01cb\n\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\5\22\u01d2\n\22\3\22\3\22\3\22\5\22\u01d7")
        buf.write("\n\22\7\22\u01d9\n\22\f\22\16\22\u01dc\13\22\5\22\u01de")
        buf.write("\n\22\3\23\3\23\3\23\3\23\5\23\u01e4\n\23\3\24\3\24\5")
        buf.write("\24\u01e8\n\24\3\24\3\24\3\24\5\24\u01ed\n\24\7\24\u01ef")
        buf.write("\n\24\f\24\16\24\u01f2\13\24\3\24\5\24\u01f5\n\24\3\25")
        buf.write("\3\25\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\30\3\30")
        buf.write("\5\30\u0203\n\30\3\31\3\31\3\32\3\32\3\33\3\33\5\33\u020b")
        buf.write("\n\33\3\34\3\34\3\35\3\35\3\35\3\35\5\35\u0213\n\35\5")
        buf.write("\35\u0215\n\35\3\36\3\36\5\36\u0219\n\36\3\37\3\37\3\37")
        buf.write("\3 \3 \7 \u0220\n \f \16 \u0223\13 \3 \3 \6 \u0227\n ")
        buf.write("\r \16 \u0228\5 \u022b\n \3 \3 \3 \3 \3 \3 \3 \5 \u0234")
        buf.write("\n \3!\3!\3!\5!\u0239\n!\3\"\3\"\3\"\5\"\u023e\n\"\3#")
        buf.write("\3#\3#\7#\u0243\n#\f#\16#\u0246\13#\3#\5#\u0249\n#\3$")
        buf.write("\3$\3$\7$\u024e\n$\f$\16$\u0251\13$\3%\3%\3%\7%\u0256")
        buf.write("\n%\f%\16%\u0259\13%\3&\3&\3&\3&\7&\u025f\n&\f&\16&\u0262")
        buf.write("\13&\3\'\3\'\3\'\3\'\7\'\u0268\n\'\f\'\16\'\u026b\13\'")
        buf.write("\3(\3(\3(\3(\5(\u0271\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\5)\u027d\n)\3*\3*\3*\3*\5*\u0283\n*\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\7+\u028e\n+\f+\16+\u0291\13+\3+\3+\3+\5+\u0296")
        buf.write("\n+\3,\3,\3,\3,\3,\3,\3,\5,\u029f\n,\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\5-\u02aa\n-\3.\3.\3.\3.\3.\3.\3.\6.\u02b3\n")
        buf.write(".\r.\16.\u02b4\3.\3.\3.\5.\u02ba\n.\3.\3.\3.\5.\u02bf")
        buf.write("\n.\3.\3.\3.\5.\u02c4\n.\3/\3/\3/\3/\7/\u02ca\n/\f/\16")
        buf.write("/\u02cd\13/\3/\3/\3/\3\60\3\60\3\60\5\60\u02d5\n\60\3")
        buf.write("\61\3\61\3\61\3\61\5\61\u02db\n\61\5\61\u02dd\n\61\3\62")
        buf.write("\3\62\3\62\3\62\6\62\u02e3\n\62\r\62\16\62\u02e4\3\62")
        buf.write("\3\62\5\62\u02e9\n\62\3\63\3\63\3\63\3\63\3\63\3\63\5")
        buf.write("\63\u02f1\n\63\3\63\3\63\5\63\u02f5\n\63\3\64\3\64\5\64")
        buf.write("\u02f9\n\64\3\65\3\65\5\65\u02fd\n\65\3\65\3\65\3\65\3")
        buf.write("\66\3\66\5\66\u0304\n\66\3\66\3\66\3\66\3\67\3\67\3\67")
        buf.write("\7\67\u030c\n\67\f\67\16\67\u030f\13\67\38\38\38\78\u0314")
        buf.write("\n8\f8\168\u0317\138\39\39\39\59\u031c\n9\3:\3:\3:\3:")
        buf.write("\7:\u0322\n:\f:\16:\u0325\13:\3;\3;\3;\3;\3;\3;\3;\3;")
        buf.write("\3;\3;\3;\3;\3;\5;\u0334\n;\3<\3<\3<\3=\3=\3=\7=\u033c")
        buf.write("\n=\f=\16=\u033f\13=\3>\3>\3>\7>\u0344\n>\f>\16>\u0347")
        buf.write("\13>\3?\3?\3?\7?\u034c\n?\f?\16?\u034f\13?\3@\3@\3@\7")
        buf.write("@\u0354\n@\f@\16@\u0357\13@\3A\3A\3A\7A\u035c\nA\fA\16")
        buf.write("A\u035f\13A\3B\3B\3B\7B\u0364\nB\fB\16B\u0367\13B\3C\3")
        buf.write("C\3C\5C\u036c\nC\3D\3D\3D\5D\u0371\nD\3E\5E\u0374\nE\3")
        buf.write("E\3E\7E\u0378\nE\fE\16E\u037b\13E\3F\3F\3F\5F\u0380\n")
        buf.write("F\3F\3F\3F\5F\u0385\nF\3F\3F\3F\5F\u038a\nF\3F\3F\3F\3")
        buf.write("F\3F\6F\u0391\nF\rF\16F\u0392\3F\3F\3F\3F\5F\u0399\nF")
        buf.write("\3G\3G\5G\u039d\nG\3G\3G\3G\3G\5G\u03a3\nG\7G\u03a5\n")
        buf.write("G\fG\16G\u03a8\13G\3G\5G\u03ab\nG\5G\u03ad\nG\3H\3H\5")
        buf.write("H\u03b1\nH\3H\3H\3H\3H\3H\3H\3H\5H\u03ba\nH\3I\3I\3I\7")
        buf.write("I\u03bf\nI\fI\16I\u03c2\13I\3I\5I\u03c5\nI\3J\3J\5J\u03c9")
        buf.write("\nJ\3J\3J\5J\u03cd\nJ\3J\5J\u03d0\nJ\5J\u03d2\nJ\3K\3")
        buf.write("K\5K\u03d6\nK\3L\3L\5L\u03da\nL\3L\3L\3L\5L\u03df\nL\7")
        buf.write("L\u03e1\nL\fL\16L\u03e4\13L\3L\5L\u03e7\nL\3M\3M\3M\7")
        buf.write("M\u03ec\nM\fM\16M\u03ef\13M\3M\5M\u03f2\nM\3N\3N\3N\3")
        buf.write("N\3N\3N\5N\u03fa\nN\3N\3N\3N\3N\3N\3N\3N\3N\5N\u0404\n")
        buf.write("N\7N\u0406\nN\fN\16N\u0409\13N\3N\5N\u040c\nN\5N\u040e")
        buf.write("\nN\3N\3N\5N\u0412\nN\3N\3N\3N\3N\5N\u0418\nN\7N\u041a")
        buf.write("\nN\fN\16N\u041d\13N\3N\5N\u0420\nN\5N\u0422\nN\5N\u0424")
        buf.write("\nN\3O\3O\3O\3O\5O\u042a\nO\3O\5O\u042d\nO\3O\3O\3O\3")
        buf.write("P\3P\3P\7P\u0435\nP\fP\16P\u0438\13P\3P\5P\u043b\nP\3")
        buf.write("Q\3Q\5Q\u043f\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0449\nQ\3")
        buf.write("R\3R\5R\u044d\nR\3S\5S\u0450\nS\3S\3S\3S\3S\3S\5S\u0457")
        buf.write("\nS\3T\3T\3T\5T\u045c\nT\3U\3U\3V\3V\5V\u0462\nV\3W\3")
        buf.write("W\3W\5W\u0467\nW\3X\3X\5X\u046b\nX\3Y\3Y\3Z\3Z\3[\3[\3")
        buf.write("[\3\\\3\\\5\\\u0476\n\\\3]\3]\3]\3]\3^\3^\3^\3^\3^\2\2")
        buf.write("_\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\2\b\3\2Xd\3\2\66\67\3\2EF\3\2GH\5\288IKVV\4\2G")
        buf.write("HLL\2\u04fe\2\u00c1\3\2\2\2\4\u00c7\3\2\2\2\6\u00cc\3")
        buf.write("\2\2\2\b\u00d5\3\2\2\2\n\u00e1\3\2\2\2\f\u00e5\3\2\2\2")
        buf.write("\16\u00eb\3\2\2\2\20\u00ee\3\2\2\2\22\u00f8\3\2\2\2\24")
        buf.write("\u014f\3\2\2\2\26\u0157\3\2\2\2\30\u01aa\3\2\2\2\32\u01ae")
        buf.write("\3\2\2\2\34\u01b2\3\2\2\2\36\u01b4\3\2\2\2 \u01ca\3\2")
        buf.write("\2\2\"\u01cc\3\2\2\2$\u01df\3\2\2\2&\u01e7\3\2\2\2(\u01f6")
        buf.write("\3\2\2\2*\u01f8\3\2\2\2,\u01fb\3\2\2\2.\u0202\3\2\2\2")
        buf.write("\60\u0204\3\2\2\2\62\u0206\3\2\2\2\64\u0208\3\2\2\2\66")
        buf.write("\u020c\3\2\2\28\u020e\3\2\2\2:\u0218\3\2\2\2<\u021a\3")
        buf.write("\2\2\2>\u021d\3\2\2\2@\u0235\3\2\2\2B\u023a\3\2\2\2D\u023f")
        buf.write("\3\2\2\2F\u024a\3\2\2\2H\u0252\3\2\2\2J\u025a\3\2\2\2")
        buf.write("L\u0263\3\2\2\2N\u026c\3\2\2\2P\u027c\3\2\2\2R\u027e\3")
        buf.write("\2\2\2T\u0284\3\2\2\2V\u0297\3\2\2\2X\u02a0\3\2\2\2Z\u02ab")
        buf.write("\3\2\2\2\\\u02c5\3\2\2\2^\u02d1\3\2\2\2`\u02d6\3\2\2\2")
        buf.write("b\u02e8\3\2\2\2d\u02f4\3\2\2\2f\u02f8\3\2\2\2h\u02fa\3")
        buf.write("\2\2\2j\u0301\3\2\2\2l\u0308\3\2\2\2n\u0310\3\2\2\2p\u031b")
        buf.write("\3\2\2\2r\u031d\3\2\2\2t\u0333\3\2\2\2v\u0335\3\2\2\2")
        buf.write("x\u0338\3\2\2\2z\u0340\3\2\2\2|\u0348\3\2\2\2~\u0350\3")
        buf.write("\2\2\2\u0080\u0358\3\2\2\2\u0082\u0360\3\2\2\2\u0084\u036b")
        buf.write("\3\2\2\2\u0086\u036d\3\2\2\2\u0088\u0373\3\2\2\2\u008a")
        buf.write("\u0398\3\2\2\2\u008c\u039c\3\2\2\2\u008e\u03b9\3\2\2\2")
        buf.write("\u0090\u03bb\3\2\2\2\u0092\u03d1\3\2\2\2\u0094\u03d3\3")
        buf.write("\2\2\2\u0096\u03d9\3\2\2\2\u0098\u03e8\3\2\2\2\u009a\u0423")
        buf.write("\3\2\2\2\u009c\u0425\3\2\2\2\u009e\u0431\3\2\2\2\u00a0")
        buf.write("\u0448\3\2\2\2\u00a2\u044c\3\2\2\2\u00a4\u044f\3\2\2\2")
        buf.write("\u00a6\u0458\3\2\2\2\u00a8\u045d\3\2\2\2\u00aa\u045f\3")
        buf.write("\2\2\2\u00ac\u0466\3\2\2\2\u00ae\u046a\3\2\2\2\u00b0\u046c")
        buf.write("\3\2\2\2\u00b2\u046e\3\2\2\2\u00b4\u0470\3\2\2\2\u00b6")
        buf.write("\u0475\3\2\2\2\u00b8\u0477\3\2\2\2\u00ba\u047b\3\2\2\2")
        buf.write("\u00bc\u00c2\7,\2\2\u00bd\u00c2\5\36\20\2\u00be\u00bf")
        buf.write("\5P)\2\u00bf\u00c0\7,\2\2\u00c0\u00c2\3\2\2\2\u00c1\u00bc")
        buf.write("\3\2\2\2\u00c1\u00bd\3\2\2\2\u00c1\u00be\3\2\2\2\u00c2")
        buf.write("\3\3\2\2\2\u00c3\u00c6\7,\2\2\u00c4\u00c6\5\34\17\2\u00c5")
        buf.write("\u00c3\3\2\2\2\u00c5\u00c4\3\2\2\2\u00c6\u00c9\3\2\2\2")
        buf.write("\u00c7\u00c5\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00ca\3")
        buf.write("\2\2\2\u00c9\u00c7\3\2\2\2\u00ca\u00cb\7\2\2\3\u00cb\5")
        buf.write("\3\2\2\2\u00cc\u00d0\5\u0098M\2\u00cd\u00cf\7,\2\2\u00ce")
        buf.write("\u00cd\3\2\2\2\u00cf\u00d2\3\2\2\2\u00d0\u00ce\3\2\2\2")
        buf.write("\u00d0\u00d1\3\2\2\2\u00d1\u00d3\3\2\2\2\u00d2\u00d0\3")
        buf.write("\2\2\2\u00d3\u00d4\7\2\2\3\u00d4\7\3\2\2\2\u00d5\u00d6")
        buf.write("\7V\2\2\u00d6\u00dc\5H%\2\u00d7\u00d9\79\2\2\u00d8\u00da")
        buf.write("\5\u009eP\2\u00d9\u00d8\3\2\2\2\u00d9\u00da\3\2\2\2\u00da")
        buf.write("\u00db\3\2\2\2\u00db\u00dd\7:\2\2\u00dc\u00d7\3\2\2\2")
        buf.write("\u00dc\u00dd\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00df\7")
        buf.write(",\2\2\u00df\t\3\2\2\2\u00e0\u00e2\5\b\5\2\u00e1\u00e0")
        buf.write("\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e1\3\2\2\2\u00e3")
        buf.write("\u00e4\3\2\2\2\u00e4\13\3\2\2\2\u00e5\u00e9\5\n\6\2\u00e6")
        buf.write("\u00ea\5\u009cO\2\u00e7\u00ea\5\20\t\2\u00e8\u00ea\5\16")
        buf.write("\b\2\u00e9\u00e6\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00e8")
        buf.write("\3\2\2\2\u00ea\r\3\2\2\2\u00eb\u00ec\7*\2\2\u00ec\u00ed")
        buf.write("\5\20\t\2\u00ed\17\3\2\2\2\u00ee\u00ef\7\t\2\2\u00ef\u00f0")
        buf.write("\7-\2\2\u00f0\u00f3\5\22\n\2\u00f1\u00f2\7W\2\2\u00f2")
        buf.write("\u00f4\5d\63\2\u00f3\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2")
        buf.write("\u00f4\u00f5\3\2\2\2\u00f5\u00f6\7<\2\2\u00f6\u00f7\5")
        buf.write("b\62\2\u00f7\21\3\2\2\2\u00f8\u00fa\79\2\2\u00f9\u00fb")
        buf.write("\5\24\13\2\u00fa\u00f9\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb")
        buf.write("\u00fc\3\2\2\2\u00fc\u00fd\7:\2\2\u00fd\23\3\2\2\2\u00fe")
        buf.write("\u0101\5\26\f\2\u00ff\u0100\7?\2\2\u0100\u0102\5d\63\2")
        buf.write("\u0101\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u010b\3")
        buf.write("\2\2\2\u0103\u0104\7;\2\2\u0104\u0107\5\26\f\2\u0105\u0106")
        buf.write("\7?\2\2\u0106\u0108\5d\63\2\u0107\u0105\3\2\2\2\u0107")
        buf.write("\u0108\3\2\2\2\u0108\u010a\3\2\2\2\u0109\u0103\3\2\2\2")
        buf.write("\u010a\u010d\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c\3")
        buf.write("\2\2\2\u010c\u012f\3\2\2\2\u010d\u010b\3\2\2\2\u010e\u012d")
        buf.write("\7;\2\2\u010f\u0111\78\2\2\u0110\u0112\5\26\f\2\u0111")
        buf.write("\u0110\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u011b\3\2\2\2")
        buf.write("\u0113\u0114\7;\2\2\u0114\u0117\5\26\f\2\u0115\u0116\7")
        buf.write("?\2\2\u0116\u0118\5d\63\2\u0117\u0115\3\2\2\2\u0117\u0118")
        buf.write("\3\2\2\2\u0118\u011a\3\2\2\2\u0119\u0113\3\2\2\2\u011a")
        buf.write("\u011d\3\2\2\2\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2")
        buf.write("\u011c\u0126\3\2\2\2\u011d\u011b\3\2\2\2\u011e\u0124\7")
        buf.write(";\2\2\u011f\u0120\7>\2\2\u0120\u0122\5\26\f\2\u0121\u0123")
        buf.write("\7;\2\2\u0122\u0121\3\2\2\2\u0122\u0123\3\2\2\2\u0123")
        buf.write("\u0125\3\2\2\2\u0124\u011f\3\2\2\2\u0124\u0125\3\2\2\2")
        buf.write("\u0125\u0127\3\2\2\2\u0126\u011e\3\2\2\2\u0126\u0127\3")
        buf.write("\2\2\2\u0127\u012e\3\2\2\2\u0128\u0129\7>\2\2\u0129\u012b")
        buf.write("\5\26\f\2\u012a\u012c\7;\2\2\u012b\u012a\3\2\2\2\u012b")
        buf.write("\u012c\3\2\2\2\u012c\u012e\3\2\2\2\u012d\u010f\3\2\2\2")
        buf.write("\u012d\u0128\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0130\3")
        buf.write("\2\2\2\u012f\u010e\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0150")
        buf.write("\3\2\2\2\u0131\u0133\78\2\2\u0132\u0134\5\26\f\2\u0133")
        buf.write("\u0132\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u013d\3\2\2\2")
        buf.write("\u0135\u0136\7;\2\2\u0136\u0139\5\26\f\2\u0137\u0138\7")
        buf.write("?\2\2\u0138\u013a\5d\63\2\u0139\u0137\3\2\2\2\u0139\u013a")
        buf.write("\3\2\2\2\u013a\u013c\3\2\2\2\u013b\u0135\3\2\2\2\u013c")
        buf.write("\u013f\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e\3\2\2\2")
        buf.write("\u013e\u0148\3\2\2\2\u013f\u013d\3\2\2\2\u0140\u0146\7")
        buf.write(";\2\2\u0141\u0142\7>\2\2\u0142\u0144\5\26\f\2\u0143\u0145")
        buf.write("\7;\2\2\u0144\u0143\3\2\2\2\u0144\u0145\3\2\2\2\u0145")
        buf.write("\u0147\3\2\2\2\u0146\u0141\3\2\2\2\u0146\u0147\3\2\2\2")
        buf.write("\u0147\u0149\3\2\2\2\u0148\u0140\3\2\2\2\u0148\u0149\3")
        buf.write("\2\2\2\u0149\u0150\3\2\2\2\u014a\u014b\7>\2\2\u014b\u014d")
        buf.write("\5\26\f\2\u014c\u014e\7;\2\2\u014d\u014c\3\2\2\2\u014d")
        buf.write("\u014e\3\2\2\2\u014e\u0150\3\2\2\2\u014f\u00fe\3\2\2\2")
        buf.write("\u014f\u0131\3\2\2\2\u014f\u014a\3\2\2\2\u0150\25\3\2")
        buf.write("\2\2\u0151\u0154\7-\2\2\u0152\u0153\7<\2\2\u0153\u0155")
        buf.write("\5d\63\2\u0154\u0152\3\2\2\2\u0154\u0155\3\2\2\2\u0155")
        buf.write("\u0158\3\2\2\2\u0156\u0158\5\u00aeX\2\u0157\u0151\3\2")
        buf.write("\2\2\u0157\u0156\3\2\2\2\u0158\27\3\2\2\2\u0159\u015c")
        buf.write("\5\32\16\2\u015a\u015b\7?\2\2\u015b\u015d\5d\63\2\u015c")
        buf.write("\u015a\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u0166\3\2\2\2")
        buf.write("\u015e\u015f\7;\2\2\u015f\u0162\5\32\16\2\u0160\u0161")
        buf.write("\7?\2\2\u0161\u0163\5d\63\2\u0162\u0160\3\2\2\2\u0162")
        buf.write("\u0163\3\2\2\2\u0163\u0165\3\2\2\2\u0164\u015e\3\2\2\2")
        buf.write("\u0165\u0168\3\2\2\2\u0166\u0164\3\2\2\2\u0166\u0167\3")
        buf.write("\2\2\2\u0167\u018a\3\2\2\2\u0168\u0166\3\2\2\2\u0169\u0188")
        buf.write("\7;\2\2\u016a\u016c\78\2\2\u016b\u016d\5\32\16\2\u016c")
        buf.write("\u016b\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u0176\3\2\2\2")
        buf.write("\u016e\u016f\7;\2\2\u016f\u0172\5\32\16\2\u0170\u0171")
        buf.write("\7?\2\2\u0171\u0173\5d\63\2\u0172\u0170\3\2\2\2\u0172")
        buf.write("\u0173\3\2\2\2\u0173\u0175\3\2\2\2\u0174\u016e\3\2\2\2")
        buf.write("\u0175\u0178\3\2\2\2\u0176\u0174\3\2\2\2\u0176\u0177\3")
        buf.write("\2\2\2\u0177\u0181\3\2\2\2\u0178\u0176\3\2\2\2\u0179\u017f")
        buf.write("\7;\2\2\u017a\u017b\7>\2\2\u017b\u017d\5\32\16\2\u017c")
        buf.write("\u017e\7;\2\2\u017d\u017c\3\2\2\2\u017d\u017e\3\2\2\2")
        buf.write("\u017e\u0180\3\2\2\2\u017f\u017a\3\2\2\2\u017f\u0180\3")
        buf.write("\2\2\2\u0180\u0182\3\2\2\2\u0181\u0179\3\2\2\2\u0181\u0182")
        buf.write("\3\2\2\2\u0182\u0189\3\2\2\2\u0183\u0184\7>\2\2\u0184")
        buf.write("\u0186\5\32\16\2\u0185\u0187\7;\2\2\u0186\u0185\3\2\2")
        buf.write("\2\u0186\u0187\3\2\2\2\u0187\u0189\3\2\2\2\u0188\u016a")
        buf.write("\3\2\2\2\u0188\u0183\3\2\2\2\u0188\u0189\3\2\2\2\u0189")
        buf.write("\u018b\3\2\2\2\u018a\u0169\3\2\2\2\u018a\u018b\3\2\2\2")
        buf.write("\u018b\u01ab\3\2\2\2\u018c\u018e\78\2\2\u018d\u018f\5")
        buf.write("\32\16\2\u018e\u018d\3\2\2\2\u018e\u018f\3\2\2\2\u018f")
        buf.write("\u0198\3\2\2\2\u0190\u0191\7;\2\2\u0191\u0194\5\32\16")
        buf.write("\2\u0192\u0193\7?\2\2\u0193\u0195\5d\63\2\u0194\u0192")
        buf.write("\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0197\3\2\2\2\u0196")
        buf.write("\u0190\3\2\2\2\u0197\u019a\3\2\2\2\u0198\u0196\3\2\2\2")
        buf.write("\u0198\u0199\3\2\2\2\u0199\u01a3\3\2\2\2\u019a\u0198\3")
        buf.write("\2\2\2\u019b\u01a1\7;\2\2\u019c\u019d\7>\2\2\u019d\u019f")
        buf.write("\5\32\16\2\u019e\u01a0\7;\2\2\u019f\u019e\3\2\2\2\u019f")
        buf.write("\u01a0\3\2\2\2\u01a0\u01a2\3\2\2\2\u01a1\u019c\3\2\2\2")
        buf.write("\u01a1\u01a2\3\2\2\2\u01a2\u01a4\3\2\2\2\u01a3\u019b\3")
        buf.write("\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01ab\3\2\2\2\u01a5\u01a6")
        buf.write("\7>\2\2\u01a6\u01a8\5\32\16\2\u01a7\u01a9\7;\2\2\u01a8")
        buf.write("\u01a7\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01ab\3\2\2\2")
        buf.write("\u01aa\u0159\3\2\2\2\u01aa\u018c\3\2\2\2\u01aa\u01a5\3")
        buf.write("\2\2\2\u01ab\31\3\2\2\2\u01ac\u01af\7-\2\2\u01ad\u01af")
        buf.write("\5\u00aeX\2\u01ae\u01ac\3\2\2\2\u01ae\u01ad\3\2\2\2\u01af")
        buf.write("\33\3\2\2\2\u01b0\u01b3\5\36\20\2\u01b1\u01b3\5P)\2\u01b2")
        buf.write("\u01b0\3\2\2\2\u01b2\u01b1\3\2\2\2\u01b3\35\3\2\2\2\u01b4")
        buf.write("\u01b9\5 \21\2\u01b5\u01b6\7=\2\2\u01b6\u01b8\5 \21\2")
        buf.write("\u01b7\u01b5\3\2\2\2\u01b8\u01bb\3\2\2\2\u01b9\u01b7\3")
        buf.write("\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bd\3\2\2\2\u01bb\u01b9")
        buf.write("\3\2\2\2\u01bc\u01be\7=\2\2\u01bd\u01bc\3\2\2\2\u01bd")
        buf.write("\u01be\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c0\7,\2\2")
        buf.write("\u01c0\37\3\2\2\2\u01c1\u01cb\5\u00aeX\2\u01c2\u01cb\5")
        buf.write("\"\22\2\u01c3\u01cb\5*\26\2\u01c4\u01cb\5,\27\2\u01c5")
        buf.write("\u01cb\5.\30\2\u01c6\u01cb\5:\36\2\u01c7\u01cb\5J&\2\u01c8")
        buf.write("\u01cb\5L\'\2\u01c9\u01cb\5N(\2\u01ca\u01c1\3\2\2\2\u01ca")
        buf.write("\u01c2\3\2\2\2\u01ca\u01c3\3\2\2\2\u01ca\u01c4\3\2\2\2")
        buf.write("\u01ca\u01c5\3\2\2\2\u01ca\u01c6\3\2\2\2\u01ca\u01c7\3")
        buf.write("\2\2\2\u01ca\u01c8\3\2\2\2\u01ca\u01c9\3\2\2\2\u01cb!")
        buf.write("\3\2\2\2\u01cc\u01dd\5&\24\2\u01cd\u01de\5$\23\2\u01ce")
        buf.write("\u01d1\5(\25\2\u01cf\u01d2\5\u00aaV\2\u01d0\u01d2\5\u0098")
        buf.write("M\2\u01d1\u01cf\3\2\2\2\u01d1\u01d0\3\2\2\2\u01d2\u01de")
        buf.write("\3\2\2\2\u01d3\u01d6\7?\2\2\u01d4\u01d7\5\u00aaV\2\u01d5")
        buf.write("\u01d7\5&\24\2\u01d6\u01d4\3\2\2\2\u01d6\u01d5\3\2\2\2")
        buf.write("\u01d7\u01d9\3\2\2\2\u01d8\u01d3\3\2\2\2\u01d9\u01dc\3")
        buf.write("\2\2\2\u01da\u01d8\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01de")
        buf.write("\3\2\2\2\u01dc\u01da\3\2\2\2\u01dd\u01cd\3\2\2\2\u01dd")
        buf.write("\u01ce\3\2\2\2\u01dd\u01da\3\2\2\2\u01de#\3\2\2\2\u01df")
        buf.write("\u01e0\7<\2\2\u01e0\u01e3\5d\63\2\u01e1\u01e2\7?\2\2\u01e2")
        buf.write("\u01e4\5d\63\2\u01e3\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2")
        buf.write("\u01e4%\3\2\2\2\u01e5\u01e8\5d\63\2\u01e6\u01e8\5v<\2")
        buf.write("\u01e7\u01e5\3\2\2\2\u01e7\u01e6\3\2\2\2\u01e8\u01f0\3")
        buf.write("\2\2\2\u01e9\u01ec\7;\2\2\u01ea\u01ed\5d\63\2\u01eb\u01ed")
        buf.write("\5v<\2\u01ec\u01ea\3\2\2\2\u01ec\u01eb\3\2\2\2\u01ed\u01ef")
        buf.write("\3\2\2\2\u01ee\u01e9\3\2\2\2\u01ef\u01f2\3\2\2\2\u01f0")
        buf.write("\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f4\3\2\2\2")
        buf.write("\u01f2\u01f0\3\2\2\2\u01f3\u01f5\7;\2\2\u01f4\u01f3\3")
        buf.write("\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\'\3\2\2\2\u01f6\u01f7")
        buf.write("\t\2\2\2\u01f7)\3\2\2\2\u01f8\u01f9\7&\2\2\u01f9\u01fa")
        buf.write("\5\u0096L\2\u01fa+\3\2\2\2\u01fb\u01fc\7\'\2\2\u01fc-")
        buf.write("\3\2\2\2\u01fd\u0203\5\60\31\2\u01fe\u0203\5\62\32\2\u01ff")
        buf.write("\u0203\5\64\33\2\u0200\u0203\58\35\2\u0201\u0203\5\66")
        buf.write("\34\2\u0202\u01fd\3\2\2\2\u0202\u01fe\3\2\2\2\u0202\u01ff")
        buf.write("\3\2\2\2\u0202\u0200\3\2\2\2\u0202\u0201\3\2\2\2\u0203")
        buf.write("/\3\2\2\2\u0204\u0205\7)\2\2\u0205\61\3\2\2\2\u0206\u0207")
        buf.write("\7(\2\2\u0207\63\3\2\2\2\u0208\u020a\7\n\2\2\u0209\u020b")
        buf.write("\5\u0098M\2\u020a\u0209\3\2\2\2\u020a\u020b\3\2\2\2\u020b")
        buf.write("\65\3\2\2\2\u020c\u020d\5\u00aaV\2\u020d\67\3\2\2\2\u020e")
        buf.write("\u0214\7\13\2\2\u020f\u0212\5d\63\2\u0210\u0211\7\f\2")
        buf.write("\2\u0211\u0213\5d\63\2\u0212\u0210\3\2\2\2\u0212\u0213")
        buf.write("\3\2\2\2\u0213\u0215\3\2\2\2\u0214\u020f\3\2\2\2\u0214")
        buf.write("\u0215\3\2\2\2\u02159\3\2\2\2\u0216\u0219\5<\37\2\u0217")
        buf.write("\u0219\5> \2\u0218\u0216\3\2\2\2\u0218\u0217\3\2\2\2\u0219")
        buf.write(";\3\2\2\2\u021a\u021b\7\r\2\2\u021b\u021c\5F$\2\u021c")
        buf.write("=\3\2\2\2\u021d\u022a\7\f\2\2\u021e\u0220\t\3\2\2\u021f")
        buf.write("\u021e\3\2\2\2\u0220\u0223\3\2\2\2\u0221\u021f\3\2\2\2")
        buf.write("\u0221\u0222\3\2\2\2\u0222\u0224\3\2\2\2\u0223\u0221\3")
        buf.write("\2\2\2\u0224\u022b\5H%\2\u0225\u0227\t\3\2\2\u0226\u0225")
        buf.write("\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u0226\3\2\2\2\u0228")
        buf.write("\u0229\3\2\2\2\u0229\u022b\3\2\2\2\u022a\u0221\3\2\2\2")
        buf.write("\u022a\u0226\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u0233\7")
        buf.write("\r\2\2\u022d\u0234\78\2\2\u022e\u022f\79\2\2\u022f\u0230")
        buf.write("\5D#\2\u0230\u0231\7:\2\2\u0231\u0234\3\2\2\2\u0232\u0234")
        buf.write("\5D#\2\u0233\u022d\3\2\2\2\u0233\u022e\3\2\2\2\u0233\u0232")
        buf.write("\3\2\2\2\u0234?\3\2\2\2\u0235\u0238\7-\2\2\u0236\u0237")
        buf.write("\7\16\2\2\u0237\u0239\7-\2\2\u0238\u0236\3\2\2\2\u0238")
        buf.write("\u0239\3\2\2\2\u0239A\3\2\2\2\u023a\u023d\5H%\2\u023b")
        buf.write("\u023c\7\16\2\2\u023c\u023e\7-\2\2\u023d\u023b\3\2\2\2")
        buf.write("\u023d\u023e\3\2\2\2\u023eC\3\2\2\2\u023f\u0244\5@!\2")
        buf.write("\u0240\u0241\7;\2\2\u0241\u0243\5@!\2\u0242\u0240\3\2")
        buf.write("\2\2\u0243\u0246\3\2\2\2\u0244\u0242\3\2\2\2\u0244\u0245")
        buf.write("\3\2\2\2\u0245\u0248\3\2\2\2\u0246\u0244\3\2\2\2\u0247")
        buf.write("\u0249\7;\2\2\u0248\u0247\3\2\2\2\u0248\u0249\3\2\2\2")
        buf.write("\u0249E\3\2\2\2\u024a\u024f\5B\"\2\u024b\u024c\7;\2\2")
        buf.write("\u024c\u024e\5B\"\2\u024d\u024b\3\2\2\2\u024e\u0251\3")
        buf.write("\2\2\2\u024f\u024d\3\2\2\2\u024f\u0250\3\2\2\2\u0250G")
        buf.write("\3\2\2\2\u0251\u024f\3\2\2\2\u0252\u0257\7-\2\2\u0253")
        buf.write("\u0254\7\66\2\2\u0254\u0256\7-\2\2\u0255\u0253\3\2\2\2")
        buf.write("\u0256\u0259\3\2\2\2\u0257\u0255\3\2\2\2\u0257\u0258\3")
        buf.write("\2\2\2\u0258I\3\2\2\2\u0259\u0257\3\2\2\2\u025a\u025b")
        buf.write("\7\17\2\2\u025b\u0260\7-\2\2\u025c\u025d\7;\2\2\u025d")
        buf.write("\u025f\7-\2\2\u025e\u025c\3\2\2\2\u025f\u0262\3\2\2\2")
        buf.write("\u0260\u025e\3\2\2\2\u0260\u0261\3\2\2\2\u0261K\3\2\2")
        buf.write("\2\u0262\u0260\3\2\2\2\u0263\u0264\7\20\2\2\u0264\u0269")
        buf.write("\7-\2\2\u0265\u0266\7;\2\2\u0266\u0268\7-\2\2\u0267\u0265")
        buf.write("\3\2\2\2\u0268\u026b\3\2\2\2\u0269\u0267\3\2\2\2\u0269")
        buf.write("\u026a\3\2\2\2\u026aM\3\2\2\2\u026b\u0269\3\2\2\2\u026c")
        buf.write("\u026d\7\21\2\2\u026d\u0270\5d\63\2\u026e\u026f\7;\2\2")
        buf.write("\u026f\u0271\5d\63\2\u0270\u026e\3\2\2\2\u0270\u0271\3")
        buf.write("\2\2\2\u0271O\3\2\2\2\u0272\u027d\5\u00b6\\\2\u0273\u027d")
        buf.write("\5T+\2\u0274\u027d\5V,\2\u0275\u027d\5X-\2\u0276\u027d")
        buf.write("\5Z.\2\u0277\u027d\5\\/\2\u0278\u027d\5\20\t\2\u0279\u027d")
        buf.write("\5\u009cO\2\u027a\u027d\5\f\7\2\u027b\u027d\5R*\2\u027c")
        buf.write("\u0272\3\2\2\2\u027c\u0273\3\2\2\2\u027c\u0274\3\2\2\2")
        buf.write("\u027c\u0275\3\2\2\2\u027c\u0276\3\2\2\2\u027c\u0277\3")
        buf.write("\2\2\2\u027c\u0278\3\2\2\2\u027c\u0279\3\2\2\2\u027c\u027a")
        buf.write("\3\2\2\2\u027c\u027b\3\2\2\2\u027dQ\3\2\2\2\u027e\u0282")
        buf.write("\7*\2\2\u027f\u0283\5\20\t\2\u0280\u0283\5\\/\2\u0281")
        buf.write("\u0283\5X-\2\u0282\u027f\3\2\2\2\u0282\u0280\3\2\2\2\u0282")
        buf.write("\u0281\3\2\2\2\u0283S\3\2\2\2\u0284\u0285\7\22\2\2\u0285")
        buf.write("\u0286\5d\63\2\u0286\u0287\7<\2\2\u0287\u028f\5b\62\2")
        buf.write("\u0288\u0289\7\23\2\2\u0289\u028a\5d\63\2\u028a\u028b")
        buf.write("\7<\2\2\u028b\u028c\5b\62\2\u028c\u028e\3\2\2\2\u028d")
        buf.write("\u0288\3\2\2\2\u028e\u0291\3\2\2\2\u028f\u028d\3\2\2\2")
        buf.write("\u028f\u0290\3\2\2\2\u0290\u0295\3\2\2\2\u0291\u028f\3")
        buf.write("\2\2\2\u0292\u0293\7\24\2\2\u0293\u0294\7<\2\2\u0294\u0296")
        buf.write("\5b\62\2\u0295\u0292\3\2\2\2\u0295\u0296\3\2\2\2\u0296")
        buf.write("U\3\2\2\2\u0297\u0298\7\25\2\2\u0298\u0299\5d\63\2\u0299")
        buf.write("\u029a\7<\2\2\u029a\u029e\5b\62\2\u029b\u029c\7\24\2\2")
        buf.write("\u029c\u029d\7<\2\2\u029d\u029f\5b\62\2\u029e\u029b\3")
        buf.write("\2\2\2\u029e\u029f\3\2\2\2\u029fW\3\2\2\2\u02a0\u02a1")
        buf.write("\7\26\2\2\u02a1\u02a2\5\u0096L\2\u02a2\u02a3\7\27\2\2")
        buf.write("\u02a3\u02a4\5\u0098M\2\u02a4\u02a5\7<\2\2\u02a5\u02a9")
        buf.write("\5b\62\2\u02a6\u02a7\7\24\2\2\u02a7\u02a8\7<\2\2\u02a8")
        buf.write("\u02aa\5b\62\2\u02a9\u02a6\3\2\2\2\u02a9\u02aa\3\2\2\2")
        buf.write("\u02aaY\3\2\2\2\u02ab\u02ac\7\30\2\2\u02ac\u02ad\7<\2")
        buf.write("\2\u02ad\u02c3\5b\62\2\u02ae\u02af\5`\61\2\u02af\u02b0")
        buf.write("\7<\2\2\u02b0\u02b1\5b\62\2\u02b1\u02b3\3\2\2\2\u02b2")
        buf.write("\u02ae\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b2\3\2\2\2")
        buf.write("\u02b4\u02b5\3\2\2\2\u02b5\u02b9\3\2\2\2\u02b6\u02b7\7")
        buf.write("\24\2\2\u02b7\u02b8\7<\2\2\u02b8\u02ba\5b\62\2\u02b9\u02b6")
        buf.write("\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02be\3\2\2\2\u02bb")
        buf.write("\u02bc\7\31\2\2\u02bc\u02bd\7<\2\2\u02bd\u02bf\5b\62\2")
        buf.write("\u02be\u02bb\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c4\3")
        buf.write("\2\2\2\u02c0\u02c1\7\31\2\2\u02c1\u02c2\7<\2\2\u02c2\u02c4")
        buf.write("\5b\62\2\u02c3\u02b2\3\2\2\2\u02c3\u02c0\3\2\2\2\u02c4")
        buf.write("[\3\2\2\2\u02c5\u02c6\7\32\2\2\u02c6\u02cb\5^\60\2\u02c7")
        buf.write("\u02c8\7;\2\2\u02c8\u02ca\5^\60\2\u02c9\u02c7\3\2\2\2")
        buf.write("\u02ca\u02cd\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cb\u02cc\3")
        buf.write("\2\2\2\u02cc\u02ce\3\2\2\2\u02cd\u02cb\3\2\2\2\u02ce\u02cf")
        buf.write("\7<\2\2\u02cf\u02d0\5b\62\2\u02d0]\3\2\2\2\u02d1\u02d4")
        buf.write("\5d\63\2\u02d2\u02d3\7\16\2\2\u02d3\u02d5\5x=\2\u02d4")
        buf.write("\u02d2\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5_\3\2\2\2\u02d6")
        buf.write("\u02dc\7\33\2\2\u02d7\u02da\5d\63\2\u02d8\u02d9\7\16\2")
        buf.write("\2\u02d9\u02db\7-\2\2\u02da\u02d8\3\2\2\2\u02da\u02db")
        buf.write("\3\2\2\2\u02db\u02dd\3\2\2\2\u02dc\u02d7\3\2\2\2\u02dc")
        buf.write("\u02dd\3\2\2\2\u02dda\3\2\2\2\u02de\u02e9\5\36\20\2\u02df")
        buf.write("\u02e0\7,\2\2\u02e0\u02e2\7g\2\2\u02e1\u02e3\5\34\17\2")
        buf.write("\u02e2\u02e1\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e2\3")
        buf.write("\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7")
        buf.write("\7h\2\2\u02e7\u02e9\3\2\2\2\u02e8\u02de\3\2\2\2\u02e8")
        buf.write("\u02df\3\2\2\2\u02e9c\3\2\2\2\u02ea\u02f0\5l\67\2\u02eb")
        buf.write("\u02ec\7\22\2\2\u02ec\u02ed\5l\67\2\u02ed\u02ee\7\24\2")
        buf.write("\2\u02ee\u02ef\5d\63\2\u02ef\u02f1\3\2\2\2\u02f0\u02eb")
        buf.write("\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f5\3\2\2\2\u02f2")
        buf.write("\u02f5\5h\65\2\u02f3\u02f5\5\u00b4[\2\u02f4\u02ea\3\2")
        buf.write("\2\2\u02f4\u02f2\3\2\2\2\u02f4\u02f3\3\2\2\2\u02f5e\3")
        buf.write("\2\2\2\u02f6\u02f9\5l\67\2\u02f7\u02f9\5j\66\2\u02f8\u02f6")
        buf.write("\3\2\2\2\u02f8\u02f7\3\2\2\2\u02f9g\3\2\2\2\u02fa\u02fc")
        buf.write("\7\34\2\2\u02fb\u02fd\5\30\r\2\u02fc\u02fb\3\2\2\2\u02fc")
        buf.write("\u02fd\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u02ff\7<\2\2")
        buf.write("\u02ff\u0300\5d\63\2\u0300i\3\2\2\2\u0301\u0303\7\34\2")
        buf.write("\2\u0302\u0304\5\30\r\2\u0303\u0302\3\2\2\2\u0303\u0304")
        buf.write("\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u0306\7<\2\2\u0306")
        buf.write("\u0307\5f\64\2\u0307k\3\2\2\2\u0308\u030d\5n8\2\u0309")
        buf.write("\u030a\7\35\2\2\u030a\u030c\5n8\2\u030b\u0309\3\2\2\2")
        buf.write("\u030c\u030f\3\2\2\2\u030d\u030b\3\2\2\2\u030d\u030e\3")
        buf.write("\2\2\2\u030em\3\2\2\2\u030f\u030d\3\2\2\2\u0310\u0315")
        buf.write("\5p9\2\u0311\u0312\7\36\2\2\u0312\u0314\5p9\2\u0313\u0311")
        buf.write("\3\2\2\2\u0314\u0317\3\2\2\2\u0315\u0313\3\2\2\2\u0315")
        buf.write("\u0316\3\2\2\2\u0316o\3\2\2\2\u0317\u0315\3\2\2\2\u0318")
        buf.write("\u0319\7\37\2\2\u0319\u031c\5p9\2\u031a\u031c\5r:\2\u031b")
        buf.write("\u0318\3\2\2\2\u031b\u031a\3\2\2\2\u031cq\3\2\2\2\u031d")
        buf.write("\u0323\5x=\2\u031e\u031f\5t;\2\u031f\u0320\5x=\2\u0320")
        buf.write("\u0322\3\2\2\2\u0321\u031e\3\2\2\2\u0322\u0325\3\2\2\2")
        buf.write("\u0323\u0321\3\2\2\2\u0323\u0324\3\2\2\2\u0324s\3\2\2")
        buf.write("\2\u0325\u0323\3\2\2\2\u0326\u0334\7O\2\2\u0327\u0334")
        buf.write("\7P\2\2\u0328\u0334\7Q\2\2\u0329\u0334\7R\2\2\u032a\u0334")
        buf.write("\7S\2\2\u032b\u0334\7T\2\2\u032c\u0334\7U\2\2\u032d\u0334")
        buf.write("\7\27\2\2\u032e\u032f\7\37\2\2\u032f\u0334\7\27\2\2\u0330")
        buf.write("\u0334\7 \2\2\u0331\u0332\7 \2\2\u0332\u0334\7\37\2\2")
        buf.write("\u0333\u0326\3\2\2\2\u0333\u0327\3\2\2\2\u0333\u0328\3")
        buf.write("\2\2\2\u0333\u0329\3\2\2\2\u0333\u032a\3\2\2\2\u0333\u032b")
        buf.write("\3\2\2\2\u0333\u032c\3\2\2\2\u0333\u032d\3\2\2\2\u0333")
        buf.write("\u032e\3\2\2\2\u0333\u0330\3\2\2\2\u0333\u0331\3\2\2\2")
        buf.write("\u0334u\3\2\2\2\u0335\u0336\78\2\2\u0336\u0337\5x=\2\u0337")
        buf.write("w\3\2\2\2\u0338\u033d\5z>\2\u0339\u033a\7B\2\2\u033a\u033c")
        buf.write("\5z>\2\u033b\u0339\3\2\2\2\u033c\u033f\3\2\2\2\u033d\u033b")
        buf.write("\3\2\2\2\u033d\u033e\3\2\2\2\u033ey\3\2\2\2\u033f\u033d")
        buf.write("\3\2\2\2\u0340\u0345\5|?\2\u0341\u0342\7C\2\2\u0342\u0344")
        buf.write("\5|?\2\u0343\u0341\3\2\2\2\u0344\u0347\3\2\2\2\u0345\u0343")
        buf.write("\3\2\2\2\u0345\u0346\3\2\2\2\u0346{\3\2\2\2\u0347\u0345")
        buf.write("\3\2\2\2\u0348\u034d\5~@\2\u0349\u034a\7D\2\2\u034a\u034c")
        buf.write("\5~@\2\u034b\u0349\3\2\2\2\u034c\u034f\3\2\2\2\u034d\u034b")
        buf.write("\3\2\2\2\u034d\u034e\3\2\2\2\u034e}\3\2\2\2\u034f\u034d")
        buf.write("\3\2\2\2\u0350\u0355\5\u0080A\2\u0351\u0352\t\4\2\2\u0352")
        buf.write("\u0354\5\u0080A\2\u0353\u0351\3\2\2\2\u0354\u0357\3\2")
        buf.write("\2\2\u0355\u0353\3\2\2\2\u0355\u0356\3\2\2\2\u0356\177")
        buf.write("\3\2\2\2\u0357\u0355\3\2\2\2\u0358\u035d\5\u0082B\2\u0359")
        buf.write("\u035a\t\5\2\2\u035a\u035c\5\u0082B\2\u035b\u0359\3\2")
        buf.write("\2\2\u035c\u035f\3\2\2\2\u035d\u035b\3\2\2\2\u035d\u035e")
        buf.write("\3\2\2\2\u035e\u0081\3\2\2\2\u035f\u035d\3\2\2\2\u0360")
        buf.write("\u0365\5\u0084C\2\u0361\u0362\t\6\2\2\u0362\u0364\5\u0084")
        buf.write("C\2\u0363\u0361\3\2\2\2\u0364\u0367\3\2\2\2\u0365\u0363")
        buf.write("\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0083\3\2\2\2\u0367")
        buf.write("\u0365\3\2\2\2\u0368\u0369\t\7\2\2\u0369\u036c\5\u0084")
        buf.write("C\2\u036a\u036c\5\u0086D\2\u036b\u0368\3\2\2\2\u036b\u036a")
        buf.write("\3\2\2\2\u036c\u0085\3\2\2\2\u036d\u0370\5\u0088E\2\u036e")
        buf.write("\u036f\7>\2\2\u036f\u0371\5\u0084C\2\u0370\u036e\3\2\2")
        buf.write("\2\u0370\u0371\3\2\2\2\u0371\u0087\3\2\2\2\u0372\u0374")
        buf.write("\7+\2\2\u0373\u0372\3\2\2\2\u0373\u0374\3\2\2\2\u0374")
        buf.write("\u0375\3\2\2\2\u0375\u0379\5\u008aF\2\u0376\u0378\5\u008e")
        buf.write("H\2\u0377\u0376\3\2\2\2\u0378\u037b\3\2\2\2\u0379\u0377")
        buf.write("\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u0089\3\2\2\2\u037b")
        buf.write("\u0379\3\2\2\2\u037c\u037f\79\2\2\u037d\u0380\5\u00aa")
        buf.write("V\2\u037e\u0380\5\u008cG\2\u037f\u037d\3\2\2\2\u037f\u037e")
        buf.write("\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0381\3\2\2\2\u0381")
        buf.write("\u0399\7:\2\2\u0382\u0384\7@\2\2\u0383\u0385\5\u008cG")
        buf.write("\2\u0384\u0383\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0386")
        buf.write("\3\2\2\2\u0386\u0399\7A\2\2\u0387\u0389\7M\2\2\u0388\u038a")
        buf.write("\5\u009aN\2\u0389\u0388\3\2\2\2\u0389\u038a\3\2\2\2\u038a")
        buf.write("\u038b\3\2\2\2\u038b\u0399\7N\2\2\u038c\u0399\5\u00ae")
        buf.write("X\2\u038d\u0399\7-\2\2\u038e\u0399\7\7\2\2\u038f\u0391")
        buf.write("\7\6\2\2\u0390\u038f\3\2\2\2\u0391\u0392\3\2\2\2\u0392")
        buf.write("\u0390\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0399\3\2\2\2")
        buf.write("\u0394\u0399\7\67\2\2\u0395\u0399\7!\2\2\u0396\u0399\7")
        buf.write("\"\2\2\u0397\u0399\7#\2\2\u0398\u037c\3\2\2\2\u0398\u0382")
        buf.write("\3\2\2\2\u0398\u0387\3\2\2\2\u0398\u038c\3\2\2\2\u0398")
        buf.write("\u038d\3\2\2\2\u0398\u038e\3\2\2\2\u0398\u0390\3\2\2\2")
        buf.write("\u0398\u0394\3\2\2\2\u0398\u0395\3\2\2\2\u0398\u0396\3")
        buf.write("\2\2\2\u0398\u0397\3\2\2\2\u0399\u008b\3\2\2\2\u039a\u039d")
        buf.write("\5d\63\2\u039b\u039d\5v<\2\u039c\u039a\3\2\2\2\u039c\u039b")
        buf.write("\3\2\2\2\u039d\u03ac\3\2\2\2\u039e\u03ad\5\u00a4S\2\u039f")
        buf.write("\u03a2\7;\2\2\u03a0\u03a3\5d\63\2\u03a1\u03a3\5v<\2\u03a2")
        buf.write("\u03a0\3\2\2\2\u03a2\u03a1\3\2\2\2\u03a3\u03a5\3\2\2\2")
        buf.write("\u03a4\u039f\3\2\2\2\u03a5\u03a8\3\2\2\2\u03a6\u03a4\3")
        buf.write("\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03aa\3\2\2\2\u03a8\u03a6")
        buf.write("\3\2\2\2\u03a9\u03ab\7;\2\2\u03aa\u03a9\3\2\2\2\u03aa")
        buf.write("\u03ab\3\2\2\2\u03ab\u03ad\3\2\2\2\u03ac\u039e\3\2\2\2")
        buf.write("\u03ac\u03a6\3\2\2\2\u03ad\u008d\3\2\2\2\u03ae\u03b0\7")
        buf.write("9\2\2\u03af\u03b1\5\u009eP\2\u03b0\u03af\3\2\2\2\u03b0")
        buf.write("\u03b1\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03ba\7:\2\2")
        buf.write("\u03b3\u03b4\7@\2\2\u03b4\u03b5\5\u0090I\2\u03b5\u03b6")
        buf.write("\7A\2\2\u03b6\u03ba\3\2\2\2\u03b7\u03b8\7\66\2\2\u03b8")
        buf.write("\u03ba\7-\2\2\u03b9\u03ae\3\2\2\2\u03b9\u03b3\3\2\2\2")
        buf.write("\u03b9\u03b7\3\2\2\2\u03ba\u008f\3\2\2\2\u03bb\u03c0\5")
        buf.write("\u0092J\2\u03bc\u03bd\7;\2\2\u03bd\u03bf\5\u0092J\2\u03be")
        buf.write("\u03bc\3\2\2\2\u03bf\u03c2\3\2\2\2\u03c0\u03be\3\2\2\2")
        buf.write("\u03c0\u03c1\3\2\2\2\u03c1\u03c4\3\2\2\2\u03c2\u03c0\3")
        buf.write("\2\2\2\u03c3\u03c5\7;\2\2\u03c4\u03c3\3\2\2\2\u03c4\u03c5")
        buf.write("\3\2\2\2\u03c5\u0091\3\2\2\2\u03c6\u03d2\5d\63\2\u03c7")
        buf.write("\u03c9\5d\63\2\u03c8\u03c7\3\2\2\2\u03c8\u03c9\3\2\2\2")
        buf.write("\u03c9\u03ca\3\2\2\2\u03ca\u03cc\7<\2\2\u03cb\u03cd\5")
        buf.write("d\63\2\u03cc\u03cb\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03cf")
        buf.write("\3\2\2\2\u03ce\u03d0\5\u0094K\2\u03cf\u03ce\3\2\2\2\u03cf")
        buf.write("\u03d0\3\2\2\2\u03d0\u03d2\3\2\2\2\u03d1\u03c6\3\2\2\2")
        buf.write("\u03d1\u03c8\3\2\2\2\u03d2\u0093\3\2\2\2\u03d3\u03d5\7")
        buf.write("<\2\2\u03d4\u03d6\5d\63\2\u03d5\u03d4\3\2\2\2\u03d5\u03d6")
        buf.write("\3\2\2\2\u03d6\u0095\3\2\2\2\u03d7\u03da\5x=\2\u03d8\u03da")
        buf.write("\5v<\2\u03d9\u03d7\3\2\2\2\u03d9\u03d8\3\2\2\2\u03da\u03e2")
        buf.write("\3\2\2\2\u03db\u03de\7;\2\2\u03dc\u03df\5x=\2\u03dd\u03df")
        buf.write("\5v<\2\u03de\u03dc\3\2\2\2\u03de\u03dd\3\2\2\2\u03df\u03e1")
        buf.write("\3\2\2\2\u03e0\u03db\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2")
        buf.write("\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e6\3\2\2\2")
        buf.write("\u03e4\u03e2\3\2\2\2\u03e5\u03e7\7;\2\2\u03e6\u03e5\3")
        buf.write("\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u0097\3\2\2\2\u03e8\u03ed")
        buf.write("\5d\63\2\u03e9\u03ea\7;\2\2\u03ea\u03ec\5d\63\2\u03eb")
        buf.write("\u03e9\3\2\2\2\u03ec\u03ef\3\2\2\2\u03ed\u03eb\3\2\2\2")
        buf.write("\u03ed\u03ee\3\2\2\2\u03ee\u03f1\3\2\2\2\u03ef\u03ed\3")
        buf.write("\2\2\2\u03f0\u03f2\7;\2\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2")
        buf.write("\3\2\2\2\u03f2\u0099\3\2\2\2\u03f3\u03f4\5d\63\2\u03f4")
        buf.write("\u03f5\7<\2\2\u03f5\u03f6\5d\63\2\u03f6\u03fa\3\2\2\2")
        buf.write("\u03f7\u03f8\7>\2\2\u03f8\u03fa\5x=\2\u03f9\u03f3\3\2")
        buf.write("\2\2\u03f9\u03f7\3\2\2\2\u03fa\u040d\3\2\2\2\u03fb\u040e")
        buf.write("\5\u00a4S\2\u03fc\u0403\7;\2\2\u03fd\u03fe\5d\63\2\u03fe")
        buf.write("\u03ff\7<\2\2\u03ff\u0400\5d\63\2\u0400\u0404\3\2\2\2")
        buf.write("\u0401\u0402\7>\2\2\u0402\u0404\5x=\2\u0403\u03fd\3\2")
        buf.write("\2\2\u0403\u0401\3\2\2\2\u0404\u0406\3\2\2\2\u0405\u03fc")
        buf.write("\3\2\2\2\u0406\u0409\3\2\2\2\u0407\u0405\3\2\2\2\u0407")
        buf.write("\u0408\3\2\2\2\u0408\u040b\3\2\2\2\u0409\u0407\3\2\2\2")
        buf.write("\u040a\u040c\7;\2\2\u040b\u040a\3\2\2\2\u040b\u040c\3")
        buf.write("\2\2\2\u040c\u040e\3\2\2\2\u040d\u03fb\3\2\2\2\u040d\u0407")
        buf.write("\3\2\2\2\u040e\u0424\3\2\2\2\u040f\u0412\5d\63\2\u0410")
        buf.write("\u0412\5v<\2\u0411\u040f\3\2\2\2\u0411\u0410\3\2\2\2\u0412")
        buf.write("\u0421\3\2\2\2\u0413\u0422\5\u00a4S\2\u0414\u0417\7;\2")
        buf.write("\2\u0415\u0418\5d\63\2\u0416\u0418\5v<\2\u0417\u0415\3")
        buf.write("\2\2\2\u0417\u0416\3\2\2\2\u0418\u041a\3\2\2\2\u0419\u0414")
        buf.write("\3\2\2\2\u041a\u041d\3\2\2\2\u041b\u0419\3\2\2\2\u041b")
        buf.write("\u041c\3\2\2\2\u041c\u041f\3\2\2\2\u041d\u041b\3\2\2\2")
        buf.write("\u041e\u0420\7;\2\2\u041f\u041e\3\2\2\2\u041f\u0420\3")
        buf.write("\2\2\2\u0420\u0422\3\2\2\2\u0421\u0413\3\2\2\2\u0421\u041b")
        buf.write("\3\2\2\2\u0422\u0424\3\2\2\2\u0423\u03f9\3\2\2\2\u0423")
        buf.write("\u0411\3\2\2\2\u0424\u009b\3\2\2\2\u0425\u0426\7$\2\2")
        buf.write("\u0426\u042c\7-\2\2\u0427\u0429\79\2\2\u0428\u042a\5\u009e")
        buf.write("P\2\u0429\u0428\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042b")
        buf.write("\3\2\2\2\u042b\u042d\7:\2\2\u042c\u0427\3\2\2\2\u042c")
        buf.write("\u042d\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u042f\7<\2\2")
        buf.write("\u042f\u0430\5b\62\2\u0430\u009d\3\2\2\2\u0431\u0436\5")
        buf.write("\u00a0Q\2\u0432\u0433\7;\2\2\u0433\u0435\5\u00a0Q\2\u0434")
        buf.write("\u0432\3\2\2\2\u0435\u0438\3\2\2\2\u0436\u0434\3\2\2\2")
        buf.write("\u0436\u0437\3\2\2\2\u0437\u043a\3\2\2\2\u0438\u0436\3")
        buf.write("\2\2\2\u0439\u043b\7;\2\2\u043a\u0439\3\2\2\2\u043a\u043b")
        buf.write("\3\2\2\2\u043b\u009f\3\2\2\2\u043c\u043e\5d\63\2\u043d")
        buf.write("\u043f\5\u00a4S\2\u043e\u043d\3\2\2\2\u043e\u043f\3\2")
        buf.write("\2\2\u043f\u0449\3\2\2\2\u0440\u0441\5d\63\2\u0441\u0442")
        buf.write("\7?\2\2\u0442\u0443\5d\63\2\u0443\u0449\3\2\2\2\u0444")
        buf.write("\u0445\7>\2\2\u0445\u0449\5d\63\2\u0446\u0447\78\2\2\u0447")
        buf.write("\u0449\5d\63\2\u0448\u043c\3\2\2\2\u0448\u0440\3\2\2\2")
        buf.write("\u0448\u0444\3\2\2\2\u0448\u0446\3\2\2\2\u0449\u00a1\3")
        buf.write("\2\2\2\u044a\u044d\5\u00a4S\2\u044b\u044d\5\u00a6T\2\u044c")
        buf.write("\u044a\3\2\2\2\u044c\u044b\3\2\2\2\u044d\u00a3\3\2\2\2")
        buf.write("\u044e\u0450\7*\2\2\u044f\u044e\3\2\2\2\u044f\u0450\3")
        buf.write("\2\2\2\u0450\u0451\3\2\2\2\u0451\u0452\7\26\2\2\u0452")
        buf.write("\u0453\5\u0096L\2\u0453\u0454\7\27\2\2\u0454\u0456\5l")
        buf.write("\67\2\u0455\u0457\5\u00a2R\2\u0456\u0455\3\2\2\2\u0456")
        buf.write("\u0457\3\2\2\2\u0457\u00a5\3\2\2\2\u0458\u0459\7\22\2")
        buf.write("\2\u0459\u045b\5f\64\2\u045a\u045c\5\u00a2R\2\u045b\u045a")
        buf.write("\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u00a7\3\2\2\2\u045d")
        buf.write("\u045e\7-\2\2\u045e\u00a9\3\2\2\2\u045f\u0461\7%\2\2\u0460")
        buf.write("\u0462\5\u00acW\2\u0461\u0460\3\2\2\2\u0461\u0462\3\2")
        buf.write("\2\2\u0462\u00ab\3\2\2\2\u0463\u0464\7\f\2\2\u0464\u0467")
        buf.write("\5d\63\2\u0465\u0467\5\u0098M\2\u0466\u0463\3\2\2\2\u0466")
        buf.write("\u0465\3\2\2\2\u0467\u00ad\3\2\2\2\u0468\u046b\5\u00b0")
        buf.write("Y\2\u0469\u046b\5\u00b2Z\2\u046a\u0468\3\2\2\2\u046a\u0469")
        buf.write("\3\2\2\2\u046b\u00af\3\2\2\2\u046c\u046d\7\3\2\2\u046d")
        buf.write("\u00b1\3\2\2\2\u046e\u046f\7\4\2\2\u046f\u00b3\3\2\2\2")
        buf.write("\u0470\u0471\7\3\2\2\u0471\u0472\7-\2\2\u0472\u00b5\3")
        buf.write("\2\2\2\u0473\u0476\5\u00b8]\2\u0474\u0476\5\u00ba^\2\u0475")
        buf.write("\u0473\3\2\2\2\u0475\u0474\3\2\2\2\u0476\u00b7\3\2\2\2")
        buf.write("\u0477\u0478\7\4\2\2\u0478\u0479\7<\2\2\u0479\u047a\5")
        buf.write("b\62\2\u047a\u00b9\3\2\2\2\u047b\u047c\7\5\2\2\u047c\u047d")
        buf.write("\7<\2\2\u047d\u047e\5b\62\2\u047e\u00bb\3\2\2\2\u00ac")
        buf.write("\u00c1\u00c5\u00c7\u00d0\u00d9\u00dc\u00e3\u00e9\u00f3")
        buf.write("\u00fa\u0101\u0107\u010b\u0111\u0117\u011b\u0122\u0124")
        buf.write("\u0126\u012b\u012d\u012f\u0133\u0139\u013d\u0144\u0146")
        buf.write("\u0148\u014d\u014f\u0154\u0157\u015c\u0162\u0166\u016c")
        buf.write("\u0172\u0176\u017d\u017f\u0181\u0186\u0188\u018a\u018e")
        buf.write("\u0194\u0198\u019f\u01a1\u01a3\u01a8\u01aa\u01ae\u01b2")
        buf.write("\u01b9\u01bd\u01ca\u01d1\u01d6\u01da\u01dd\u01e3\u01e7")
        buf.write("\u01ec\u01f0\u01f4\u0202\u020a\u0212\u0214\u0218\u0221")
        buf.write("\u0228\u022a\u0233\u0238\u023d\u0244\u0248\u024f\u0257")
        buf.write("\u0260\u0269\u0270\u027c\u0282\u028f\u0295\u029e\u02a9")
        buf.write("\u02b4\u02b9\u02be\u02c3\u02cb\u02d4\u02da\u02dc\u02e4")
        buf.write("\u02e8\u02f0\u02f4\u02f8\u02fc\u0303\u030d\u0315\u031b")
        buf.write("\u0323\u0333\u033d\u0345\u034d\u0355\u035d\u0365\u036b")
        buf.write("\u0370\u0373\u0379\u037f\u0384\u0389\u0392\u0398\u039c")
        buf.write("\u03a2\u03a6\u03aa\u03ac\u03b0\u03b9\u03c0\u03c4\u03c8")
        buf.write("\u03cc\u03cf\u03d1\u03d5\u03d9\u03de\u03e2\u03e6\u03ed")
        buf.write("\u03f1\u03f9\u0403\u0407\u040b\u040d\u0411\u0417\u041b")
        buf.write("\u041f\u0421\u0423\u0429\u042c\u0436\u043a\u043e\u0448")
        buf.write("\u044c\u044f\u0456\u045b\u0461\u0466\u046a\u0475")
        return buf.getvalue()


class Python3Parser ( Parser ):

    grammarFileName = "Python3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'?'", "'??'", "'?_'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'def'", "'return'", "'raise'", "'from'", 
                     "'import'", "'as'", "'global'", "'nonlocal'", "'assert'", 
                     "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'", 
                     "'try'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'None'", "'True'", 
                     "'False'", "'class'", "'yield'", "'del'", "'pass'", 
                     "'continue'", "'break'", "'async'", "'await'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'.'", "'...'", "'*'", "'('", "')'", "','", 
                     "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", 
                     "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", 
                     "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", 
                     "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", 
                     "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'<<='", "'>>='", "'**='", "'//='" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "STRING", "NUMBER", "INTEGER", "DEF", "RETURN", "RAISE", 
                      "FROM", "IMPORT", "AS", "GLOBAL", "NONLOCAL", "ASSERT", 
                      "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", "TRY", 
                      "FINALLY", "WITH", "EXCEPT", "LAMBDA", "OR", "AND", 
                      "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", "YIELD", 
                      "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
                      "NEWLINE", "NAME", "STRING_LITERAL", "BYTES_LITERAL", 
                      "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", 
                      "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS", 
                      "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", 
                      "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", 
                      "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
                      "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", 
                      "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS", 
                      "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", 
                      "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", 
                      "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                      "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", 
                      "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", 
                      "INDENT", "DEDENT" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_async_funcdef = 6
    RULE_funcdef = 7
    RULE_parameters = 8
    RULE_typedargslist = 9
    RULE_tfpdef = 10
    RULE_varargslist = 11
    RULE_vfpdef = 12
    RULE_stmt = 13
    RULE_simple_stmt = 14
    RULE_small_stmt = 15
    RULE_expr_stmt = 16
    RULE_annassign = 17
    RULE_testlist_star_expr = 18
    RULE_augassign = 19
    RULE_del_stmt = 20
    RULE_pass_stmt = 21
    RULE_flow_stmt = 22
    RULE_break_stmt = 23
    RULE_continue_stmt = 24
    RULE_return_stmt = 25
    RULE_yield_stmt = 26
    RULE_raise_stmt = 27
    RULE_import_stmt = 28
    RULE_import_name = 29
    RULE_import_from = 30
    RULE_import_as_name = 31
    RULE_dotted_as_name = 32
    RULE_import_as_names = 33
    RULE_dotted_as_names = 34
    RULE_dotted_name = 35
    RULE_global_stmt = 36
    RULE_nonlocal_stmt = 37
    RULE_assert_stmt = 38
    RULE_compound_stmt = 39
    RULE_async_stmt = 40
    RULE_if_stmt = 41
    RULE_while_stmt = 42
    RULE_for_stmt = 43
    RULE_try_stmt = 44
    RULE_with_stmt = 45
    RULE_with_item = 46
    RULE_except_clause = 47
    RULE_suite = 48
    RULE_test = 49
    RULE_test_nocond = 50
    RULE_lambdef = 51
    RULE_lambdef_nocond = 52
    RULE_or_test = 53
    RULE_and_test = 54
    RULE_not_test = 55
    RULE_comparison = 56
    RULE_comp_op = 57
    RULE_star_expr = 58
    RULE_expr = 59
    RULE_xor_expr = 60
    RULE_and_expr = 61
    RULE_shift_expr = 62
    RULE_arith_expr = 63
    RULE_term = 64
    RULE_factor = 65
    RULE_power = 66
    RULE_atom_expr = 67
    RULE_atom = 68
    RULE_testlist_comp = 69
    RULE_trailer = 70
    RULE_subscriptlist = 71
    RULE_subscript = 72
    RULE_sliceop = 73
    RULE_exprlist = 74
    RULE_testlist = 75
    RULE_dictorsetmaker = 76
    RULE_classdef = 77
    RULE_arglist = 78
    RULE_argument = 79
    RULE_comp_iter = 80
    RULE_comp_for = 81
    RULE_comp_if = 82
    RULE_encoding_decl = 83
    RULE_yield_expr = 84
    RULE_yield_arg = 85
    RULE_expr_hole = 86
    RULE_simple_hole = 87
    RULE_double_hole = 88
    RULE_var_hole = 89
    RULE_compound_hole = 90
    RULE_simple_compound_hole = 91
    RULE_multiple_compound_hole = 92

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "async_funcdef", "funcdef", 
                   "parameters", "typedargslist", "tfpdef", "varargslist", 
                   "vfpdef", "stmt", "simple_stmt", "small_stmt", "expr_stmt", 
                   "annassign", "testlist_star_expr", "augassign", "del_stmt", 
                   "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", 
                   "with_stmt", "with_item", "except_clause", "suite", "test", 
                   "test_nocond", "lambdef", "lambdef_nocond", "or_test", 
                   "and_test", "not_test", "comparison", "comp_op", "star_expr", 
                   "expr", "xor_expr", "and_expr", "shift_expr", "arith_expr", 
                   "term", "factor", "power", "atom_expr", "atom", "testlist_comp", 
                   "trailer", "subscriptlist", "subscript", "sliceop", "exprlist", 
                   "testlist", "dictorsetmaker", "classdef", "arglist", 
                   "argument", "comp_iter", "comp_for", "comp_if", "encoding_decl", 
                   "yield_expr", "yield_arg", "expr_hole", "simple_hole", 
                   "double_hole", "var_hole", "compound_hole", "simple_compound_hole", 
                   "multiple_compound_hole" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    STRING=4
    NUMBER=5
    INTEGER=6
    DEF=7
    RETURN=8
    RAISE=9
    FROM=10
    IMPORT=11
    AS=12
    GLOBAL=13
    NONLOCAL=14
    ASSERT=15
    IF=16
    ELIF=17
    ELSE=18
    WHILE=19
    FOR=20
    IN=21
    TRY=22
    FINALLY=23
    WITH=24
    EXCEPT=25
    LAMBDA=26
    OR=27
    AND=28
    NOT=29
    IS=30
    NONE=31
    TRUE=32
    FALSE=33
    CLASS=34
    YIELD=35
    DEL=36
    PASS=37
    CONTINUE=38
    BREAK=39
    ASYNC=40
    AWAIT=41
    NEWLINE=42
    NAME=43
    STRING_LITERAL=44
    BYTES_LITERAL=45
    DECIMAL_INTEGER=46
    OCT_INTEGER=47
    HEX_INTEGER=48
    BIN_INTEGER=49
    FLOAT_NUMBER=50
    IMAG_NUMBER=51
    DOT=52
    ELLIPSIS=53
    STAR=54
    OPEN_PAREN=55
    CLOSE_PAREN=56
    COMMA=57
    COLON=58
    SEMI_COLON=59
    POWER=60
    ASSIGN=61
    OPEN_BRACK=62
    CLOSE_BRACK=63
    OR_OP=64
    XOR=65
    AND_OP=66
    LEFT_SHIFT=67
    RIGHT_SHIFT=68
    ADD=69
    MINUS=70
    DIV=71
    MOD=72
    IDIV=73
    NOT_OP=74
    OPEN_BRACE=75
    CLOSE_BRACE=76
    LESS_THAN=77
    GREATER_THAN=78
    EQUALS=79
    GT_EQ=80
    LT_EQ=81
    NOT_EQ_1=82
    NOT_EQ_2=83
    AT=84
    ARROW=85
    ADD_ASSIGN=86
    SUB_ASSIGN=87
    MULT_ASSIGN=88
    AT_ASSIGN=89
    DIV_ASSIGN=90
    MOD_ASSIGN=91
    AND_ASSIGN=92
    OR_ASSIGN=93
    XOR_ASSIGN=94
    LEFT_SHIFT_ASSIGN=95
    RIGHT_SHIFT_ASSIGN=96
    POWER_ASSIGN=97
    IDIV_ASSIGN=98
    SKIP_=99
    UNKNOWN_CHAR=100
    INDENT=101
    DEDENT=102

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = Python3Parser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 186
                self.match(Python3Parser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 187
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 188
                self.compound_stmt()
                self.state = 189
                self.match(Python3Parser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.T__2) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)) | (1 << (Python3Parser.AT - 69)))) != 0):
                self.state = 195
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.NEWLINE]:
                    self.state = 193
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.T__2, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.DEF, Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR, Python3Parser.TRY, Python3Parser.WITH, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.CLASS, Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK, Python3Parser.ASYNC, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.AT]:
                    self.state = 194
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 200
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = Python3Parser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self.testlist()
            self.state = 206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.NEWLINE:
                self.state = 203
                self.match(Python3Parser.NEWLINE)
                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 209
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = Python3Parser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(Python3Parser.AT)
            self.state = 212
            self.dotted_name()
            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 213
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)))) != 0):
                    self.state = 214
                    self.arglist()


                self.state = 217
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 220
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DecoratorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DecoratorContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = Python3Parser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 222
                self.decorator()
                self.state = 225 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(Python3Parser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def async_funcdef(self):
            return self.getTypedRuleContext(Python3Parser.Async_funcdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = Python3Parser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.decorators()
            self.state = 231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.CLASS]:
                self.state = 228
                self.classdef()
                pass
            elif token in [Python3Parser.DEF]:
                self.state = 229
                self.funcdef()
                pass
            elif token in [Python3Parser.ASYNC]:
                self.state = 230
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Async_funcdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_funcdef" ):
                listener.enterAsync_funcdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_funcdef" ):
                listener.exitAsync_funcdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_funcdef" ):
                return visitor.visitAsync_funcdef(self)
            else:
                return visitor.visitChildren(self)




    def async_funcdef(self):

        localctx = Python3Parser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(Python3Parser.ASYNC)
            self.state = 234
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(Python3Parser.ParametersContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def ARROW(self):
            return self.getToken(Python3Parser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = Python3Parser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(Python3Parser.DEF)
            self.state = 237
            self.match(Python3Parser.NAME)
            self.state = 238
            self.parameters()
            self.state = 241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ARROW:
                self.state = 239
                self.match(Python3Parser.ARROW)
                self.state = 240
                self.test()


            self.state = 243
            self.match(Python3Parser.COLON)
            self.state = 244
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = Python3Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 247
                self.typedargslist()


            self.state = 250
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.NAME]:
                self.state = 252
                self.tfpdef()
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 253
                    self.match(Python3Parser.ASSIGN)
                    self.state = 254
                    self.test()


                self.state = 265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 257
                        self.match(Python3Parser.COMMA)
                        self.state = 258
                        self.tfpdef()
                        self.state = 261
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 259
                            self.match(Python3Parser.ASSIGN)
                            self.state = 260
                            self.test()

                 
                    self.state = 267
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 268
                    self.match(Python3Parser.COMMA)
                    self.state = 299
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 269
                        self.match(Python3Parser.STAR)
                        self.state = 271
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.NAME))) != 0):
                            self.state = 270
                            self.tfpdef()


                        self.state = 281
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 273
                                self.match(Python3Parser.COMMA)
                                self.state = 274
                                self.tfpdef()
                                self.state = 277
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 275
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 276
                                    self.test()

                         
                            self.state = 283
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 292
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 284
                            self.match(Python3Parser.COMMA)
                            self.state = 290
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Python3Parser.POWER:
                                self.state = 285
                                self.match(Python3Parser.POWER)
                                self.state = 286
                                self.tfpdef()
                                self.state = 288
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.COMMA:
                                    self.state = 287
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 294
                        self.match(Python3Parser.POWER)
                        self.state = 295
                        self.tfpdef()
                        self.state = 297
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 296
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [Python3Parser.CLOSE_PAREN]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.state = 303
                self.match(Python3Parser.STAR)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.NAME))) != 0):
                    self.state = 304
                    self.tfpdef()


                self.state = 315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 307
                        self.match(Python3Parser.COMMA)
                        self.state = 308
                        self.tfpdef()
                        self.state = 311
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 309
                            self.match(Python3Parser.ASSIGN)
                            self.state = 310
                            self.test()

                 
                    self.state = 317
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 318
                    self.match(Python3Parser.COMMA)
                    self.state = 324
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.POWER:
                        self.state = 319
                        self.match(Python3Parser.POWER)
                        self.state = 320
                        self.tfpdef()
                        self.state = 322
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 321
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [Python3Parser.POWER]:
                self.state = 328
                self.match(Python3Parser.POWER)
                self.state = 329
                self.tfpdef()
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 330
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def expr_hole(self):
            return self.getTypedRuleContext(Python3Parser.Expr_holeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTfpdef" ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = Python3Parser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.state = 341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                self.match(Python3Parser.NAME)
                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COLON:
                    self.state = 336
                    self.match(Python3Parser.COLON)
                    self.state = 337
                    self.test()


                pass
            elif token in [Python3Parser.T__0, Python3Parser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 340
                self.expr_hole()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.VfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.VfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.NAME]:
                self.state = 343
                self.vfpdef()
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 344
                    self.match(Python3Parser.ASSIGN)
                    self.state = 345
                    self.test()


                self.state = 356
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 348
                        self.match(Python3Parser.COMMA)
                        self.state = 349
                        self.vfpdef()
                        self.state = 352
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 350
                            self.match(Python3Parser.ASSIGN)
                            self.state = 351
                            self.test()

                 
                    self.state = 358
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 359
                    self.match(Python3Parser.COMMA)
                    self.state = 390
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 360
                        self.match(Python3Parser.STAR)
                        self.state = 362
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.NAME))) != 0):
                            self.state = 361
                            self.vfpdef()


                        self.state = 372
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 364
                                self.match(Python3Parser.COMMA)
                                self.state = 365
                                self.vfpdef()
                                self.state = 368
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 366
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 367
                                    self.test()

                         
                            self.state = 374
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

                        self.state = 383
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 375
                            self.match(Python3Parser.COMMA)
                            self.state = 381
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Python3Parser.POWER:
                                self.state = 376
                                self.match(Python3Parser.POWER)
                                self.state = 377
                                self.vfpdef()
                                self.state = 379
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.COMMA:
                                    self.state = 378
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 385
                        self.match(Python3Parser.POWER)
                        self.state = 386
                        self.vfpdef()
                        self.state = 388
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 387
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [Python3Parser.COLON]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.state = 394
                self.match(Python3Parser.STAR)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.NAME))) != 0):
                    self.state = 395
                    self.vfpdef()


                self.state = 406
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 398
                        self.match(Python3Parser.COMMA)
                        self.state = 399
                        self.vfpdef()
                        self.state = 402
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 400
                            self.match(Python3Parser.ASSIGN)
                            self.state = 401
                            self.test()

                 
                    self.state = 408
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 409
                    self.match(Python3Parser.COMMA)
                    self.state = 415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.POWER:
                        self.state = 410
                        self.match(Python3Parser.POWER)
                        self.state = 411
                        self.vfpdef()
                        self.state = 413
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 412
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [Python3Parser.POWER]:
                self.state = 419
                self.match(Python3Parser.POWER)
                self.state = 420
                self.vfpdef()
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 421
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def expr_hole(self):
            return self.getTypedRuleContext(Python3Parser.Expr_holeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpdef" ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = Python3Parser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_vfpdef)
        try:
            self.state = 428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 426
                self.match(Python3Parser.NAME)
                pass
            elif token in [Python3Parser.T__0, Python3Parser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self.expr_hole()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stmt)
        try:
            self.state = 432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 430
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 431
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.SEMI_COLON)
            else:
                return self.getToken(Python3Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = Python3Parser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.small_stmt()
            self.state = 439
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 435
                    self.match(Python3Parser.SEMI_COLON)
                    self.state = 436
                    self.small_stmt() 
                self.state = 441
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.SEMI_COLON:
                self.state = 442
                self.match(Python3Parser.SEMI_COLON)


            self.state = 445
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_hole(self):
            return self.getTypedRuleContext(Python3Parser.Expr_holeContext,0)


        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_small_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmall_stmt" ):
                listener.enterSmall_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmall_stmt" ):
                listener.exitSmall_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmall_stmt" ):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)




    def small_stmt(self):

        localctx = Python3Parser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_small_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 447
                self.expr_hole()
                pass

            elif la_ == 2:
                self.state = 448
                self.expr_stmt()
                pass

            elif la_ == 3:
                self.state = 449
                self.del_stmt()
                pass

            elif la_ == 4:
                self.state = 450
                self.pass_stmt()
                pass

            elif la_ == 5:
                self.state = 451
                self.flow_stmt()
                pass

            elif la_ == 6:
                self.state = 452
                self.import_stmt()
                pass

            elif la_ == 7:
                self.state = 453
                self.global_stmt()
                pass

            elif la_ == 8:
                self.state = 454
                self.nonlocal_stmt()
                pass

            elif la_ == 9:
                self.state = 455
                self.assert_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext,i)


        def annassign(self):
            return self.getTypedRuleContext(Python3Parser.AnnassignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = Python3Parser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.testlist_star_expr()
            self.state = 475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.COLON]:
                self.state = 459
                self.annassign()
                pass
            elif token in [Python3Parser.ADD_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.MULT_ASSIGN, Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.MOD_ASSIGN, Python3Parser.AND_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.XOR_ASSIGN, Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN, Python3Parser.POWER_ASSIGN, Python3Parser.IDIV_ASSIGN]:
                self.state = 460
                self.augassign()
                self.state = 463
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 461
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 462
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON, Python3Parser.ASSIGN]:
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.ASSIGN:
                    self.state = 465
                    self.match(Python3Parser.ASSIGN)
                    self.state = 468
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.YIELD]:
                        self.state = 466
                        self.yield_expr()
                        pass
                    elif token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 467
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_annassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnassign" ):
                listener.enterAnnassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnassign" ):
                listener.exitAnnassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnassign" ):
                return visitor.visitAnnassign(self)
            else:
                return visitor.visitChildren(self)




    def annassign(self):

        localctx = Python3Parser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_annassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(Python3Parser.COLON)
            self.state = 478
            self.test()
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASSIGN:
                self.state = 479
                self.match(Python3Parser.ASSIGN)
                self.state = 480
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = Python3Parser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 483
                self.test()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 484
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 494
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 487
                    self.match(Python3Parser.COMMA)
                    self.state = 490
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 488
                        self.test()
                        pass
                    elif token in [Python3Parser.STAR]:
                        self.state = 489
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 496
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 497
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(Python3Parser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(Python3Parser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(Python3Parser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(Python3Parser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(Python3Parser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(Python3Parser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(Python3Parser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(Python3Parser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(Python3Parser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(Python3Parser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(Python3Parser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            _la = self._input.LA(1)
            if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (Python3Parser.ADD_ASSIGN - 86)) | (1 << (Python3Parser.SUB_ASSIGN - 86)) | (1 << (Python3Parser.MULT_ASSIGN - 86)) | (1 << (Python3Parser.AT_ASSIGN - 86)) | (1 << (Python3Parser.DIV_ASSIGN - 86)) | (1 << (Python3Parser.MOD_ASSIGN - 86)) | (1 << (Python3Parser.AND_ASSIGN - 86)) | (1 << (Python3Parser.OR_ASSIGN - 86)) | (1 << (Python3Parser.XOR_ASSIGN - 86)) | (1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 86)) | (1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 86)) | (1 << (Python3Parser.POWER_ASSIGN - 86)) | (1 << (Python3Parser.IDIV_ASSIGN - 86)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = Python3Parser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(Python3Parser.DEL)
            self.state = 503
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = Python3Parser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(Python3Parser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = Python3Parser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_flow_stmt)
        try:
            self.state = 512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 507
                self.break_stmt()
                pass
            elif token in [Python3Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self.continue_stmt()
                pass
            elif token in [Python3Parser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 509
                self.return_stmt()
                pass
            elif token in [Python3Parser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 510
                self.raise_stmt()
                pass
            elif token in [Python3Parser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 511
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(Python3Parser.RETURN)
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)))) != 0):
                self.state = 519
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.match(Python3Parser.RAISE)
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)))) != 0):
                self.state = 525
                self.test()
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FROM:
                    self.state = 526
                    self.match(Python3Parser.FROM)
                    self.state = 527
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(Python3Parser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(Python3Parser.Import_fromContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = Python3Parser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_stmt)
        try:
            self.state = 534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 532
                self.import_name()
                pass
            elif token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = Python3Parser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(Python3Parser.IMPORT)
            self.state = 537
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Import_as_namesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELLIPSIS)
            else:
                return self.getToken(Python3Parser.ELLIPSIS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = Python3Parser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(Python3Parser.FROM)
            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS:
                    self.state = 540
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 546
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 548 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 547
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 550 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        break

                pass


            self.state = 554
            self.match(Python3Parser.IMPORT)
            self.state = 561
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.state = 555
                self.match(Python3Parser.STAR)
                pass
            elif token in [Python3Parser.OPEN_PAREN]:
                self.state = 556
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 557
                self.import_as_names()
                self.state = 558
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.NAME]:
                self.state = 560
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = Python3Parser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(Python3Parser.NAME)
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 564
                self.match(Python3Parser.AS)
                self.state = 565
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = Python3Parser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.dotted_name()
            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 569
                self.match(Python3Parser.AS)
                self.state = 570
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = Python3Parser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.import_as_name()
            self.state = 578
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 574
                    self.match(Python3Parser.COMMA)
                    self.state = 575
                    self.import_as_name() 
                self.state = 580
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 581
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = Python3Parser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.dotted_as_name()
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 585
                self.match(Python3Parser.COMMA)
                self.state = 586
                self.dotted_as_name()
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = Python3Parser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(Python3Parser.NAME)
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.DOT:
                self.state = 593
                self.match(Python3Parser.DOT)
                self.state = 594
                self.match(Python3Parser.NAME)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = Python3Parser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(Python3Parser.GLOBAL)
            self.state = 601
            self.match(Python3Parser.NAME)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 602
                self.match(Python3Parser.COMMA)
                self.state = 603
                self.match(Python3Parser.NAME)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = Python3Parser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.match(Python3Parser.NONLOCAL)
            self.state = 610
            self.match(Python3Parser.NAME)
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 611
                self.match(Python3Parser.COMMA)
                self.state = 612
                self.match(Python3Parser.NAME)
                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(Python3Parser.ASSERT)
            self.state = 619
            self.test()
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 620
                self.match(Python3Parser.COMMA)
                self.state = 621
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_hole(self):
            return self.getTypedRuleContext(Python3Parser.Compound_holeContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(Python3Parser.DecoratedContext,0)


        def async_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Async_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = Python3Parser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_compound_stmt)
        try:
            self.state = 634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.T__1, Python3Parser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 624
                self.compound_hole()
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.if_stmt()
                pass
            elif token in [Python3Parser.WHILE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 626
                self.while_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 627
                self.for_stmt()
                pass
            elif token in [Python3Parser.TRY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 628
                self.try_stmt()
                pass
            elif token in [Python3Parser.WITH]:
                self.enterOuterAlt(localctx, 6)
                self.state = 629
                self.with_stmt()
                pass
            elif token in [Python3Parser.DEF]:
                self.enterOuterAlt(localctx, 7)
                self.state = 630
                self.funcdef()
                pass
            elif token in [Python3Parser.CLASS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 631
                self.classdef()
                pass
            elif token in [Python3Parser.AT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 632
                self.decorated()
                pass
            elif token in [Python3Parser.ASYNC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 633
                self.async_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Async_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_stmt" ):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_stmt" ):
                listener.exitAsync_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_stmt" ):
                return visitor.visitAsync_stmt(self)
            else:
                return visitor.visitChildren(self)




    def async_stmt(self):

        localctx = Python3Parser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(Python3Parser.ASYNC)
            self.state = 640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.DEF]:
                self.state = 637
                self.funcdef()
                pass
            elif token in [Python3Parser.WITH]:
                self.state = 638
                self.with_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.state = 639
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(Python3Parser.IF)
            self.state = 643
            self.test()
            self.state = 644
            self.match(Python3Parser.COLON)
            self.state = 645
            self.suite()
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.ELIF:
                self.state = 646
                self.match(Python3Parser.ELIF)
                self.state = 647
                self.test()
                self.state = 648
                self.match(Python3Parser.COLON)
                self.state = 649
                self.suite()
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 656
                self.match(Python3Parser.ELSE)
                self.state = 657
                self.match(Python3Parser.COLON)
                self.state = 658
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(Python3Parser.WHILE)
            self.state = 662
            self.test()
            self.state = 663
            self.match(Python3Parser.COLON)
            self.state = 664
            self.suite()
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 665
                self.match(Python3Parser.ELSE)
                self.state = 666
                self.match(Python3Parser.COLON)
                self.state = 667
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(Python3Parser.FOR)
            self.state = 671
            self.exprlist()
            self.state = 672
            self.match(Python3Parser.IN)
            self.state = 673
            self.testlist()
            self.state = 674
            self.match(Python3Parser.COLON)
            self.state = 675
            self.suite()
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 676
                self.match(Python3Parser.ELSE)
                self.state = 677
                self.match(Python3Parser.COLON)
                self.state = 678
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(Python3Parser.TRY)
            self.state = 682
            self.match(Python3Parser.COLON)
            self.state = 683
            self.suite()
            self.state = 705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.EXCEPT]:
                self.state = 688 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 684
                    self.except_clause()
                    self.state = 685
                    self.match(Python3Parser.COLON)
                    self.state = 686
                    self.suite()
                    self.state = 690 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.EXCEPT):
                        break

                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ELSE:
                    self.state = 692
                    self.match(Python3Parser.ELSE)
                    self.state = 693
                    self.match(Python3Parser.COLON)
                    self.state = 694
                    self.suite()


                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FINALLY:
                    self.state = 697
                    self.match(Python3Parser.FINALLY)
                    self.state = 698
                    self.match(Python3Parser.COLON)
                    self.state = 699
                    self.suite()


                pass
            elif token in [Python3Parser.FINALLY]:
                self.state = 702
                self.match(Python3Parser.FINALLY)
                self.state = 703
                self.match(Python3Parser.COLON)
                self.state = 704
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.With_itemContext)
            else:
                return self.getTypedRuleContext(Python3Parser.With_itemContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = Python3Parser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(Python3Parser.WITH)
            self.state = 708
            self.with_item()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 709
                self.match(Python3Parser.COMMA)
                self.state = 710
                self.with_item()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 716
            self.match(Python3Parser.COLON)
            self.state = 717
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = Python3Parser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.test()
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 720
                self.match(Python3Parser.AS)
                self.state = 721
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(Python3Parser.EXCEPT)
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)))) != 0):
                self.state = 725
                self.test()
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.AS:
                    self.state = 726
                    self.match(Python3Parser.AS)
                    self.state = 727
                    self.match(Python3Parser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = Python3Parser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.simple_stmt()
                pass
            elif token in [Python3Parser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.match(Python3Parser.NEWLINE)
                self.state = 734
                self.match(Python3Parser.INDENT)
                self.state = 736 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 735
                    self.stmt()
                    self.state = 738 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.T__2) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)) | (1 << (Python3Parser.AT - 69)))) != 0)):
                        break

                self.state = 740
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext,i)


        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(Python3Parser.LambdefContext,0)


        def var_hole(self):
            return self.getTypedRuleContext(Python3Parser.Var_holeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.or_test()
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.IF:
                    self.state = 745
                    self.match(Python3Parser.IF)
                    self.state = 746
                    self.or_test()
                    self.state = 747
                    self.match(Python3Parser.ELSE)
                    self.state = 748
                    self.test()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.lambdef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 753
                self.var_hole()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_nocond" ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_test_nocond)
        try:
            self.state = 758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 756
                self.or_test()
                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 757
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = Python3Parser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(Python3Parser.LAMBDA)
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 761
                self.varargslist()


            self.state = 764
            self.match(Python3Parser.COLON)
            self.state = 765
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef_nocond" ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = Python3Parser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(Python3Parser.LAMBDA)
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 768
                self.varargslist()


            self.state = 771
            self.match(Python3Parser.COLON)
            self.state = 772
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_test" ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.and_test()
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR:
                self.state = 775
                self.match(Python3Parser.OR)
                self.state = 776
                self.and_test()
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_test" ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = Python3Parser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.not_test()
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.AND:
                self.state = 783
                self.match(Python3Parser.AND)
                self.state = 784
                self.not_test()
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(Python3Parser.ComparisonContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_test" ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_not_test)
        try:
            self.state = 793
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.match(Python3Parser.NOT)
                self.state = 791
                self.not_test()
                pass
            elif token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 792
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = Python3Parser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.expr()
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & ((1 << (Python3Parser.IN - 21)) | (1 << (Python3Parser.NOT - 21)) | (1 << (Python3Parser.IS - 21)) | (1 << (Python3Parser.LESS_THAN - 21)) | (1 << (Python3Parser.GREATER_THAN - 21)) | (1 << (Python3Parser.EQUALS - 21)) | (1 << (Python3Parser.GT_EQ - 21)) | (1 << (Python3Parser.LT_EQ - 21)) | (1 << (Python3Parser.NOT_EQ_1 - 21)) | (1 << (Python3Parser.NOT_EQ_2 - 21)))) != 0):
                self.state = 796
                self.comp_op()
                self.state = 797
                self.expr()
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(Python3Parser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(Python3Parser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(Python3Parser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(Python3Parser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(Python3Parser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(Python3Parser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(Python3Parser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_comp_op)
        try:
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 804
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 806
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 807
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 808
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 809
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 810
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 811
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 812
                self.match(Python3Parser.NOT)
                self.state = 813
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 814
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 815
                self.match(Python3Parser.IS)
                self.state = 816
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = Python3Parser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(Python3Parser.STAR)
            self.state = 820
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Xor_exprContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR_OP)
            else:
                return self.getToken(Python3Parser.OR_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.xor_expr()
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR_OP:
                self.state = 823
                self.match(Python3Parser.OR_OP)
                self.state = 824
                self.xor_expr()
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xor_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_exprContext,i)


        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.XOR)
            else:
                return self.getToken(Python3Parser.XOR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXor_expr" ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXor_expr" ):
                listener.exitXor_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXor_expr" ):
                return visitor.visitXor_expr(self)
            else:
                return visitor.visitChildren(self)




    def xor_expr(self):

        localctx = Python3Parser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.and_expr()
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.XOR:
                self.state = 831
                self.match(Python3Parser.XOR)
                self.state = 832
                self.and_expr()
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Shift_exprContext,i)


        def AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND_OP)
            else:
                return self.getToken(Python3Parser.AND_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expr" ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)




    def and_expr(self):

        localctx = Python3Parser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.shift_expr()
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.AND_OP:
                self.state = 839
                self.match(Python3Parser.AND_OP)
                self.state = 840
                self.shift_expr()
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Arith_exprContext,i)


        def LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.LEFT_SHIFT)
            else:
                return self.getToken(Python3Parser.LEFT_SHIFT, i)

        def RIGHT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.RIGHT_SHIFT)
            else:
                return self.getToken(Python3Parser.RIGHT_SHIFT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expr" ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expr" ):
                listener.exitShift_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift_expr" ):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)




    def shift_expr(self):

        localctx = Python3Parser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.arith_expr()
            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.LEFT_SHIFT or _la==Python3Parser.RIGHT_SHIFT:
                self.state = 847
                _la = self._input.LA(1)
                if not(_la==Python3Parser.LEFT_SHIFT or _la==Python3Parser.RIGHT_SHIFT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 848
                self.arith_expr()
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arith_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TermContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TermContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ADD)
            else:
                return self.getToken(Python3Parser.ADD, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.MINUS)
            else:
                return self.getToken(Python3Parser.MINUS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArith_expr" ):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)




    def arith_expr(self):

        localctx = Python3Parser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.term()
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.ADD or _la==Python3Parser.MINUS:
                self.state = 855
                _la = self._input.LA(1)
                if not(_la==Python3Parser.ADD or _la==Python3Parser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 856
                self.term()
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.FactorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.FactorContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STAR)
            else:
                return self.getToken(Python3Parser.STAR, i)

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AT)
            else:
                return self.getToken(Python3Parser.AT, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DIV)
            else:
                return self.getToken(Python3Parser.DIV, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.MOD)
            else:
                return self.getToken(Python3Parser.MOD, i)

        def IDIV(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.IDIV)
            else:
                return self.getToken(Python3Parser.IDIV, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = Python3Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.factor()
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (Python3Parser.STAR - 54)) | (1 << (Python3Parser.DIV - 54)) | (1 << (Python3Parser.MOD - 54)) | (1 << (Python3Parser.IDIV - 54)) | (1 << (Python3Parser.AT - 54)))) != 0):
                self.state = 863
                _la = self._input.LA(1)
                if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (Python3Parser.STAR - 54)) | (1 << (Python3Parser.DIV - 54)) | (1 << (Python3Parser.MOD - 54)) | (1 << (Python3Parser.IDIV - 54)) | (1 << (Python3Parser.AT - 54)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 864
                self.factor()
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(Python3Parser.NOT_OP, 0)

        def power(self):
            return self.getTypedRuleContext(Python3Parser.PowerContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 873
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 870
                _la = self._input.LA(1)
                if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 871
                self.factor()
                pass
            elif token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 872
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(Python3Parser.Atom_exprContext,0)


        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = Python3Parser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.atom_expr()
            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.POWER:
                self.state = 876
                self.match(Python3Parser.POWER)
                self.state = 877
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Atom_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(Python3Parser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_expr" ):
                return visitor.visitAtom_expr(self)
            else:
                return visitor.visitChildren(self)




    def atom_expr(self):

        localctx = Python3Parser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AWAIT:
                self.state = 880
                self.match(Python3Parser.AWAIT)


            self.state = 883
            self.atom()
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.DOT) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0):
                self.state = 884
                self.trailer()
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def expr_hole(self):
            return self.getTypedRuleContext(Python3Parser.Expr_holeContext,0)


        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def ELLIPSIS(self):
            return self.getToken(Python3Parser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext,0)


        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.state = 890
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 893
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 891
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 892
                    self.testlist_comp()
                    pass
                elif token in [Python3Parser.CLOSE_PAREN]:
                    pass
                else:
                    pass
                self.state = 895
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.state = 896
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)))) != 0):
                    self.state = 897
                    self.testlist_comp()


                self.state = 900
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.OPEN_BRACE]:
                self.state = 901
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)))) != 0):
                    self.state = 902
                    self.dictorsetmaker()


                self.state = 905
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [Python3Parser.T__0, Python3Parser.T__1]:
                self.state = 906
                self.expr_hole()
                pass
            elif token in [Python3Parser.NAME]:
                self.state = 907
                self.match(Python3Parser.NAME)
                pass
            elif token in [Python3Parser.NUMBER]:
                self.state = 908
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [Python3Parser.STRING]:
                self.state = 910 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 909
                    self.match(Python3Parser.STRING)
                    self.state = 912 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.STRING):
                        break

                pass
            elif token in [Python3Parser.ELLIPSIS]:
                self.state = 914
                self.match(Python3Parser.ELLIPSIS)
                pass
            elif token in [Python3Parser.NONE]:
                self.state = 915
                self.match(Python3Parser.NONE)
                pass
            elif token in [Python3Parser.TRUE]:
                self.state = 916
                self.match(Python3Parser.TRUE)
                pass
            elif token in [Python3Parser.FALSE]:
                self.state = 917
                self.match(Python3Parser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 920
                self.test()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 921
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FOR, Python3Parser.ASYNC]:
                self.state = 924
                self.comp_for()
                pass
            elif token in [Python3Parser.CLOSE_PAREN, Python3Parser.COMMA, Python3Parser.CLOSE_BRACK]:
                self.state = 932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 925
                        self.match(Python3Parser.COMMA)
                        self.state = 928
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                            self.state = 926
                            self.test()
                            pass
                        elif token in [Python3Parser.STAR]:
                            self.state = 927
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 934
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 935
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(Python3Parser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(Python3Parser.DOT, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 951
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)))) != 0):
                    self.state = 941
                    self.arglist()


                self.state = 944
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 945
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 946
                self.subscriptlist()
                self.state = 947
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 949
                self.match(Python3Parser.DOT)
                self.state = 950
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = Python3Parser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.subscript()
            self.state = 958
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 954
                    self.match(Python3Parser.COMMA)
                    self.state = 955
                    self.subscript() 
                self.state = 960
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 961
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(Python3Parser.SliceopContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = Python3Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 964
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)))) != 0):
                    self.state = 965
                    self.test()


                self.state = 968
                self.match(Python3Parser.COLON)
                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)))) != 0):
                    self.state = 969
                    self.test()


                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COLON:
                    self.state = 972
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = Python3Parser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(Python3Parser.COLON)
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)))) != 0):
                self.state = 978
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = Python3Parser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 981
                self.expr()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 982
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 992
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 985
                    self.match(Python3Parser.COMMA)
                    self.state = 988
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 986
                        self.expr()
                        pass
                    elif token in [Python3Parser.STAR]:
                        self.state = 987
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 994
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 995
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.test()
            self.state = 1003
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 999
                    self.match(Python3Parser.COMMA)
                    self.state = 1000
                    self.test() 
                self.state = 1005
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1006
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.POWER)
            else:
                return self.getToken(Python3Parser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1015
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 1009
                    self.test()
                    self.state = 1010
                    self.match(Python3Parser.COLON)
                    self.state = 1011
                    self.test()
                    pass
                elif token in [Python3Parser.POWER]:
                    self.state = 1013
                    self.match(Python3Parser.POWER)
                    self.state = 1014
                    self.expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1035
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR, Python3Parser.ASYNC]:
                    self.state = 1017
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 1029
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1018
                            self.match(Python3Parser.COMMA)
                            self.state = 1025
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                                self.state = 1019
                                self.test()
                                self.state = 1020
                                self.match(Python3Parser.COLON)
                                self.state = 1021
                                self.test()
                                pass
                            elif token in [Python3Parser.POWER]:
                                self.state = 1023
                                self.match(Python3Parser.POWER)
                                self.state = 1024
                                self.expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1031
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

                    self.state = 1033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 1032
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1039
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 1037
                    self.test()
                    pass
                elif token in [Python3Parser.STAR]:
                    self.state = 1038
                    self.star_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1055
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR, Python3Parser.ASYNC]:
                    self.state = 1041
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 1049
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1042
                            self.match(Python3Parser.COMMA)
                            self.state = 1045
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                                self.state = 1043
                                self.test()
                                pass
                            elif token in [Python3Parser.STAR]:
                                self.state = 1044
                                self.star_expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1051
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

                    self.state = 1053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 1052
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = Python3Parser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(Python3Parser.CLASS)
            self.state = 1060
            self.match(Python3Parser.NAME)
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 1061
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)))) != 0):
                    self.state = 1062
                    self.arglist()


                self.state = 1065
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 1068
            self.match(Python3Parser.COLON)
            self.state = 1069
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.argument()
            self.state = 1076
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1072
                    self.match(Python3Parser.COMMA)
                    self.state = 1073
                    self.argument() 
                self.state = 1078
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1079
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = Python3Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1082
                self.test()
                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FOR or _la==Python3Parser.ASYNC:
                    self.state = 1083
                    self.comp_for()


                pass

            elif la_ == 2:
                self.state = 1086
                self.test()
                self.state = 1087
                self.match(Python3Parser.ASSIGN)
                self.state = 1088
                self.test()
                pass

            elif la_ == 3:
                self.state = 1090
                self.match(Python3Parser.POWER)
                self.state = 1091
                self.test()
                pass

            elif la_ == 4:
                self.state = 1092
                self.match(Python3Parser.STAR)
                self.state = 1093
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(Python3Parser.Comp_ifContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_comp_iter)
        try:
            self.state = 1098
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FOR, Python3Parser.ASYNC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1096
                self.comp_for()
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1097
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASYNC:
                self.state = 1100
                self.match(Python3Parser.ASYNC)


            self.state = 1103
            self.match(Python3Parser.FOR)
            self.state = 1104
            self.exprlist()
            self.state = 1105
            self.match(Python3Parser.IN)
            self.state = 1106
            self.or_test()
            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.IF) | (1 << Python3Parser.FOR) | (1 << Python3Parser.ASYNC))) != 0):
                self.state = 1107
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_if" ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = Python3Parser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(Python3Parser.IF)
            self.state = 1111
            self.test_nocond()
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.IF) | (1 << Python3Parser.FOR) | (1 << Python3Parser.ASYNC))) != 0):
                self.state = 1112
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Encoding_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_encoding_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncoding_decl" ):
                listener.enterEncoding_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncoding_decl" ):
                listener.exitEncoding_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncoding_decl" ):
                return visitor.visitEncoding_decl(self)
            else:
                return visitor.visitChildren(self)




    def encoding_decl(self):

        localctx = Python3Parser.Encoding_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_encoding_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.match(Python3Parser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(Python3Parser.Yield_argContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = Python3Parser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.match(Python3Parser.YIELD)
            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.T__0) | (1 << Python3Parser.T__1) | (1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.FROM) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Python3Parser.ADD - 69)) | (1 << (Python3Parser.MINUS - 69)) | (1 << (Python3Parser.NOT_OP - 69)) | (1 << (Python3Parser.OPEN_BRACE - 69)))) != 0):
                self.state = 1118
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = Python3Parser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_yield_arg)
        try:
            self.state = 1124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1121
                self.match(Python3Parser.FROM)
                self.state = 1122
                self.test()
                pass
            elif token in [Python3Parser.T__0, Python3Parser.T__1, Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1123
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_holeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_hole(self):
            return self.getTypedRuleContext(Python3Parser.Simple_holeContext,0)


        def double_hole(self):
            return self.getTypedRuleContext(Python3Parser.Double_holeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_expr_hole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_hole" ):
                listener.enterExpr_hole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_hole" ):
                listener.exitExpr_hole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_hole" ):
                return visitor.visitExpr_hole(self)
            else:
                return visitor.visitChildren(self)




    def expr_hole(self):

        localctx = Python3Parser.Expr_holeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_expr_hole)
        try:
            self.state = 1128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1126
                self.simple_hole()
                pass
            elif token in [Python3Parser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1127
                self.double_hole()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_holeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_hole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_hole" ):
                listener.enterSimple_hole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_hole" ):
                listener.exitSimple_hole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_hole" ):
                return visitor.visitSimple_hole(self)
            else:
                return visitor.visitChildren(self)




    def simple_hole(self):

        localctx = Python3Parser.Simple_holeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_simple_hole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(Python3Parser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_holeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Python3Parser.RULE_double_hole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_hole" ):
                listener.enterDouble_hole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_hole" ):
                listener.exitDouble_hole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_hole" ):
                return visitor.visitDouble_hole(self)
            else:
                return visitor.visitChildren(self)




    def double_hole(self):

        localctx = Python3Parser.Double_holeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_double_hole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.match(Python3Parser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Var_holeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_var_hole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_hole" ):
                listener.enterVar_hole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_hole" ):
                listener.exitVar_hole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_hole" ):
                return visitor.visitVar_hole(self)
            else:
                return visitor.visitChildren(self)




    def var_hole(self):

        localctx = Python3Parser.Var_holeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_var_hole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(Python3Parser.T__0)
            self.state = 1135
            self.match(Python3Parser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_holeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_compound_hole(self):
            return self.getTypedRuleContext(Python3Parser.Simple_compound_holeContext,0)


        def multiple_compound_hole(self):
            return self.getTypedRuleContext(Python3Parser.Multiple_compound_holeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_hole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_hole" ):
                listener.enterCompound_hole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_hole" ):
                listener.exitCompound_hole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_hole" ):
                return visitor.visitCompound_hole(self)
            else:
                return visitor.visitChildren(self)




    def compound_hole(self):

        localctx = Python3Parser.Compound_holeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_compound_hole)
        try:
            self.state = 1139
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1137
                self.simple_compound_hole()
                pass
            elif token in [Python3Parser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1138
                self.multiple_compound_hole()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_compound_holeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_compound_hole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_compound_hole" ):
                listener.enterSimple_compound_hole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_compound_hole" ):
                listener.exitSimple_compound_hole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_compound_hole" ):
                return visitor.visitSimple_compound_hole(self)
            else:
                return visitor.visitChildren(self)




    def simple_compound_hole(self):

        localctx = Python3Parser.Simple_compound_holeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_simple_compound_hole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(Python3Parser.T__1)
            self.state = 1142
            self.match(Python3Parser.COLON)
            self.state = 1143
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiple_compound_holeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_multiple_compound_hole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiple_compound_hole" ):
                listener.enterMultiple_compound_hole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiple_compound_hole" ):
                listener.exitMultiple_compound_hole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiple_compound_hole" ):
                return visitor.visitMultiple_compound_hole(self)
            else:
                return visitor.visitChildren(self)




    def multiple_compound_hole(self):

        localctx = Python3Parser.Multiple_compound_holeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_multiple_compound_hole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(Python3Parser.T__2)
            self.state = 1146
            self.match(Python3Parser.COLON)
            self.state = 1147
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





