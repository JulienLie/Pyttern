# Generated from Python3Parser.g4 by ANTLR 4.7.2
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO

if __name__ is not None and "." in __name__:
    from .Python3ParserBase import Python3ParserBase
else:
    from Python3ParserBase import Python3ParserBase

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3j")
        buf.write("\u0610\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\3\2\3\2\3\2\3\2\3\2\5")
        buf.write("\2\u010a\n\2\3\3\3\3\7\3\u010e\n\3\f\3\16\3\u0111\13\3")
        buf.write("\3\3\3\3\3\4\3\4\7\4\u0117\n\4\f\4\16\4\u011a\13\4\3\4")
        buf.write("\3\4\3\5\3\5\3\5\3\5\5\5\u0122\n\5\3\5\5\5\u0125\n\5\3")
        buf.write("\5\3\5\3\6\6\6\u012a\n\6\r\6\16\6\u012b\3\7\3\7\3\7\3")
        buf.write("\7\5\7\u0132\n\7\3\b\3\b\3\b\3\t\3\t\3\t\3\t\5\t\u013b")
        buf.write("\n\t\3\t\3\t\3\t\5\t\u0140\n\t\3\t\3\t\3\t\3\n\3\n\5\n")
        buf.write("\u0147\n\n\3\n\3\n\3\13\3\13\3\13\5\13\u014e\n\13\3\13")
        buf.write("\3\13\3\13\3\13\5\13\u0154\n\13\7\13\u0156\n\13\f\13\16")
        buf.write("\13\u0159\13\13\3\13\3\13\3\13\5\13\u015e\n\13\3\13\3")
        buf.write("\13\3\13\3\13\5\13\u0164\n\13\7\13\u0166\n\13\f\13\16")
        buf.write("\13\u0169\13\13\3\13\3\13\3\13\3\13\5\13\u016f\n\13\5")
        buf.write("\13\u0171\n\13\5\13\u0173\n\13\3\13\3\13\3\13\5\13\u0178")
        buf.write("\n\13\5\13\u017a\n\13\5\13\u017c\n\13\3\13\3\13\5\13\u0180")
        buf.write("\n\13\3\13\3\13\3\13\3\13\5\13\u0186\n\13\7\13\u0188\n")
        buf.write("\13\f\13\16\13\u018b\13\13\3\13\3\13\3\13\3\13\5\13\u0191")
        buf.write("\n\13\5\13\u0193\n\13\5\13\u0195\n\13\3\13\3\13\3\13\5")
        buf.write("\13\u019a\n\13\5\13\u019c\n\13\3\f\3\f\3\f\5\f\u01a1\n")
        buf.write("\f\3\f\5\f\u01a4\n\f\3\r\3\r\3\r\5\r\u01a9\n\r\3\r\3\r")
        buf.write("\3\r\3\r\5\r\u01af\n\r\7\r\u01b1\n\r\f\r\16\r\u01b4\13")
        buf.write("\r\3\r\3\r\3\r\5\r\u01b9\n\r\3\r\3\r\3\r\3\r\5\r\u01bf")
        buf.write("\n\r\7\r\u01c1\n\r\f\r\16\r\u01c4\13\r\3\r\3\r\3\r\3\r")
        buf.write("\5\r\u01ca\n\r\5\r\u01cc\n\r\5\r\u01ce\n\r\3\r\3\r\3\r")
        buf.write("\5\r\u01d3\n\r\5\r\u01d5\n\r\5\r\u01d7\n\r\3\r\3\r\5\r")
        buf.write("\u01db\n\r\3\r\3\r\3\r\3\r\5\r\u01e1\n\r\7\r\u01e3\n\r")
        buf.write("\f\r\16\r\u01e6\13\r\3\r\3\r\3\r\3\r\5\r\u01ec\n\r\5\r")
        buf.write("\u01ee\n\r\5\r\u01f0\n\r\3\r\3\r\3\r\5\r\u01f5\n\r\5\r")
        buf.write("\u01f7\n\r\3\16\3\16\5\16\u01fb\n\16\3\17\3\17\5\17\u01ff")
        buf.write("\n\17\3\20\3\20\3\20\7\20\u0204\n\20\f\20\16\20\u0207")
        buf.write("\13\20\3\20\5\20\u020a\n\20\3\20\3\20\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\5\21\u0217\n\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\5\22\u021e\n\22\3\22\3\22\3\22\5\22\u0223")
        buf.write("\n\22\7\22\u0225\n\22\f\22\16\22\u0228\13\22\5\22\u022a")
        buf.write("\n\22\3\23\3\23\3\23\3\23\5\23\u0230\n\23\3\24\3\24\5")
        buf.write("\24\u0234\n\24\3\24\3\24\3\24\5\24\u0239\n\24\7\24\u023b")
        buf.write("\n\24\f\24\16\24\u023e\13\24\3\24\5\24\u0241\n\24\3\25")
        buf.write("\3\25\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\30\3\30")
        buf.write("\5\30\u024f\n\30\3\31\3\31\3\32\3\32\3\33\3\33\5\33\u0257")
        buf.write("\n\33\3\34\3\34\3\35\3\35\3\35\3\35\5\35\u025f\n\35\5")
        buf.write("\35\u0261\n\35\3\36\3\36\5\36\u0265\n\36\3\37\3\37\3\37")
        buf.write("\3 \3 \7 \u026c\n \f \16 \u026f\13 \3 \3 \6 \u0273\n ")
        buf.write("\r \16 \u0274\5 \u0277\n \3 \3 \3 \3 \3 \3 \3 \5 \u0280")
        buf.write("\n \3!\3!\3!\5!\u0285\n!\3\"\3\"\3\"\5\"\u028a\n\"\3#")
        buf.write("\3#\3#\7#\u028f\n#\f#\16#\u0292\13#\3#\5#\u0295\n#\3$")
        buf.write("\3$\3$\7$\u029a\n$\f$\16$\u029d\13$\3%\3%\3%\7%\u02a2")
        buf.write("\n%\f%\16%\u02a5\13%\3&\3&\3&\3&\7&\u02ab\n&\f&\16&\u02ae")
        buf.write("\13&\3\'\3\'\3\'\3\'\7\'\u02b4\n\'\f\'\16\'\u02b7\13\'")
        buf.write("\3(\3(\3(\3(\5(\u02bd\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\5)\u02ca\n)\3*\3*\3*\3*\5*\u02d0\n*\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\7+\u02db\n+\f+\16+\u02de\13+\3+\3+\3+\5")
        buf.write("+\u02e3\n+\3,\3,\3,\3,\3,\3,\3,\5,\u02ec\n,\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\5-\u02f7\n-\3.\3.\3.\3.\3.\3.\3.\6.\u0300")
        buf.write("\n.\r.\16.\u0301\3.\3.\3.\5.\u0307\n.\3.\3.\3.\5.\u030c")
        buf.write("\n.\3.\3.\3.\5.\u0311\n.\3/\3/\3/\3/\7/\u0317\n/\f/\16")
        buf.write("/\u031a\13/\3/\3/\3/\3\60\3\60\3\60\5\60\u0322\n\60\3")
        buf.write("\61\3\61\3\61\3\61\5\61\u0328\n\61\5\61\u032a\n\61\3\62")
        buf.write("\3\62\3\62\3\62\6\62\u0330\n\62\r\62\16\62\u0331\3\62")
        buf.write("\3\62\5\62\u0336\n\62\3\63\3\63\3\63\3\63\3\63\3\63\6")
        buf.write("\63\u033e\n\63\r\63\16\63\u033f\3\63\3\63\3\64\3\64\3")
        buf.write("\64\5\64\u0347\n\64\3\64\5\64\u034a\n\64\3\65\3\65\6\65")
        buf.write("\u034e\n\65\r\65\16\65\u034f\3\65\5\65\u0353\n\65\3\66")
        buf.write("\3\66\3\66\5\66\u0358\n\66\3\67\3\67\3\67\5\67\u035d\n")
        buf.write("\67\3\67\3\67\3\67\38\38\38\39\39\59\u0367\n9\3:\3:\5")
        buf.write(":\u036b\n:\3;\3;\3;\3;\3<\3<\3<\7<\u0374\n<\f<\16<\u0377")
        buf.write("\13<\3=\3=\3=\3=\3=\3=\3=\3=\5=\u0381\n=\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\5>\u038b\n>\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0395")
        buf.write("\n?\3@\3@\3@\3@\3@\3@\3@\3@\5@\u039f\n@\3A\3A\3A\5A\u03a4")
        buf.write("\nA\3B\3B\3B\5B\u03a9\nB\3C\3C\3D\3D\3E\3E\3F\3F\3F\3")
        buf.write("G\3G\3H\3H\3H\3I\3I\3I\6I\u03bc\nI\rI\16I\u03bd\3J\3J")
        buf.write("\5J\u03c2\nJ\3K\3K\3K\3K\3L\3L\5L\u03ca\nL\3L\3L\3L\5")
        buf.write("L\u03cf\nL\3L\5L\u03d2\nL\3M\3M\3M\5M\u03d7\nM\3N\3N\3")
        buf.write("N\7N\u03dc\nN\fN\16N\u03df\13N\3N\5N\u03e2\nN\3O\3O\5")
        buf.write("O\u03e6\nO\3P\3P\3P\3P\5P\u03ec\nP\3Q\3Q\3Q\3Q\3Q\5Q\u03f3")
        buf.write("\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u03fc\nQ\3Q\3Q\3Q\3Q\3Q\5")
        buf.write("Q\u0403\nQ\3Q\3Q\5Q\u0407\nQ\3R\3R\3R\7R\u040c\nR\fR\16")
        buf.write("R\u040f\13R\3S\3S\5S\u0413\nS\3S\3S\3S\3T\3T\3T\3U\3U")
        buf.write("\3U\3U\3U\3U\3U\3U\5U\u0423\nU\3U\3U\3U\3U\3U\3U\5U\u042b")
        buf.write("\nU\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0435\nU\3U\3U\5U\u0439")
        buf.write("\nU\3V\3V\3V\7V\u043e\nV\fV\16V\u0441\13V\3W\3W\3W\7W")
        buf.write("\u0446\nW\fW\16W\u0449\13W\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y")
        buf.write("\3Y\5Y\u0455\nY\3Y\5Y\u0458\nY\3Z\3Z\5Z\u045c\nZ\3[\3")
        buf.write("[\5[\u0460\n[\3[\3[\3[\3\\\3\\\5\\\u0467\n\\\3\\\3\\\3")
        buf.write("\\\3]\3]\3]\7]\u046f\n]\f]\16]\u0472\13]\3^\3^\3^\7^\u0477")
        buf.write("\n^\f^\16^\u047a\13^\3_\3_\3_\5_\u047f\n_\3`\3`\3`\3`")
        buf.write("\7`\u0485\n`\f`\16`\u0488\13`\3a\3a\3a\3a\3a\3a\3a\3a")
        buf.write("\3a\3a\3a\3a\3a\5a\u0497\na\3b\3b\3b\3c\3c\3c\6c\u049f")
        buf.write("\nc\rc\16c\u04a0\3c\5c\u04a4\nc\3c\3c\3c\3c\3c\3c\3c\3")
        buf.write("c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\7c\u04bb\nc\f")
        buf.write("c\16c\u04be\13c\3d\5d\u04c1\nd\3d\3d\7d\u04c5\nd\fd\16")
        buf.write("d\u04c8\13d\3e\3e\3e\5e\u04cd\ne\3e\3e\3e\5e\u04d2\ne")
        buf.write("\3e\3e\3e\5e\u04d7\ne\3e\3e\3e\3e\3e\6e\u04de\ne\re\16")
        buf.write("e\u04df\3e\3e\3e\3e\5e\u04e6\ne\3f\3f\3g\3g\5g\u04ec\n")
        buf.write("g\3g\3g\3g\3g\5g\u04f2\ng\7g\u04f4\ng\fg\16g\u04f7\13")
        buf.write("g\3g\5g\u04fa\ng\5g\u04fc\ng\3h\3h\5h\u0500\nh\3h\3h\3")
        buf.write("h\3h\3h\3h\3h\5h\u0509\nh\3i\3i\3i\7i\u050e\ni\fi\16i")
        buf.write("\u0511\13i\3i\5i\u0514\ni\3j\3j\5j\u0518\nj\3j\3j\5j\u051c")
        buf.write("\nj\3j\5j\u051f\nj\5j\u0521\nj\3k\3k\5k\u0525\nk\3l\3")
        buf.write("l\5l\u0529\nl\3l\3l\3l\5l\u052e\nl\7l\u0530\nl\fl\16l")
        buf.write("\u0533\13l\3l\5l\u0536\nl\3m\3m\3m\7m\u053b\nm\fm\16m")
        buf.write("\u053e\13m\3m\5m\u0541\nm\3n\3n\3n\3n\3n\3n\5n\u0549\n")
        buf.write("n\3n\3n\3n\3n\3n\3n\3n\3n\5n\u0553\nn\7n\u0555\nn\fn\16")
        buf.write("n\u0558\13n\3n\5n\u055b\nn\5n\u055d\nn\3n\3n\5n\u0561")
        buf.write("\nn\3n\3n\3n\3n\5n\u0567\nn\7n\u0569\nn\fn\16n\u056c\13")
        buf.write("n\3n\5n\u056f\nn\5n\u0571\nn\5n\u0573\nn\3o\3o\3o\3o\5")
        buf.write("o\u0579\no\3o\3o\5o\u057d\no\3o\5o\u0580\no\3o\3o\3o\3")
        buf.write("p\3p\3p\7p\u0588\np\fp\16p\u058b\13p\3p\5p\u058e\np\3")
        buf.write("q\3q\3q\5q\u0593\nq\3q\3q\3q\3q\3q\3q\3q\3q\5q\u059d\n")
        buf.write("q\3r\3r\5r\u05a1\nr\3s\5s\u05a4\ns\3s\3s\3s\3s\3s\5s\u05ab")
        buf.write("\ns\3t\3t\3t\5t\u05b0\nt\3u\3u\3v\3v\5v\u05b6\nv\3w\3")
        buf.write("w\3w\5w\u05bb\nw\3x\6x\u05be\nx\rx\16x\u05bf\3y\3y\3y")
        buf.write("\3y\7y\u05c6\ny\fy\16y\u05c9\13y\3y\3y\3z\3z\3z\3z\3z")
        buf.write("\3z\3z\3{\3{\3{\5{\u05d7\n{\3|\3|\5|\u05db\n|\3|\5|\u05de")
        buf.write("\n|\3}\3}\5}\u05e2\n}\3}\3}\3~\3~\5~\u05e8\n~\3~\3~\3")
        buf.write("\177\3\177\3\177\5\177\u05ef\n\177\3\u0080\3\u0080\5\u0080")
        buf.write("\u05f3\n\u0080\3\u0080\3\u0080\5\u0080\u05f7\n\u0080\3")
        buf.write("\u0080\3\u0080\3\u0081\3\u0081\5\u0081\u05fd\n\u0081\3")
        buf.write("\u0081\3\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\6\u0082\u0607\n\u0082\r\u0082\16\u0082\u0608")
        buf.write("\5\u0082\u060b\n\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\2\3\u00c4\u0083\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt")
        buf.write("vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write("\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6")
        buf.write("\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8")
        buf.write("\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa")
        buf.write("\u00fc\u00fe\u0100\u0102\2\t\3\2Zf\3\289\4\2IJNN\5\2:")
        buf.write(":KMXX\3\2IJ\3\2GH\5\2  **//\2\u06b5\2\u0109\3\2\2\2\4")
        buf.write("\u010f\3\2\2\2\6\u0114\3\2\2\2\b\u011d\3\2\2\2\n\u0129")
        buf.write("\3\2\2\2\f\u012d\3\2\2\2\16\u0133\3\2\2\2\20\u0136\3\2")
        buf.write("\2\2\22\u0144\3\2\2\2\24\u019b\3\2\2\2\26\u01a3\3\2\2")
        buf.write("\2\30\u01f6\3\2\2\2\32\u01fa\3\2\2\2\34\u01fe\3\2\2\2")
        buf.write("\36\u0200\3\2\2\2 \u0216\3\2\2\2\"\u0218\3\2\2\2$\u022b")
        buf.write("\3\2\2\2&\u0233\3\2\2\2(\u0242\3\2\2\2*\u0244\3\2\2\2")
        buf.write(",\u0247\3\2\2\2.\u024e\3\2\2\2\60\u0250\3\2\2\2\62\u0252")
        buf.write("\3\2\2\2\64\u0254\3\2\2\2\66\u0258\3\2\2\28\u025a\3\2")
        buf.write("\2\2:\u0264\3\2\2\2<\u0266\3\2\2\2>\u0269\3\2\2\2@\u0281")
        buf.write("\3\2\2\2B\u0286\3\2\2\2D\u028b\3\2\2\2F\u0296\3\2\2\2")
        buf.write("H\u029e\3\2\2\2J\u02a6\3\2\2\2L\u02af\3\2\2\2N\u02b8\3")
        buf.write("\2\2\2P\u02c9\3\2\2\2R\u02cb\3\2\2\2T\u02d1\3\2\2\2V\u02e4")
        buf.write("\3\2\2\2X\u02ed\3\2\2\2Z\u02f8\3\2\2\2\\\u0312\3\2\2\2")
        buf.write("^\u031e\3\2\2\2`\u0323\3\2\2\2b\u0335\3\2\2\2d\u0337\3")
        buf.write("\2\2\2f\u0349\3\2\2\2h\u034b\3\2\2\2j\u0357\3\2\2\2l\u0359")
        buf.write("\3\2\2\2n\u0361\3\2\2\2p\u0366\3\2\2\2r\u036a\3\2\2\2")
        buf.write("t\u036c\3\2\2\2v\u0370\3\2\2\2x\u0380\3\2\2\2z\u038a\3")
        buf.write("\2\2\2|\u0394\3\2\2\2~\u039e\3\2\2\2\u0080\u03a3\3\2\2")
        buf.write("\2\u0082\u03a8\3\2\2\2\u0084\u03aa\3\2\2\2\u0086\u03ac")
        buf.write("\3\2\2\2\u0088\u03ae\3\2\2\2\u008a\u03b0\3\2\2\2\u008c")
        buf.write("\u03b3\3\2\2\2\u008e\u03b5\3\2\2\2\u0090\u03b8\3\2\2\2")
        buf.write("\u0092\u03c1\3\2\2\2\u0094\u03c3\3\2\2\2\u0096\u03d1\3")
        buf.write("\2\2\2\u0098\u03d3\3\2\2\2\u009a\u03d8\3\2\2\2\u009c\u03e5")
        buf.write("\3\2\2\2\u009e\u03eb\3\2\2\2\u00a0\u0406\3\2\2\2\u00a2")
        buf.write("\u0408\3\2\2\2\u00a4\u0412\3\2\2\2\u00a6\u0417\3\2\2\2")
        buf.write("\u00a8\u0438\3\2\2\2\u00aa\u043a\3\2\2\2\u00ac\u0442\3")
        buf.write("\2\2\2\u00ae\u044a\3\2\2\2\u00b0\u0457\3\2\2\2\u00b2\u045b")
        buf.write("\3\2\2\2\u00b4\u045d\3\2\2\2\u00b6\u0464\3\2\2\2\u00b8")
        buf.write("\u046b\3\2\2\2\u00ba\u0473\3\2\2\2\u00bc\u047e\3\2\2\2")
        buf.write("\u00be\u0480\3\2\2\2\u00c0\u0496\3\2\2\2\u00c2\u0498\3")
        buf.write("\2\2\2\u00c4\u04a3\3\2\2\2\u00c6\u04c0\3\2\2\2\u00c8\u04e5")
        buf.write("\3\2\2\2\u00ca\u04e7\3\2\2\2\u00cc\u04eb\3\2\2\2\u00ce")
        buf.write("\u0508\3\2\2\2\u00d0\u050a\3\2\2\2\u00d2\u0520\3\2\2\2")
        buf.write("\u00d4\u0522\3\2\2\2\u00d6\u0528\3\2\2\2\u00d8\u0537\3")
        buf.write("\2\2\2\u00da\u0572\3\2\2\2\u00dc\u0574\3\2\2\2\u00de\u0584")
        buf.write("\3\2\2\2\u00e0\u059c\3\2\2\2\u00e2\u05a0\3\2\2\2\u00e4")
        buf.write("\u05a3\3\2\2\2\u00e6\u05ac\3\2\2\2\u00e8\u05b1\3\2\2\2")
        buf.write("\u00ea\u05b3\3\2\2\2\u00ec\u05ba\3\2\2\2\u00ee\u05bd\3")
        buf.write("\2\2\2\u00f0\u05c1\3\2\2\2\u00f2\u05cc\3\2\2\2\u00f4\u05d6")
        buf.write("\3\2\2\2\u00f6\u05d8\3\2\2\2\u00f8\u05df\3\2\2\2\u00fa")
        buf.write("\u05e5\3\2\2\2\u00fc\u05ee\3\2\2\2\u00fe\u05f0\3\2\2\2")
        buf.write("\u0100\u05fa\3\2\2\2\u0102\u0602\3\2\2\2\u0104\u010a\7")
        buf.write(".\2\2\u0105\u010a\5\36\20\2\u0106\u0107\5P)\2\u0107\u0108")
        buf.write("\7.\2\2\u0108\u010a\3\2\2\2\u0109\u0104\3\2\2\2\u0109")
        buf.write("\u0105\3\2\2\2\u0109\u0106\3\2\2\2\u010a\3\3\2\2\2\u010b")
        buf.write("\u010e\7.\2\2\u010c\u010e\5\34\17\2\u010d\u010b\3\2\2")
        buf.write("\2\u010d\u010c\3\2\2\2\u010e\u0111\3\2\2\2\u010f\u010d")
        buf.write("\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0112\3\2\2\2\u0111")
        buf.write("\u010f\3\2\2\2\u0112\u0113\7\2\2\3\u0113\5\3\2\2\2\u0114")
        buf.write("\u0118\5\u00d8m\2\u0115\u0117\7.\2\2\u0116\u0115\3\2\2")
        buf.write("\2\u0117\u011a\3\2\2\2\u0118\u0116\3\2\2\2\u0118\u0119")
        buf.write("\3\2\2\2\u0119\u011b\3\2\2\2\u011a\u0118\3\2\2\2\u011b")
        buf.write("\u011c\7\2\2\3\u011c\7\3\2\2\2\u011d\u011e\7X\2\2\u011e")
        buf.write("\u0124\5H%\2\u011f\u0121\7;\2\2\u0120\u0122\5\u00dep\2")
        buf.write("\u0121\u0120\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0123\3")
        buf.write("\2\2\2\u0123\u0125\7<\2\2\u0124\u011f\3\2\2\2\u0124\u0125")
        buf.write("\3\2\2\2\u0125\u0126\3\2\2\2\u0126\u0127\7.\2\2\u0127")
        buf.write("\t\3\2\2\2\u0128\u012a\5\b\5\2\u0129\u0128\3\2\2\2\u012a")
        buf.write("\u012b\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2")
        buf.write("\u012c\13\3\2\2\2\u012d\u0131\5\n\6\2\u012e\u0132\5\u00dc")
        buf.write("o\2\u012f\u0132\5\20\t\2\u0130\u0132\5\16\b\2\u0131\u012e")
        buf.write("\3\2\2\2\u0131\u012f\3\2\2\2\u0131\u0130\3\2\2\2\u0132")
        buf.write("\r\3\2\2\2\u0133\u0134\7\13\2\2\u0134\u0135\5\20\t\2\u0135")
        buf.write("\17\3\2\2\2\u0136\u013a\7\21\2\2\u0137\u013b\5\u00caf")
        buf.write("\2\u0138\u013b\5\u00f6|\2\u0139\u013b\5\u00fa~\2\u013a")
        buf.write("\u0137\3\2\2\2\u013a\u0138\3\2\2\2\u013a\u0139\3\2\2\2")
        buf.write("\u013b\u013c\3\2\2\2\u013c\u013f\5\22\n\2\u013d\u013e")
        buf.write("\7Y\2\2\u013e\u0140\5\u00b0Y\2\u013f\u013d\3\2\2\2\u013f")
        buf.write("\u0140\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0142\7>\2\2")
        buf.write("\u0142\u0143\5b\62\2\u0143\21\3\2\2\2\u0144\u0146\7;\2")
        buf.write("\2\u0145\u0147\5\24\13\2\u0146\u0145\3\2\2\2\u0146\u0147")
        buf.write("\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u0149\7<\2\2\u0149")
        buf.write("\23\3\2\2\2\u014a\u014d\5\26\f\2\u014b\u014c\7A\2\2\u014c")
        buf.write("\u014e\5\u00b0Y\2\u014d\u014b\3\2\2\2\u014d\u014e\3\2")
        buf.write("\2\2\u014e\u0157\3\2\2\2\u014f\u0150\7=\2\2\u0150\u0153")
        buf.write("\5\26\f\2\u0151\u0152\7A\2\2\u0152\u0154\5\u00b0Y\2\u0153")
        buf.write("\u0151\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0156\3\2\2\2")
        buf.write("\u0155\u014f\3\2\2\2\u0156\u0159\3\2\2\2\u0157\u0155\3")
        buf.write("\2\2\2\u0157\u0158\3\2\2\2\u0158\u017b\3\2\2\2\u0159\u0157")
        buf.write("\3\2\2\2\u015a\u0179\7=\2\2\u015b\u015d\7:\2\2\u015c\u015e")
        buf.write("\5\26\f\2\u015d\u015c\3\2\2\2\u015d\u015e\3\2\2\2\u015e")
        buf.write("\u0167\3\2\2\2\u015f\u0160\7=\2\2\u0160\u0163\5\26\f\2")
        buf.write("\u0161\u0162\7A\2\2\u0162\u0164\5\u00b0Y\2\u0163\u0161")
        buf.write("\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0166\3\2\2\2\u0165")
        buf.write("\u015f\3\2\2\2\u0166\u0169\3\2\2\2\u0167\u0165\3\2\2\2")
        buf.write("\u0167\u0168\3\2\2\2\u0168\u0172\3\2\2\2\u0169\u0167\3")
        buf.write("\2\2\2\u016a\u0170\7=\2\2\u016b\u016c\7@\2\2\u016c\u016e")
        buf.write("\5\26\f\2\u016d\u016f\7=\2\2\u016e\u016d\3\2\2\2\u016e")
        buf.write("\u016f\3\2\2\2\u016f\u0171\3\2\2\2\u0170\u016b\3\2\2\2")
        buf.write("\u0170\u0171\3\2\2\2\u0171\u0173\3\2\2\2\u0172\u016a\3")
        buf.write("\2\2\2\u0172\u0173\3\2\2\2\u0173\u017a\3\2\2\2\u0174\u0175")
        buf.write("\7@\2\2\u0175\u0177\5\26\f\2\u0176\u0178\7=\2\2\u0177")
        buf.write("\u0176\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u017a\3\2\2\2")
        buf.write("\u0179\u015b\3\2\2\2\u0179\u0174\3\2\2\2\u0179\u017a\3")
        buf.write("\2\2\2\u017a\u017c\3\2\2\2\u017b\u015a\3\2\2\2\u017b\u017c")
        buf.write("\3\2\2\2\u017c\u019c\3\2\2\2\u017d\u017f\7:\2\2\u017e")
        buf.write("\u0180\5\26\f\2\u017f\u017e\3\2\2\2\u017f\u0180\3\2\2")
        buf.write("\2\u0180\u0189\3\2\2\2\u0181\u0182\7=\2\2\u0182\u0185")
        buf.write("\5\26\f\2\u0183\u0184\7A\2\2\u0184\u0186\5\u00b0Y\2\u0185")
        buf.write("\u0183\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0188\3\2\2\2")
        buf.write("\u0187\u0181\3\2\2\2\u0188\u018b\3\2\2\2\u0189\u0187\3")
        buf.write("\2\2\2\u0189\u018a\3\2\2\2\u018a\u0194\3\2\2\2\u018b\u0189")
        buf.write("\3\2\2\2\u018c\u0192\7=\2\2\u018d\u018e\7@\2\2\u018e\u0190")
        buf.write("\5\26\f\2\u018f\u0191\7=\2\2\u0190\u018f\3\2\2\2\u0190")
        buf.write("\u0191\3\2\2\2\u0191\u0193\3\2\2\2\u0192\u018d\3\2\2\2")
        buf.write("\u0192\u0193\3\2\2\2\u0193\u0195\3\2\2\2\u0194\u018c\3")
        buf.write("\2\2\2\u0194\u0195\3\2\2\2\u0195\u019c\3\2\2\2\u0196\u0197")
        buf.write("\7@\2\2\u0197\u0199\5\26\f\2\u0198\u019a\7=\2\2\u0199")
        buf.write("\u0198\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019c\3\2\2\2")
        buf.write("\u019b\u014a\3\2\2\2\u019b\u017d\3\2\2\2\u019b\u0196\3")
        buf.write("\2\2\2\u019c\25\3\2\2\2\u019d\u01a0\5\u00caf\2\u019e\u019f")
        buf.write("\7>\2\2\u019f\u01a1\5\u00b0Y\2\u01a0\u019e\3\2\2\2\u01a0")
        buf.write("\u01a1\3\2\2\2\u01a1\u01a4\3\2\2\2\u01a2\u01a4\5\u00f4")
        buf.write("{\2\u01a3\u019d\3\2\2\2\u01a3\u01a2\3\2\2\2\u01a4\27\3")
        buf.write("\2\2\2\u01a5\u01a8\5\32\16\2\u01a6\u01a7\7A\2\2\u01a7")
        buf.write("\u01a9\5\u00b0Y\2\u01a8\u01a6\3\2\2\2\u01a8\u01a9\3\2")
        buf.write("\2\2\u01a9\u01b2\3\2\2\2\u01aa\u01ab\7=\2\2\u01ab\u01ae")
        buf.write("\5\32\16\2\u01ac\u01ad\7A\2\2\u01ad\u01af\5\u00b0Y\2\u01ae")
        buf.write("\u01ac\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b1\3\2\2\2")
        buf.write("\u01b0\u01aa\3\2\2\2\u01b1\u01b4\3\2\2\2\u01b2\u01b0\3")
        buf.write("\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01d6\3\2\2\2\u01b4\u01b2")
        buf.write("\3\2\2\2\u01b5\u01d4\7=\2\2\u01b6\u01b8\7:\2\2\u01b7\u01b9")
        buf.write("\5\32\16\2\u01b8\u01b7\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9")
        buf.write("\u01c2\3\2\2\2\u01ba\u01bb\7=\2\2\u01bb\u01be\5\32\16")
        buf.write("\2\u01bc\u01bd\7A\2\2\u01bd\u01bf\5\u00b0Y\2\u01be\u01bc")
        buf.write("\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c1\3\2\2\2\u01c0")
        buf.write("\u01ba\3\2\2\2\u01c1\u01c4\3\2\2\2\u01c2\u01c0\3\2\2\2")
        buf.write("\u01c2\u01c3\3\2\2\2\u01c3\u01cd\3\2\2\2\u01c4\u01c2\3")
        buf.write("\2\2\2\u01c5\u01cb\7=\2\2\u01c6\u01c7\7@\2\2\u01c7\u01c9")
        buf.write("\5\32\16\2\u01c8\u01ca\7=\2\2\u01c9\u01c8\3\2\2\2\u01c9")
        buf.write("\u01ca\3\2\2\2\u01ca\u01cc\3\2\2\2\u01cb\u01c6\3\2\2\2")
        buf.write("\u01cb\u01cc\3\2\2\2\u01cc\u01ce\3\2\2\2\u01cd\u01c5\3")
        buf.write("\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01d5\3\2\2\2\u01cf\u01d0")
        buf.write("\7@\2\2\u01d0\u01d2\5\32\16\2\u01d1\u01d3\7=\2\2\u01d2")
        buf.write("\u01d1\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d5\3\2\2\2")
        buf.write("\u01d4\u01b6\3\2\2\2\u01d4\u01cf\3\2\2\2\u01d4\u01d5\3")
        buf.write("\2\2\2\u01d5\u01d7\3\2\2\2\u01d6\u01b5\3\2\2\2\u01d6\u01d7")
        buf.write("\3\2\2\2\u01d7\u01f7\3\2\2\2\u01d8\u01da\7:\2\2\u01d9")
        buf.write("\u01db\5\32\16\2\u01da\u01d9\3\2\2\2\u01da\u01db\3\2\2")
        buf.write("\2\u01db\u01e4\3\2\2\2\u01dc\u01dd\7=\2\2\u01dd\u01e0")
        buf.write("\5\32\16\2\u01de\u01df\7A\2\2\u01df\u01e1\5\u00b0Y\2\u01e0")
        buf.write("\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e3\3\2\2\2")
        buf.write("\u01e2\u01dc\3\2\2\2\u01e3\u01e6\3\2\2\2\u01e4\u01e2\3")
        buf.write("\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01ef\3\2\2\2\u01e6\u01e4")
        buf.write("\3\2\2\2\u01e7\u01ed\7=\2\2\u01e8\u01e9\7@\2\2\u01e9\u01eb")
        buf.write("\5\32\16\2\u01ea\u01ec\7=\2\2\u01eb\u01ea\3\2\2\2\u01eb")
        buf.write("\u01ec\3\2\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01e8\3\2\2\2")
        buf.write("\u01ed\u01ee\3\2\2\2\u01ee\u01f0\3\2\2\2\u01ef\u01e7\3")
        buf.write("\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f7\3\2\2\2\u01f1\u01f2")
        buf.write("\7@\2\2\u01f2\u01f4\5\32\16\2\u01f3\u01f5\7=\2\2\u01f4")
        buf.write("\u01f3\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f7\3\2\2\2")
        buf.write("\u01f6\u01a5\3\2\2\2\u01f6\u01d8\3\2\2\2\u01f6\u01f1\3")
        buf.write("\2\2\2\u01f7\31\3\2\2\2\u01f8\u01fb\5\u00caf\2\u01f9\u01fb")
        buf.write("\5\u00f4{\2\u01fa\u01f8\3\2\2\2\u01fa\u01f9\3\2\2\2\u01fb")
        buf.write("\33\3\2\2\2\u01fc\u01ff\5\36\20\2\u01fd\u01ff\5P)\2\u01fe")
        buf.write("\u01fc\3\2\2\2\u01fe\u01fd\3\2\2\2\u01ff\35\3\2\2\2\u0200")
        buf.write("\u0205\5 \21\2\u0201\u0202\7?\2\2\u0202\u0204\5 \21\2")
        buf.write("\u0203\u0201\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0203\3")
        buf.write("\2\2\2\u0205\u0206\3\2\2\2\u0206\u0209\3\2\2\2\u0207\u0205")
        buf.write("\3\2\2\2\u0208\u020a\7?\2\2\u0209\u0208\3\2\2\2\u0209")
        buf.write("\u020a\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020c\7.\2\2")
        buf.write("\u020c\37\3\2\2\2\u020d\u0217\5\u00f4{\2\u020e\u0217\5")
        buf.write("\"\22\2\u020f\u0217\5*\26\2\u0210\u0217\5,\27\2\u0211")
        buf.write("\u0217\5.\30\2\u0212\u0217\5:\36\2\u0213\u0217\5J&\2\u0214")
        buf.write("\u0217\5L\'\2\u0215\u0217\5N(\2\u0216\u020d\3\2\2\2\u0216")
        buf.write("\u020e\3\2\2\2\u0216\u020f\3\2\2\2\u0216\u0210\3\2\2\2")
        buf.write("\u0216\u0211\3\2\2\2\u0216\u0212\3\2\2\2\u0216\u0213\3")
        buf.write("\2\2\2\u0216\u0214\3\2\2\2\u0216\u0215\3\2\2\2\u0217!")
        buf.write("\3\2\2\2\u0218\u0229\5&\24\2\u0219\u022a\5$\23\2\u021a")
        buf.write("\u021d\5(\25\2\u021b\u021e\5\u00eav\2\u021c\u021e\5\u00d8")
        buf.write("m\2\u021d\u021b\3\2\2\2\u021d\u021c\3\2\2\2\u021e\u022a")
        buf.write("\3\2\2\2\u021f\u0222\7A\2\2\u0220\u0223\5\u00eav\2\u0221")
        buf.write("\u0223\5&\24\2\u0222\u0220\3\2\2\2\u0222\u0221\3\2\2\2")
        buf.write("\u0223\u0225\3\2\2\2\u0224\u021f\3\2\2\2\u0225\u0228\3")
        buf.write("\2\2\2\u0226\u0224\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u022a")
        buf.write("\3\2\2\2\u0228\u0226\3\2\2\2\u0229\u0219\3\2\2\2\u0229")
        buf.write("\u021a\3\2\2\2\u0229\u0226\3\2\2\2\u022a#\3\2\2\2\u022b")
        buf.write("\u022c\7>\2\2\u022c\u022f\5\u00b0Y\2\u022d\u022e\7A\2")
        buf.write("\2\u022e\u0230\5\u00b0Y\2\u022f\u022d\3\2\2\2\u022f\u0230")
        buf.write("\3\2\2\2\u0230%\3\2\2\2\u0231\u0234\5\u00b0Y\2\u0232\u0234")
        buf.write("\5\u00c2b\2\u0233\u0231\3\2\2\2\u0233\u0232\3\2\2\2\u0234")
        buf.write("\u023c\3\2\2\2\u0235\u0238\7=\2\2\u0236\u0239\5\u00b0")
        buf.write("Y\2\u0237\u0239\5\u00c2b\2\u0238\u0236\3\2\2\2\u0238\u0237")
        buf.write("\3\2\2\2\u0239\u023b\3\2\2\2\u023a\u0235\3\2\2\2\u023b")
        buf.write("\u023e\3\2\2\2\u023c\u023a\3\2\2\2\u023c\u023d\3\2\2\2")
        buf.write("\u023d\u0240\3\2\2\2\u023e\u023c\3\2\2\2\u023f\u0241\7")
        buf.write("=\2\2\u0240\u023f\3\2\2\2\u0240\u0241\3\2\2\2\u0241\'")
        buf.write("\3\2\2\2\u0242\u0243\t\2\2\2\u0243)\3\2\2\2\u0244\u0245")
        buf.write("\7\22\2\2\u0245\u0246\5\u00d6l\2\u0246+\3\2\2\2\u0247")
        buf.write("\u0248\7%\2\2\u0248-\3\2\2\2\u0249\u024f\5\60\31\2\u024a")
        buf.write("\u024f\5\62\32\2\u024b\u024f\5\64\33\2\u024c\u024f\58")
        buf.write("\35\2\u024d\u024f\5\66\34\2\u024e\u0249\3\2\2\2\u024e")
        buf.write("\u024a\3\2\2\2\u024e\u024b\3\2\2\2\u024e\u024c\3\2\2\2")
        buf.write("\u024e\u024d\3\2\2\2\u024f/\3\2\2\2\u0250\u0251\7\r\2")
        buf.write("\2\u0251\61\3\2\2\2\u0252\u0253\7\20\2\2\u0253\63\3\2")
        buf.write("\2\2\u0254\u0256\7\'\2\2\u0255\u0257\5\u00d8m\2\u0256")
        buf.write("\u0255\3\2\2\2\u0256\u0257\3\2\2\2\u0257\65\3\2\2\2\u0258")
        buf.write("\u0259\5\u00eav\2\u0259\67\3\2\2\2\u025a\u0260\7&\2\2")
        buf.write("\u025b\u025e\5\u00b0Y\2\u025c\u025d\7\31\2\2\u025d\u025f")
        buf.write("\5\u00b0Y\2\u025e\u025c\3\2\2\2\u025e\u025f\3\2\2\2\u025f")
        buf.write("\u0261\3\2\2\2\u0260\u025b\3\2\2\2\u0260\u0261\3\2\2\2")
        buf.write("\u02619\3\2\2\2\u0262\u0265\5<\37\2\u0263\u0265\5> \2")
        buf.write("\u0264\u0262\3\2\2\2\u0264\u0263\3\2\2\2\u0265;\3\2\2")
        buf.write("\2\u0266\u0267\7\34\2\2\u0267\u0268\5F$\2\u0268=\3\2\2")
        buf.write("\2\u0269\u0276\7\31\2\2\u026a\u026c\t\3\2\2\u026b\u026a")
        buf.write("\3\2\2\2\u026c\u026f\3\2\2\2\u026d\u026b\3\2\2\2\u026d")
        buf.write("\u026e\3\2\2\2\u026e\u0270\3\2\2\2\u026f\u026d\3\2\2\2")
        buf.write("\u0270\u0277\5H%\2\u0271\u0273\t\3\2\2\u0272\u0271\3\2")
        buf.write("\2\2\u0273\u0274\3\2\2\2\u0274\u0272\3\2\2\2\u0274\u0275")
        buf.write("\3\2\2\2\u0275\u0277\3\2\2\2\u0276\u026d\3\2\2\2\u0276")
        buf.write("\u0272\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u027f\7\34\2")
        buf.write("\2\u0279\u0280\7:\2\2\u027a\u027b\7;\2\2\u027b\u027c\5")
        buf.write("D#\2\u027c\u027d\7<\2\2\u027d\u0280\3\2\2\2\u027e\u0280")
        buf.write("\5D#\2\u027f\u0279\3\2\2\2\u027f\u027a\3\2\2\2\u027f\u027e")
        buf.write("\3\2\2\2\u0280?\3\2\2\2\u0281\u0284\5\u00caf\2\u0282\u0283")
        buf.write("\7\t\2\2\u0283\u0285\5\u00caf\2\u0284\u0282\3\2\2\2\u0284")
        buf.write("\u0285\3\2\2\2\u0285A\3\2\2\2\u0286\u0289\5H%\2\u0287")
        buf.write("\u0288\7\t\2\2\u0288\u028a\5\u00caf\2\u0289\u0287\3\2")
        buf.write("\2\2\u0289\u028a\3\2\2\2\u028aC\3\2\2\2\u028b\u0290\5")
        buf.write("@!\2\u028c\u028d\7=\2\2\u028d\u028f\5@!\2\u028e\u028c")
        buf.write("\3\2\2\2\u028f\u0292\3\2\2\2\u0290\u028e\3\2\2\2\u0290")
        buf.write("\u0291\3\2\2\2\u0291\u0294\3\2\2\2\u0292\u0290\3\2\2\2")
        buf.write("\u0293\u0295\7=\2\2\u0294\u0293\3\2\2\2\u0294\u0295\3")
        buf.write("\2\2\2\u0295E\3\2\2\2\u0296\u029b\5B\"\2\u0297\u0298\7")
        buf.write("=\2\2\u0298\u029a\5B\"\2\u0299\u0297\3\2\2\2\u029a\u029d")
        buf.write("\3\2\2\2\u029b\u0299\3\2\2\2\u029b\u029c\3\2\2\2\u029c")
        buf.write("G\3\2\2\2\u029d\u029b\3\2\2\2\u029e\u02a3\5\u00caf\2\u029f")
        buf.write("\u02a0\78\2\2\u02a0\u02a2\5\u00caf\2\u02a1\u029f\3\2\2")
        buf.write("\2\u02a2\u02a5\3\2\2\2\u02a3\u02a1\3\2\2\2\u02a3\u02a4")
        buf.write("\3\2\2\2\u02a4I\3\2\2\2\u02a5\u02a3\3\2\2\2\u02a6\u02a7")
        buf.write("\7\32\2\2\u02a7\u02ac\5\u00caf\2\u02a8\u02a9\7=\2\2\u02a9")
        buf.write("\u02ab\5\u00caf\2\u02aa\u02a8\3\2\2\2\u02ab\u02ae\3\2")
        buf.write("\2\2\u02ac\u02aa\3\2\2\2\u02ac\u02ad\3\2\2\2\u02adK\3")
        buf.write("\2\2\2\u02ae\u02ac\3\2\2\2\u02af\u02b0\7\"\2\2\u02b0\u02b5")
        buf.write("\5\u00caf\2\u02b1\u02b2\7=\2\2\u02b2\u02b4\5\u00caf\2")
        buf.write("\u02b3\u02b1\3\2\2\2\u02b4\u02b7\3\2\2\2\u02b5\u02b3\3")
        buf.write("\2\2\2\u02b5\u02b6\3\2\2\2\u02b6M\3\2\2\2\u02b7\u02b5")
        buf.write("\3\2\2\2\u02b8\u02b9\7\n\2\2\u02b9\u02bc\5\u00b0Y\2\u02ba")
        buf.write("\u02bb\7=\2\2\u02bb\u02bd\5\u00b0Y\2\u02bc\u02ba\3\2\2")
        buf.write("\2\u02bc\u02bd\3\2\2\2\u02bdO\3\2\2\2\u02be\u02ca\5\u00fc")
        buf.write("\177\2\u02bf\u02ca\5T+\2\u02c0\u02ca\5V,\2\u02c1\u02ca")
        buf.write("\5X-\2\u02c2\u02ca\5Z.\2\u02c3\u02ca\5\\/\2\u02c4\u02ca")
        buf.write("\5\20\t\2\u02c5\u02ca\5\u00dco\2\u02c6\u02ca\5\f\7\2\u02c7")
        buf.write("\u02ca\5R*\2\u02c8\u02ca\5d\63\2\u02c9\u02be\3\2\2\2\u02c9")
        buf.write("\u02bf\3\2\2\2\u02c9\u02c0\3\2\2\2\u02c9\u02c1\3\2\2\2")
        buf.write("\u02c9\u02c2\3\2\2\2\u02c9\u02c3\3\2\2\2\u02c9\u02c4\3")
        buf.write("\2\2\2\u02c9\u02c5\3\2\2\2\u02c9\u02c6\3\2\2\2\u02c9\u02c7")
        buf.write("\3\2\2\2\u02c9\u02c8\3\2\2\2\u02caQ\3\2\2\2\u02cb\u02cf")
        buf.write("\7\13\2\2\u02cc\u02d0\5\20\t\2\u02cd\u02d0\5\\/\2\u02ce")
        buf.write("\u02d0\5X-\2\u02cf\u02cc\3\2\2\2\u02cf\u02cd\3\2\2\2\u02cf")
        buf.write("\u02ce\3\2\2\2\u02d0S\3\2\2\2\u02d1\u02d2\7\33\2\2\u02d2")
        buf.write("\u02d3\5\u00b0Y\2\u02d3\u02d4\7>\2\2\u02d4\u02dc\5b\62")
        buf.write("\2\u02d5\u02d6\7\23\2\2\u02d6\u02d7\5\u00b0Y\2\u02d7\u02d8")
        buf.write("\7>\2\2\u02d8\u02d9\5b\62\2\u02d9\u02db\3\2\2\2\u02da")
        buf.write("\u02d5\3\2\2\2\u02db\u02de\3\2\2\2\u02dc\u02da\3\2\2\2")
        buf.write("\u02dc\u02dd\3\2\2\2\u02dd\u02e2\3\2\2\2\u02de\u02dc\3")
        buf.write("\2\2\2\u02df\u02e0\7\24\2\2\u02e0\u02e1\7>\2\2\u02e1\u02e3")
        buf.write("\5b\62\2\u02e2\u02df\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3")
        buf.write("U\3\2\2\2\u02e4\u02e5\7+\2\2\u02e5\u02e6\5\u00b0Y\2\u02e6")
        buf.write("\u02e7\7>\2\2\u02e7\u02eb\5b\62\2\u02e8\u02e9\7\24\2\2")
        buf.write("\u02e9\u02ea\7>\2\2\u02ea\u02ec\5b\62\2\u02eb\u02e8\3")
        buf.write("\2\2\2\u02eb\u02ec\3\2\2\2\u02ecW\3\2\2\2\u02ed\u02ee")
        buf.write("\7\30\2\2\u02ee\u02ef\5\u00d6l\2\u02ef\u02f0\7\35\2\2")
        buf.write("\u02f0\u02f1\5\u00d8m\2\u02f1\u02f2\7>\2\2\u02f2\u02f6")
        buf.write("\5b\62\2\u02f3\u02f4\7\24\2\2\u02f4\u02f5\7>\2\2\u02f5")
        buf.write("\u02f7\5b\62\2\u02f6\u02f3\3\2\2\2\u02f6\u02f7\3\2\2\2")
        buf.write("\u02f7Y\3\2\2\2\u02f8\u02f9\7)\2\2\u02f9\u02fa\7>\2\2")
        buf.write("\u02fa\u0310\5b\62\2\u02fb\u02fc\5`\61\2\u02fc\u02fd\7")
        buf.write(">\2\2\u02fd\u02fe\5b\62\2\u02fe\u0300\3\2\2\2\u02ff\u02fb")
        buf.write("\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u02ff\3\2\2\2\u0301")
        buf.write("\u0302\3\2\2\2\u0302\u0306\3\2\2\2\u0303\u0304\7\24\2")
        buf.write("\2\u0304\u0305\7>\2\2\u0305\u0307\5b\62\2\u0306\u0303")
        buf.write("\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u030b\3\2\2\2\u0308")
        buf.write("\u0309\7\27\2\2\u0309\u030a\7>\2\2\u030a\u030c\5b\62\2")
        buf.write("\u030b\u0308\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u0311\3")
        buf.write("\2\2\2\u030d\u030e\7\27\2\2\u030e\u030f\7>\2\2\u030f\u0311")
        buf.write("\5b\62\2\u0310\u02ff\3\2\2\2\u0310\u030d\3\2\2\2\u0311")
        buf.write("[\3\2\2\2\u0312\u0313\7,\2\2\u0313\u0318\5^\60\2\u0314")
        buf.write("\u0315\7=\2\2\u0315\u0317\5^\60\2\u0316\u0314\3\2\2\2")
        buf.write("\u0317\u031a\3\2\2\2\u0318\u0316\3\2\2\2\u0318\u0319\3")
        buf.write("\2\2\2\u0319\u031b\3\2\2\2\u031a\u0318\3\2\2\2\u031b\u031c")
        buf.write("\7>\2\2\u031c\u031d\5b\62\2\u031d]\3\2\2\2\u031e\u0321")
        buf.write("\5\u00b0Y\2\u031f\u0320\7\t\2\2\u0320\u0322\5\u00c4c\2")
        buf.write("\u0321\u031f\3\2\2\2\u0321\u0322\3\2\2\2\u0322_\3\2\2")
        buf.write("\2\u0323\u0329\7\25\2\2\u0324\u0327\5\u00b0Y\2\u0325\u0326")
        buf.write("\7\t\2\2\u0326\u0328\5\u00caf\2\u0327\u0325\3\2\2\2\u0327")
        buf.write("\u0328\3\2\2\2\u0328\u032a\3\2\2\2\u0329\u0324\3\2\2\2")
        buf.write("\u0329\u032a\3\2\2\2\u032aa\3\2\2\2\u032b\u0336\5\36\20")
        buf.write("\2\u032c\u032d\7.\2\2\u032d\u032f\7\3\2\2\u032e\u0330")
        buf.write("\5\34\17\2\u032f\u032e\3\2\2\2\u0330\u0331\3\2\2\2\u0331")
        buf.write("\u032f\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0333\3\2\2\2")
        buf.write("\u0333\u0334\7\4\2\2\u0334\u0336\3\2\2\2\u0335\u032b\3")
        buf.write("\2\2\2\u0335\u032c\3\2\2\2\u0336c\3\2\2\2\u0337\u0338")
        buf.write("\7 \2\2\u0338\u0339\5f\64\2\u0339\u033a\7>\2\2\u033a\u033b")
        buf.write("\7.\2\2\u033b\u033d\7\3\2\2\u033c\u033e\5l\67\2\u033d")
        buf.write("\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u033d\3\2\2\2")
        buf.write("\u033f\u0340\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0342\7")
        buf.write("\4\2\2\u0342e\3\2\2\2\u0343\u0344\5j\66\2\u0344\u0346")
        buf.write("\7=\2\2\u0345\u0347\5h\65\2\u0346\u0345\3\2\2\2\u0346")
        buf.write("\u0347\3\2\2\2\u0347\u034a\3\2\2\2\u0348\u034a\5\u00b0")
        buf.write("Y\2\u0349\u0343\3\2\2\2\u0349\u0348\3\2\2\2\u034ag\3\2")
        buf.write("\2\2\u034b\u034d\7=\2\2\u034c\u034e\5j\66\2\u034d\u034c")
        buf.write("\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u034d\3\2\2\2\u034f")
        buf.write("\u0350\3\2\2\2\u0350\u0352\3\2\2\2\u0351\u0353\7=\2\2")
        buf.write("\u0352\u0351\3\2\2\2\u0352\u0353\3\2\2\2\u0353i\3\2\2")
        buf.write("\2\u0354\u0355\7:\2\2\u0355\u0358\5\u00c4c\2\u0356\u0358")
        buf.write("\5\u00b0Y\2\u0357\u0354\3\2\2\2\u0357\u0356\3\2\2\2\u0358")
        buf.write("k\3\2\2\2\u0359\u035a\7\16\2\2\u035a\u035c\5p9\2\u035b")
        buf.write("\u035d\5n8\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2\2\2\u035d")
        buf.write("\u035e\3\2\2\2\u035e\u035f\7>\2\2\u035f\u0360\5b\62\2")
        buf.write("\u0360m\3\2\2\2\u0361\u0362\7\33\2\2\u0362\u0363\5\u00b0")
        buf.write("Y\2\u0363o\3\2\2\2\u0364\u0367\5\u0098M\2\u0365\u0367")
        buf.write("\5r:\2\u0366\u0364\3\2\2\2\u0366\u0365\3\2\2\2\u0367q")
        buf.write("\3\2\2\2\u0368\u036b\5t;\2\u0369\u036b\5v<\2\u036a\u0368")
        buf.write("\3\2\2\2\u036a\u0369\3\2\2\2\u036bs\3\2\2\2\u036c\u036d")
        buf.write("\5v<\2\u036d\u036e\7\t\2\2\u036e\u036f\5\u008aF\2\u036f")
        buf.write("u\3\2\2\2\u0370\u0375\5x=\2\u0371\u0372\7D\2\2\u0372\u0374")
        buf.write("\5x=\2\u0373\u0371\3\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373")
        buf.write("\3\2\2\2\u0375\u0376\3\2\2\2\u0376w\3\2\2\2\u0377\u0375")
        buf.write("\3\2\2\2\u0378\u0381\5\u008cG\2\u0379\u0381\5z>\2\u037a")
        buf.write("\u0381\5\u0088E\2\u037b\u0381\5\u008eH\2\u037c\u0381\5")
        buf.write("\u0094K\2\u037d\u0381\5\u0096L\2\u037e\u0381\5\u00a0Q")
        buf.write("\2\u037f\u0381\5\u00a8U\2\u0380\u0378\3\2\2\2\u0380\u0379")
        buf.write("\3\2\2\2\u0380\u037a\3\2\2\2\u0380\u037b\3\2\2\2\u0380")
        buf.write("\u037c\3\2\2\2\u0380\u037d\3\2\2\2\u0380\u037e\3\2\2\2")
        buf.write("\u0380\u037f\3\2\2\2\u0381y\3\2\2\2\u0382\u0383\5\u0080")
        buf.write("A\2\u0383\u0384\6>\2\2\u0384\u038b\3\2\2\2\u0385\u038b")
        buf.write("\5~@\2\u0386\u038b\5\u00eex\2\u0387\u038b\7!\2\2\u0388")
        buf.write("\u038b\7(\2\2\u0389\u038b\7\26\2\2\u038a\u0382\3\2\2\2")
        buf.write("\u038a\u0385\3\2\2\2\u038a\u0386\3\2\2\2\u038a\u0387\3")
        buf.write("\2\2\2\u038a\u0388\3\2\2\2\u038a\u0389\3\2\2\2\u038b{")
        buf.write("\3\2\2\2\u038c\u038d\5\u0080A\2\u038d\u038e\6?\3\2\u038e")
        buf.write("\u0395\3\2\2\2\u038f\u0395\5~@\2\u0390\u0395\5\u00eex")
        buf.write("\2\u0391\u0395\7!\2\2\u0392\u0395\7(\2\2\u0393\u0395\7")
        buf.write("\26\2\2\u0394\u038c\3\2\2\2\u0394\u038f\3\2\2\2\u0394")
        buf.write("\u0390\3\2\2\2\u0394\u0391\3\2\2\2\u0394\u0392\3\2\2\2")
        buf.write("\u0394\u0393\3\2\2\2\u0395}\3\2\2\2\u0396\u0397\5\u0082")
        buf.write("B\2\u0397\u0398\7I\2\2\u0398\u0399\5\u0086D\2\u0399\u039f")
        buf.write("\3\2\2\2\u039a\u039b\5\u0082B\2\u039b\u039c\7J\2\2\u039c")
        buf.write("\u039d\5\u0086D\2\u039d\u039f\3\2\2\2\u039e\u0396\3\2")
        buf.write("\2\2\u039e\u039a\3\2\2\2\u039f\177\3\2\2\2\u03a0\u03a4")
        buf.write("\7\6\2\2\u03a1\u03a2\7J\2\2\u03a2\u03a4\7\6\2\2\u03a3")
        buf.write("\u03a0\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a4\u0081\3\2\2\2")
        buf.write("\u03a5\u03a9\5\u0084C\2\u03a6\u03a7\7J\2\2\u03a7\u03a9")
        buf.write("\5\u0084C\2\u03a8\u03a5\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a9")
        buf.write("\u0083\3\2\2\2\u03aa\u03ab\7\6\2\2\u03ab\u0085\3\2\2\2")
        buf.write("\u03ac\u03ad\7\6\2\2\u03ad\u0087\3\2\2\2\u03ae\u03af\5")
        buf.write("\u008aF\2\u03af\u0089\3\2\2\2\u03b0\u03b1\5\u00caf\2\u03b1")
        buf.write("\u03b2\6F\4\2\u03b2\u008b\3\2\2\2\u03b3\u03b4\7*\2\2\u03b4")
        buf.write("\u008d\3\2\2\2\u03b5\u03b6\5\u0090I\2\u03b6\u03b7\6H\5")
        buf.write("\2\u03b7\u008f\3\2\2\2\u03b8\u03bb\5\u00caf\2\u03b9\u03ba")
        buf.write("\78\2\2\u03ba\u03bc\5\u00caf\2\u03bb\u03b9\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2")
        buf.write("\u03be\u0091\3\2\2\2\u03bf\u03c2\5\u0090I\2\u03c0\u03c2")
        buf.write("\5\u00caf\2\u03c1\u03bf\3\2\2\2\u03c1\u03c0\3\2\2\2\u03c2")
        buf.write("\u0093\3\2\2\2\u03c3\u03c4\7;\2\2\u03c4\u03c5\5r:\2\u03c5")
        buf.write("\u03c6\7<\2\2\u03c6\u0095\3\2\2\2\u03c7\u03c9\7B\2\2\u03c8")
        buf.write("\u03ca\5\u009aN\2\u03c9\u03c8\3\2\2\2\u03c9\u03ca\3\2")
        buf.write("\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03d2\7C\2\2\u03cc\u03ce")
        buf.write("\7;\2\2\u03cd\u03cf\5\u0098M\2\u03ce\u03cd\3\2\2\2\u03ce")
        buf.write("\u03cf\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d2\7<\2\2")
        buf.write("\u03d1\u03c7\3\2\2\2\u03d1\u03cc\3\2\2\2\u03d2\u0097\3")
        buf.write("\2\2\2\u03d3\u03d4\5\u009cO\2\u03d4\u03d6\7=\2\2\u03d5")
        buf.write("\u03d7\5\u009aN\2\u03d6\u03d5\3\2\2\2\u03d6\u03d7\3\2")
        buf.write("\2\2\u03d7\u0099\3\2\2\2\u03d8\u03dd\5\u009cO\2\u03d9")
        buf.write("\u03da\7=\2\2\u03da\u03dc\5\u009cO\2\u03db\u03d9\3\2\2")
        buf.write("\2\u03dc\u03df\3\2\2\2\u03dd\u03db\3\2\2\2\u03dd\u03de")
        buf.write("\3\2\2\2\u03de\u03e1\3\2\2\2\u03df\u03dd\3\2\2\2\u03e0")
        buf.write("\u03e2\7=\2\2\u03e1\u03e0\3\2\2\2\u03e1\u03e2\3\2\2\2")
        buf.write("\u03e2\u009b\3\2\2\2\u03e3\u03e6\5\u009eP\2\u03e4\u03e6")
        buf.write("\5r:\2\u03e5\u03e3\3\2\2\2\u03e5\u03e4\3\2\2\2\u03e6\u009d")
        buf.write("\3\2\2\2\u03e7\u03e8\7:\2\2\u03e8\u03ec\5\u008aF\2\u03e9")
        buf.write("\u03ea\7:\2\2\u03ea\u03ec\5\u008cG\2\u03eb\u03e7\3\2\2")
        buf.write("\2\u03eb\u03e9\3\2\2\2\u03ec\u009f\3\2\2\2\u03ed\u03ee")
        buf.write("\7O\2\2\u03ee\u0407\7P\2\2\u03ef\u03f0\7O\2\2\u03f0\u03f2")
        buf.write("\5\u00a6T\2\u03f1\u03f3\7=\2\2\u03f2\u03f1\3\2\2\2\u03f2")
        buf.write("\u03f3\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f5\7P\2\2")
        buf.write("\u03f5\u0407\3\2\2\2\u03f6\u03f7\7O\2\2\u03f7\u03f8\5")
        buf.write("\u00a2R\2\u03f8\u03f9\7=\2\2\u03f9\u03fb\5\u00a6T\2\u03fa")
        buf.write("\u03fc\7=\2\2\u03fb\u03fa\3\2\2\2\u03fb\u03fc\3\2\2\2")
        buf.write("\u03fc\u03fd\3\2\2\2\u03fd\u03fe\7P\2\2\u03fe\u0407\3")
        buf.write("\2\2\2\u03ff\u0400\7O\2\2\u0400\u0402\5\u00a2R\2\u0401")
        buf.write("\u0403\7=\2\2\u0402\u0401\3\2\2\2\u0402\u0403\3\2\2\2")
        buf.write("\u0403\u0404\3\2\2\2\u0404\u0405\7P\2\2\u0405\u0407\3")
        buf.write("\2\2\2\u0406\u03ed\3\2\2\2\u0406\u03ef\3\2\2\2\u0406\u03f6")
        buf.write("\3\2\2\2\u0406\u03ff\3\2\2\2\u0407\u00a1\3\2\2\2\u0408")
        buf.write("\u040d\5\u00a4S\2\u0409\u040a\7=\2\2\u040a\u040c\5\u00a4")
        buf.write("S\2\u040b\u0409\3\2\2\2\u040c\u040f\3\2\2\2\u040d\u040b")
        buf.write("\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u00a3\3\2\2\2\u040f")
        buf.write("\u040d\3\2\2\2\u0410\u0413\5|?\2\u0411\u0413\5\u0090I")
        buf.write("\2\u0412\u0410\3\2\2\2\u0412\u0411\3\2\2\2\u0413\u0414")
        buf.write("\3\2\2\2\u0414\u0415\7>\2\2\u0415\u0416\5r:\2\u0416\u00a5")
        buf.write("\3\2\2\2\u0417\u0418\7@\2\2\u0418\u0419\5\u008aF\2\u0419")
        buf.write("\u00a7\3\2\2\2\u041a\u041b\5\u0092J\2\u041b\u041c\7;\2")
        buf.write("\2\u041c\u041d\7<\2\2\u041d\u0439\3\2\2\2\u041e\u041f")
        buf.write("\5\u0092J\2\u041f\u0420\7;\2\2\u0420\u0422\5\u00aaV\2")
        buf.write("\u0421\u0423\7=\2\2\u0422\u0421\3\2\2\2\u0422\u0423\3")
        buf.write("\2\2\2\u0423\u0424\3\2\2\2\u0424\u0425\7<\2\2\u0425\u0439")
        buf.write("\3\2\2\2\u0426\u0427\5\u0092J\2\u0427\u0428\7;\2\2\u0428")
        buf.write("\u042a\5\u00acW\2\u0429\u042b\7=\2\2\u042a\u0429\3\2\2")
        buf.write("\2\u042a\u042b\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042d")
        buf.write("\7<\2\2\u042d\u0439\3\2\2\2\u042e\u042f\5\u0092J\2\u042f")
        buf.write("\u0430\7;\2\2\u0430\u0431\5\u00aaV\2\u0431\u0432\7=\2")
        buf.write("\2\u0432\u0434\5\u00acW\2\u0433\u0435\7=\2\2\u0434\u0433")
        buf.write("\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u0436\3\2\2\2\u0436")
        buf.write("\u0437\7<\2\2\u0437\u0439\3\2\2\2\u0438\u041a\3\2\2\2")
        buf.write("\u0438\u041e\3\2\2\2\u0438\u0426\3\2\2\2\u0438\u042e\3")
        buf.write("\2\2\2\u0439\u00a9\3\2\2\2\u043a\u043f\5r:\2\u043b\u043c")
        buf.write("\7=\2\2\u043c\u043e\5r:\2\u043d\u043b\3\2\2\2\u043e\u0441")
        buf.write("\3\2\2\2\u043f\u043d\3\2\2\2\u043f\u0440\3\2\2\2\u0440")
        buf.write("\u00ab\3\2\2\2\u0441\u043f\3\2\2\2\u0442\u0447\5\u00ae")
        buf.write("X\2\u0443\u0444\7=\2\2\u0444\u0446\5\u00aeX\2\u0445\u0443")
        buf.write("\3\2\2\2\u0446\u0449\3\2\2\2\u0447\u0445\3\2\2\2\u0447")
        buf.write("\u0448\3\2\2\2\u0448\u00ad\3\2\2\2\u0449\u0447\3\2\2\2")
        buf.write("\u044a\u044b\5\u00caf\2\u044b\u044c\7A\2\2\u044c\u044d")
        buf.write("\5r:\2\u044d\u00af\3\2\2\2\u044e\u0454\5\u00b8]\2\u044f")
        buf.write("\u0450\7\33\2\2\u0450\u0451\5\u00b8]\2\u0451\u0452\7\24")
        buf.write("\2\2\u0452\u0453\5\u00b0Y\2\u0453\u0455\3\2\2\2\u0454")
        buf.write("\u044f\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0458\3\2\2\2")
        buf.write("\u0456\u0458\5\u00b4[\2\u0457\u044e\3\2\2\2\u0457\u0456")
        buf.write("\3\2\2\2\u0458\u00b1\3\2\2\2\u0459\u045c\5\u00b8]\2\u045a")
        buf.write("\u045c\5\u00b6\\\2\u045b\u0459\3\2\2\2\u045b\u045a\3\2")
        buf.write("\2\2\u045c\u00b3\3\2\2\2\u045d\u045f\7\37\2\2\u045e\u0460")
        buf.write("\5\30\r\2\u045f\u045e\3\2\2\2\u045f\u0460\3\2\2\2\u0460")
        buf.write("\u0461\3\2\2\2\u0461\u0462\7>\2\2\u0462\u0463\5\u00b0")
        buf.write("Y\2\u0463\u00b5\3\2\2\2\u0464\u0466\7\37\2\2\u0465\u0467")
        buf.write("\5\30\r\2\u0466\u0465\3\2\2\2\u0466\u0467\3\2\2\2\u0467")
        buf.write("\u0468\3\2\2\2\u0468\u0469\7>\2\2\u0469\u046a\5\u00b2")
        buf.write("Z\2\u046a\u00b7\3\2\2\2\u046b\u0470\5\u00ba^\2\u046c\u046d")
        buf.write("\7$\2\2\u046d\u046f\5\u00ba^\2\u046e\u046c\3\2\2\2\u046f")
        buf.write("\u0472\3\2\2\2\u0470\u046e\3\2\2\2\u0470\u0471\3\2\2\2")
        buf.write("\u0471\u00b9\3\2\2\2\u0472\u0470\3\2\2\2\u0473\u0478\5")
        buf.write("\u00bc_\2\u0474\u0475\7\b\2\2\u0475\u0477\5\u00bc_\2\u0476")
        buf.write("\u0474\3\2\2\2\u0477\u047a\3\2\2\2\u0478\u0476\3\2\2\2")
        buf.write("\u0478\u0479\3\2\2\2\u0479\u00bb\3\2\2\2\u047a\u0478\3")
        buf.write("\2\2\2\u047b\u047c\7#\2\2\u047c\u047f\5\u00bc_\2\u047d")
        buf.write("\u047f\5\u00be`\2\u047e\u047b\3\2\2\2\u047e\u047d\3\2")
        buf.write("\2\2\u047f\u00bd\3\2\2\2\u0480\u0486\5\u00c4c\2\u0481")
        buf.write("\u0482\5\u00c0a\2\u0482\u0483\5\u00c4c\2\u0483\u0485\3")
        buf.write("\2\2\2\u0484\u0481\3\2\2\2\u0485\u0488\3\2\2\2\u0486\u0484")
        buf.write("\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u00bf\3\2\2\2\u0488")
        buf.write("\u0486\3\2\2\2\u0489\u0497\7Q\2\2\u048a\u0497\7R\2\2\u048b")
        buf.write("\u0497\7S\2\2\u048c\u0497\7T\2\2\u048d\u0497\7U\2\2\u048e")
        buf.write("\u0497\7V\2\2\u048f\u0497\7W\2\2\u0490\u0497\7\35\2\2")
        buf.write("\u0491\u0492\7#\2\2\u0492\u0497\7\35\2\2\u0493\u0497\7")
        buf.write("\36\2\2\u0494\u0495\7\36\2\2\u0495\u0497\7#\2\2\u0496")
        buf.write("\u0489\3\2\2\2\u0496\u048a\3\2\2\2\u0496\u048b\3\2\2\2")
        buf.write("\u0496\u048c\3\2\2\2\u0496\u048d\3\2\2\2\u0496\u048e\3")
        buf.write("\2\2\2\u0496\u048f\3\2\2\2\u0496\u0490\3\2\2\2\u0496\u0491")
        buf.write("\3\2\2\2\u0496\u0493\3\2\2\2\u0496\u0494\3\2\2\2\u0497")
        buf.write("\u00c1\3\2\2\2\u0498\u0499\7:\2\2\u0499\u049a\5\u00c4")
        buf.write("c\2\u049a\u00c3\3\2\2\2\u049b\u049c\bc\1\2\u049c\u04a4")
        buf.write("\5\u00c6d\2\u049d\u049f\t\4\2\2\u049e\u049d\3\2\2\2\u049f")
        buf.write("\u04a0\3\2\2\2\u04a0\u049e\3\2\2\2\u04a0\u04a1\3\2\2\2")
        buf.write("\u04a1\u04a2\3\2\2\2\u04a2\u04a4\5\u00c4c\t\u04a3\u049b")
        buf.write("\3\2\2\2\u04a3\u049e\3\2\2\2\u04a4\u04bc\3\2\2\2\u04a5")
        buf.write("\u04a6\f\n\2\2\u04a6\u04a7\7@\2\2\u04a7\u04bb\5\u00c4")
        buf.write("c\13\u04a8\u04a9\f\b\2\2\u04a9\u04aa\t\5\2\2\u04aa\u04bb")
        buf.write("\5\u00c4c\t\u04ab\u04ac\f\7\2\2\u04ac\u04ad\t\6\2\2\u04ad")
        buf.write("\u04bb\5\u00c4c\b\u04ae\u04af\f\6\2\2\u04af\u04b0\t\7")
        buf.write("\2\2\u04b0\u04bb\5\u00c4c\7\u04b1\u04b2\f\5\2\2\u04b2")
        buf.write("\u04b3\7F\2\2\u04b3\u04bb\5\u00c4c\6\u04b4\u04b5\f\4\2")
        buf.write("\2\u04b5\u04b6\7E\2\2\u04b6\u04bb\5\u00c4c\5\u04b7\u04b8")
        buf.write("\f\3\2\2\u04b8\u04b9\7D\2\2\u04b9\u04bb\5\u00c4c\4\u04ba")
        buf.write("\u04a5\3\2\2\2\u04ba\u04a8\3\2\2\2\u04ba\u04ab\3\2\2\2")
        buf.write("\u04ba\u04ae\3\2\2\2\u04ba\u04b1\3\2\2\2\u04ba\u04b4\3")
        buf.write("\2\2\2\u04ba\u04b7\3\2\2\2\u04bb\u04be\3\2\2\2\u04bc\u04ba")
        buf.write("\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u00c5\3\2\2\2\u04be")
        buf.write("\u04bc\3\2\2\2\u04bf\u04c1\7\f\2\2\u04c0\u04bf\3\2\2\2")
        buf.write("\u04c0\u04c1\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c6\5")
        buf.write("\u00c8e\2\u04c3\u04c5\5\u00ceh\2\u04c4\u04c3\3\2\2\2\u04c5")
        buf.write("\u04c8\3\2\2\2\u04c6\u04c4\3\2\2\2\u04c6\u04c7\3\2\2\2")
        buf.write("\u04c7\u00c7\3\2\2\2\u04c8\u04c6\3\2\2\2\u04c9\u04cc\7")
        buf.write(";\2\2\u04ca\u04cd\5\u00eav\2\u04cb\u04cd\5\u00ccg\2\u04cc")
        buf.write("\u04ca\3\2\2\2\u04cc\u04cb\3\2\2\2\u04cc\u04cd\3\2\2\2")
        buf.write("\u04cd\u04ce\3\2\2\2\u04ce\u04e6\7<\2\2\u04cf\u04d1\7")
        buf.write("B\2\2\u04d0\u04d2\5\u00ccg\2\u04d1\u04d0\3\2\2\2\u04d1")
        buf.write("\u04d2\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04e6\7C\2\2")
        buf.write("\u04d4\u04d6\7O\2\2\u04d5\u04d7\5\u00dan\2\u04d6\u04d5")
        buf.write("\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8")
        buf.write("\u04e6\7P\2\2\u04d9\u04e6\5\u00f4{\2\u04da\u04e6\5\u00ca")
        buf.write("f\2\u04db\u04e6\7\6\2\2\u04dc\u04de\7\5\2\2\u04dd\u04dc")
        buf.write("\3\2\2\2\u04de\u04df\3\2\2\2\u04df\u04dd\3\2\2\2\u04df")
        buf.write("\u04e0\3\2\2\2\u04e0\u04e6\3\2\2\2\u04e1\u04e6\79\2\2")
        buf.write("\u04e2\u04e6\7!\2\2\u04e3\u04e6\7(\2\2\u04e4\u04e6\7\26")
        buf.write("\2\2\u04e5\u04c9\3\2\2\2\u04e5\u04cf\3\2\2\2\u04e5\u04d4")
        buf.write("\3\2\2\2\u04e5\u04d9\3\2\2\2\u04e5\u04da\3\2\2\2\u04e5")
        buf.write("\u04db\3\2\2\2\u04e5\u04dd\3\2\2\2\u04e5\u04e1\3\2\2\2")
        buf.write("\u04e5\u04e2\3\2\2\2\u04e5\u04e3\3\2\2\2\u04e5\u04e4\3")
        buf.write("\2\2\2\u04e6\u00c9\3\2\2\2\u04e7\u04e8\t\b\2\2\u04e8\u00cb")
        buf.write("\3\2\2\2\u04e9\u04ec\5\u00b0Y\2\u04ea\u04ec\5\u00c2b\2")
        buf.write("\u04eb\u04e9\3\2\2\2\u04eb\u04ea\3\2\2\2\u04ec\u04fb\3")
        buf.write("\2\2\2\u04ed\u04fc\5\u00e4s\2\u04ee\u04f1\7=\2\2\u04ef")
        buf.write("\u04f2\5\u00b0Y\2\u04f0\u04f2\5\u00c2b\2\u04f1\u04ef\3")
        buf.write("\2\2\2\u04f1\u04f0\3\2\2\2\u04f2\u04f4\3\2\2\2\u04f3\u04ee")
        buf.write("\3\2\2\2\u04f4\u04f7\3\2\2\2\u04f5\u04f3\3\2\2\2\u04f5")
        buf.write("\u04f6\3\2\2\2\u04f6\u04f9\3\2\2\2\u04f7\u04f5\3\2\2\2")
        buf.write("\u04f8\u04fa\7=\2\2\u04f9\u04f8\3\2\2\2\u04f9\u04fa\3")
        buf.write("\2\2\2\u04fa\u04fc\3\2\2\2\u04fb\u04ed\3\2\2\2\u04fb\u04f5")
        buf.write("\3\2\2\2\u04fc\u00cd\3\2\2\2\u04fd\u04ff\7;\2\2\u04fe")
        buf.write("\u0500\5\u00dep\2\u04ff\u04fe\3\2\2\2\u04ff\u0500\3\2")
        buf.write("\2\2\u0500\u0501\3\2\2\2\u0501\u0509\7<\2\2\u0502\u0503")
        buf.write("\7B\2\2\u0503\u0504\5\u00d0i\2\u0504\u0505\7C\2\2\u0505")
        buf.write("\u0509\3\2\2\2\u0506\u0507\78\2\2\u0507\u0509\5\u00ca")
        buf.write("f\2\u0508\u04fd\3\2\2\2\u0508\u0502\3\2\2\2\u0508\u0506")
        buf.write("\3\2\2\2\u0509\u00cf\3\2\2\2\u050a\u050f\5\u00d2j\2\u050b")
        buf.write("\u050c\7=\2\2\u050c\u050e\5\u00d2j\2\u050d\u050b\3\2\2")
        buf.write("\2\u050e\u0511\3\2\2\2\u050f\u050d\3\2\2\2\u050f\u0510")
        buf.write("\3\2\2\2\u0510\u0513\3\2\2\2\u0511\u050f\3\2\2\2\u0512")
        buf.write("\u0514\7=\2\2\u0513\u0512\3\2\2\2\u0513\u0514\3\2\2\2")
        buf.write("\u0514\u00d1\3\2\2\2\u0515\u0521\5\u00b0Y\2\u0516\u0518")
        buf.write("\5\u00b0Y\2\u0517\u0516\3\2\2\2\u0517\u0518\3\2\2\2\u0518")
        buf.write("\u0519\3\2\2\2\u0519\u051b\7>\2\2\u051a\u051c\5\u00b0")
        buf.write("Y\2\u051b\u051a\3\2\2\2\u051b\u051c\3\2\2\2\u051c\u051e")
        buf.write("\3\2\2\2\u051d\u051f\5\u00d4k\2\u051e\u051d\3\2\2\2\u051e")
        buf.write("\u051f\3\2\2\2\u051f\u0521\3\2\2\2\u0520\u0515\3\2\2\2")
        buf.write("\u0520\u0517\3\2\2\2\u0521\u00d3\3\2\2\2\u0522\u0524\7")
        buf.write(">\2\2\u0523\u0525\5\u00b0Y\2\u0524\u0523\3\2\2\2\u0524")
        buf.write("\u0525\3\2\2\2\u0525\u00d5\3\2\2\2\u0526\u0529\5\u00c4")
        buf.write("c\2\u0527\u0529\5\u00c2b\2\u0528\u0526\3\2\2\2\u0528\u0527")
        buf.write("\3\2\2\2\u0529\u0531\3\2\2\2\u052a\u052d\7=\2\2\u052b")
        buf.write("\u052e\5\u00c4c\2\u052c\u052e\5\u00c2b\2\u052d\u052b\3")
        buf.write("\2\2\2\u052d\u052c\3\2\2\2\u052e\u0530\3\2\2\2\u052f\u052a")
        buf.write("\3\2\2\2\u0530\u0533\3\2\2\2\u0531\u052f\3\2\2\2\u0531")
        buf.write("\u0532\3\2\2\2\u0532\u0535\3\2\2\2\u0533\u0531\3\2\2\2")
        buf.write("\u0534\u0536\7=\2\2\u0535\u0534\3\2\2\2\u0535\u0536\3")
        buf.write("\2\2\2\u0536\u00d7\3\2\2\2\u0537\u053c\5\u00b0Y\2\u0538")
        buf.write("\u0539\7=\2\2\u0539\u053b\5\u00b0Y\2\u053a\u0538\3\2\2")
        buf.write("\2\u053b\u053e\3\2\2\2\u053c\u053a\3\2\2\2\u053c\u053d")
        buf.write("\3\2\2\2\u053d\u0540\3\2\2\2\u053e\u053c\3\2\2\2\u053f")
        buf.write("\u0541\7=\2\2\u0540\u053f\3\2\2\2\u0540\u0541\3\2\2\2")
        buf.write("\u0541\u00d9\3\2\2\2\u0542\u0543\5\u00b0Y\2\u0543\u0544")
        buf.write("\7>\2\2\u0544\u0545\5\u00b0Y\2\u0545\u0549\3\2\2\2\u0546")
        buf.write("\u0547\7@\2\2\u0547\u0549\5\u00c4c\2\u0548\u0542\3\2\2")
        buf.write("\2\u0548\u0546\3\2\2\2\u0549\u055c\3\2\2\2\u054a\u055d")
        buf.write("\5\u00e4s\2\u054b\u0552\7=\2\2\u054c\u054d\5\u00b0Y\2")
        buf.write("\u054d\u054e\7>\2\2\u054e\u054f\5\u00b0Y\2\u054f\u0553")
        buf.write("\3\2\2\2\u0550\u0551\7@\2\2\u0551\u0553\5\u00c4c\2\u0552")
        buf.write("\u054c\3\2\2\2\u0552\u0550\3\2\2\2\u0553\u0555\3\2\2\2")
        buf.write("\u0554\u054b\3\2\2\2\u0555\u0558\3\2\2\2\u0556\u0554\3")
        buf.write("\2\2\2\u0556\u0557\3\2\2\2\u0557\u055a\3\2\2\2\u0558\u0556")
        buf.write("\3\2\2\2\u0559\u055b\7=\2\2\u055a\u0559\3\2\2\2\u055a")
        buf.write("\u055b\3\2\2\2\u055b\u055d\3\2\2\2\u055c\u054a\3\2\2\2")
        buf.write("\u055c\u0556\3\2\2\2\u055d\u0573\3\2\2\2\u055e\u0561\5")
        buf.write("\u00b0Y\2\u055f\u0561\5\u00c2b\2\u0560\u055e\3\2\2\2\u0560")
        buf.write("\u055f\3\2\2\2\u0561\u0570\3\2\2\2\u0562\u0571\5\u00e4")
        buf.write("s\2\u0563\u0566\7=\2\2\u0564\u0567\5\u00b0Y\2\u0565\u0567")
        buf.write("\5\u00c2b\2\u0566\u0564\3\2\2\2\u0566\u0565\3\2\2\2\u0567")
        buf.write("\u0569\3\2\2\2\u0568\u0563\3\2\2\2\u0569\u056c\3\2\2\2")
        buf.write("\u056a\u0568\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u056e\3")
        buf.write("\2\2\2\u056c\u056a\3\2\2\2\u056d\u056f\7=\2\2\u056e\u056d")
        buf.write("\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0571\3\2\2\2\u0570")
        buf.write("\u0562\3\2\2\2\u0570\u056a\3\2\2\2\u0571\u0573\3\2\2\2")
        buf.write("\u0572\u0548\3\2\2\2\u0572\u0560\3\2\2\2\u0573\u00db\3")
        buf.write("\2\2\2\u0574\u0578\7\17\2\2\u0575\u0579\5\u00caf\2\u0576")
        buf.write("\u0579\5\u00f6|\2\u0577\u0579\5\u00fa~\2\u0578\u0575\3")
        buf.write("\2\2\2\u0578\u0576\3\2\2\2\u0578\u0577\3\2\2\2\u0579\u057f")
        buf.write("\3\2\2\2\u057a\u057c\7;\2\2\u057b\u057d\5\u00dep\2\u057c")
        buf.write("\u057b\3\2\2\2\u057c\u057d\3\2\2\2\u057d\u057e\3\2\2\2")
        buf.write("\u057e\u0580\7<\2\2\u057f\u057a\3\2\2\2\u057f\u0580\3")
        buf.write("\2\2\2\u0580\u0581\3\2\2\2\u0581\u0582\7>\2\2\u0582\u0583")
        buf.write("\5b\62\2\u0583\u00dd\3\2\2\2\u0584\u0589\5\u00e0q\2\u0585")
        buf.write("\u0586\7=\2\2\u0586\u0588\5\u00e0q\2\u0587\u0585\3\2\2")
        buf.write("\2\u0588\u058b\3\2\2\2\u0589\u0587\3\2\2\2\u0589\u058a")
        buf.write("\3\2\2\2\u058a\u058d\3\2\2\2\u058b\u0589\3\2\2\2\u058c")
        buf.write("\u058e\7=\2\2\u058d\u058c\3\2\2\2\u058d\u058e\3\2\2\2")
        buf.write("\u058e\u00df\3\2\2\2\u058f\u059d\5\u00f4{\2\u0590\u0592")
        buf.write("\5\u00b0Y\2\u0591\u0593\5\u00e4s\2\u0592\u0591\3\2\2\2")
        buf.write("\u0592\u0593\3\2\2\2\u0593\u059d\3\2\2\2\u0594\u0595\5")
        buf.write("\u00b0Y\2\u0595\u0596\7A\2\2\u0596\u0597\5\u00b0Y\2\u0597")
        buf.write("\u059d\3\2\2\2\u0598\u0599\7@\2\2\u0599\u059d\5\u00b0")
        buf.write("Y\2\u059a\u059b\7:\2\2\u059b\u059d\5\u00b0Y\2\u059c\u058f")
        buf.write("\3\2\2\2\u059c\u0590\3\2\2\2\u059c\u0594\3\2\2\2\u059c")
        buf.write("\u0598\3\2\2\2\u059c\u059a\3\2\2\2\u059d\u00e1\3\2\2\2")
        buf.write("\u059e\u05a1\5\u00e4s\2\u059f\u05a1\5\u00e6t\2\u05a0\u059e")
        buf.write("\3\2\2\2\u05a0\u059f\3\2\2\2\u05a1\u00e3\3\2\2\2\u05a2")
        buf.write("\u05a4\7\13\2\2\u05a3\u05a2\3\2\2\2\u05a3\u05a4\3\2\2")
        buf.write("\2\u05a4\u05a5\3\2\2\2\u05a5\u05a6\7\30\2\2\u05a6\u05a7")
        buf.write("\5\u00d6l\2\u05a7\u05a8\7\35\2\2\u05a8\u05aa\5\u00b8]")
        buf.write("\2\u05a9\u05ab\5\u00e2r\2\u05aa\u05a9\3\2\2\2\u05aa\u05ab")
        buf.write("\3\2\2\2\u05ab\u00e5\3\2\2\2\u05ac\u05ad\7\33\2\2\u05ad")
        buf.write("\u05af\5\u00b2Z\2\u05ae\u05b0\5\u00e2r\2\u05af\u05ae\3")
        buf.write("\2\2\2\u05af\u05b0\3\2\2\2\u05b0\u00e7\3\2\2\2\u05b1\u05b2")
        buf.write("\5\u00caf\2\u05b2\u00e9\3\2\2\2\u05b3\u05b5\7-\2\2\u05b4")
        buf.write("\u05b6\5\u00ecw\2\u05b5\u05b4\3\2\2\2\u05b5\u05b6\3\2")
        buf.write("\2\2\u05b6\u00eb\3\2\2\2\u05b7\u05b8\7\31\2\2\u05b8\u05bb")
        buf.write("\5\u00b0Y\2\u05b9\u05bb\5\u00d8m\2\u05ba\u05b7\3\2\2\2")
        buf.write("\u05ba\u05b9\3\2\2\2\u05bb\u00ed\3\2\2\2\u05bc\u05be\7")
        buf.write("\5\2\2\u05bd\u05bc\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf\u05bd")
        buf.write("\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u00ef\3\2\2\2\u05c1")
        buf.write("\u05c2\7B\2\2\u05c2\u05c7\5\u00caf\2\u05c3\u05c4\7=\2")
        buf.write("\2\u05c4\u05c6\5\u00caf\2\u05c5\u05c3\3\2\2\2\u05c6\u05c9")
        buf.write("\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8")
        buf.write("\u05ca\3\2\2\2\u05c9\u05c7\3\2\2\2\u05ca\u05cb\7C\2\2")
        buf.write("\u05cb\u00f1\3\2\2\2\u05cc\u05cd\7O\2\2\u05cd\u05ce\7")
        buf.write("\7\2\2\u05ce\u05cf\7=\2\2\u05cf\u05d0\7\7\2\2\u05d0\u05d1")
        buf.write("\3\2\2\2\u05d1\u05d2\7P\2\2\u05d2\u00f3\3\2\2\2\u05d3")
        buf.write("\u05d7\5\u00f6|\2\u05d4\u05d7\5\u00f8}\2\u05d5\u05d7\5")
        buf.write("\u00fa~\2\u05d6\u05d3\3\2\2\2\u05d6\u05d4\3\2\2\2\u05d6")
        buf.write("\u05d5\3\2\2\2\u05d7\u00f5\3\2\2\2\u05d8\u05da\7g\2\2")
        buf.write("\u05d9\u05db\5\u00f0y\2\u05da\u05d9\3\2\2\2\u05da\u05db")
        buf.write("\3\2\2\2\u05db\u05dd\3\2\2\2\u05dc\u05de\5\u00f2z\2\u05dd")
        buf.write("\u05dc\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u00f7\3\2\2\2")
        buf.write("\u05df\u05e1\7g\2\2\u05e0\u05e2\5\u00f0y\2\u05e1\u05e0")
        buf.write("\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3")
        buf.write("\u05e4\7:\2\2\u05e4\u00f9\3\2\2\2\u05e5\u05e7\7g\2\2\u05e6")
        buf.write("\u05e8\5\u00f0y\2\u05e7\u05e6\3\2\2\2\u05e7\u05e8\3\2")
        buf.write("\2\2\u05e8\u05e9\3\2\2\2\u05e9\u05ea\5\u00caf\2\u05ea")
        buf.write("\u00fb\3\2\2\2\u05eb\u05ef\5\u00fe\u0080\2\u05ec\u05ef")
        buf.write("\5\u0100\u0081\2\u05ed\u05ef\5\u0102\u0082\2\u05ee\u05eb")
        buf.write("\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ee\u05ed\3\2\2\2\u05ef")
        buf.write("\u00fd\3\2\2\2\u05f0\u05f2\7g\2\2\u05f1\u05f3\5\u00f0")
        buf.write("y\2\u05f2\u05f1\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f4")
        buf.write("\3\2\2\2\u05f4\u05f6\7>\2\2\u05f5\u05f7\5\u00f2z\2\u05f6")
        buf.write("\u05f5\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7\u05f8\3\2\2\2")
        buf.write("\u05f8\u05f9\5b\62\2\u05f9\u00ff\3\2\2\2\u05fa\u05fc\7")
        buf.write("g\2\2\u05fb\u05fd\5\u00f0y\2\u05fc\u05fb\3\2\2\2\u05fc")
        buf.write("\u05fd\3\2\2\2\u05fd\u05fe\3\2\2\2\u05fe\u05ff\7>\2\2")
        buf.write("\u05ff\u0600\7:\2\2\u0600\u0601\5b\62\2\u0601\u0101\3")
        buf.write("\2\2\2\u0602\u060a\7h\2\2\u0603\u060b\5\36\20\2\u0604")
        buf.write("\u0606\7.\2\2\u0605\u0607\5\34\17\2\u0606\u0605\3\2\2")
        buf.write("\2\u0607\u0608\3\2\2\2\u0608\u0606\3\2\2\2\u0608\u0609")
        buf.write("\3\2\2\2\u0609\u060b\3\2\2\2\u060a\u0603\3\2\2\2\u060a")
        buf.write("\u0604\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u060d\7C\2\2")
        buf.write("\u060d\u060e\7.\2\2\u060e\u0103\3\2\2\2\u00db\u0109\u010d")
        buf.write("\u010f\u0118\u0121\u0124\u012b\u0131\u013a\u013f\u0146")
        buf.write("\u014d\u0153\u0157\u015d\u0163\u0167\u016e\u0170\u0172")
        buf.write("\u0177\u0179\u017b\u017f\u0185\u0189\u0190\u0192\u0194")
        buf.write("\u0199\u019b\u01a0\u01a3\u01a8\u01ae\u01b2\u01b8\u01be")
        buf.write("\u01c2\u01c9\u01cb\u01cd\u01d2\u01d4\u01d6\u01da\u01e0")
        buf.write("\u01e4\u01eb\u01ed\u01ef\u01f4\u01f6\u01fa\u01fe\u0205")
        buf.write("\u0209\u0216\u021d\u0222\u0226\u0229\u022f\u0233\u0238")
        buf.write("\u023c\u0240\u024e\u0256\u025e\u0260\u0264\u026d\u0274")
        buf.write("\u0276\u027f\u0284\u0289\u0290\u0294\u029b\u02a3\u02ac")
        buf.write("\u02b5\u02bc\u02c9\u02cf\u02dc\u02e2\u02eb\u02f6\u0301")
        buf.write("\u0306\u030b\u0310\u0318\u0321\u0327\u0329\u0331\u0335")
        buf.write("\u033f\u0346\u0349\u034f\u0352\u0357\u035c\u0366\u036a")
        buf.write("\u0375\u0380\u038a\u0394\u039e\u03a3\u03a8\u03bd\u03c1")
        buf.write("\u03c9\u03ce\u03d1\u03d6\u03dd\u03e1\u03e5\u03eb\u03f2")
        buf.write("\u03fb\u0402\u0406\u040d\u0412\u0422\u042a\u0434\u0438")
        buf.write("\u043f\u0447\u0454\u0457\u045b\u045f\u0466\u0470\u0478")
        buf.write("\u047e\u0486\u0496\u04a0\u04a3\u04ba\u04bc\u04c0\u04c6")
        buf.write("\u04cc\u04d1\u04d6\u04df\u04e5\u04eb\u04f1\u04f5\u04f9")
        buf.write("\u04fb\u04ff\u0508\u050f\u0513\u0517\u051b\u051e\u0520")
        buf.write("\u0524\u0528\u052d\u0531\u0535\u053c\u0540\u0548\u0552")
        buf.write("\u0556\u055a\u055c\u0560\u0566\u056a\u056e\u0570\u0572")
        buf.write("\u0578\u057c\u057f\u0589\u058d\u0592\u059c\u05a0\u05a3")
        buf.write("\u05aa\u05af\u05b5\u05ba\u05bf\u05c7\u05d6\u05da\u05dd")
        buf.write("\u05e1\u05e7\u05ee\u05f2\u05f6\u05fc\u0608\u060a")
        return buf.getvalue()


class Python3Parser ( Python3ParserBase ):

    grammarFileName = "Python3Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'and'", "'as'", "'assert'", 
                     "'async'", "'await'", "'break'", "'case'", "'class'", 
                     "'continue'", "'def'", "'del'", "'elif'", "'else'", 
                     "'except'", "'False'", "'finally'", "'for'", "'from'", 
                     "'global'", "'if'", "'import'", "'in'", "'is'", "'lambda'", 
                     "'match'", "'None'", "'nonlocal'", "'not'", "'or'", 
                     "'pass'", "'raise'", "'return'", "'True'", "'try'", 
                     "'_'", "'while'", "'with'", "'yield'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'.'", "'...'", "'*'", "'('", "')'", "','", 
                     "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", 
                     "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", 
                     "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", 
                     "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", 
                     "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'<<='", "'>>='", "'**='", "'//='", "'?'", 
                     "'?!['" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "STRING", "NUMBER", 
                      "INTEGER", "AND", "AS", "ASSERT", "ASYNC", "AWAIT", 
                      "BREAK", "CASE", "CLASS", "CONTINUE", "DEF", "DEL", 
                      "ELIF", "ELSE", "EXCEPT", "FALSE", "FINALLY", "FOR", 
                      "FROM", "GLOBAL", "IF", "IMPORT", "IN", "IS", "LAMBDA", 
                      "MATCH", "NONE", "NONLOCAL", "NOT", "OR", "PASS", 
                      "RAISE", "RETURN", "TRUE", "TRY", "UNDERSCORE", "WHILE", 
                      "WITH", "YIELD", "NEWLINE", "NAME", "STRING_LITERAL", 
                      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "WILDCARD", "SYNTAX_STRICT_START", 
                      "SKIP_", "UNKNOWN_CHAR" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_async_funcdef = 6
    RULE_funcdef = 7
    RULE_parameters = 8
    RULE_typedargslist = 9
    RULE_tfpdef = 10
    RULE_varargslist = 11
    RULE_vfpdef = 12
    RULE_stmt = 13
    RULE_simple_stmts = 14
    RULE_simple_stmt = 15
    RULE_expr_stmt = 16
    RULE_annassign = 17
    RULE_testlist_star_expr = 18
    RULE_augassign = 19
    RULE_del_stmt = 20
    RULE_pass_stmt = 21
    RULE_flow_stmt = 22
    RULE_break_stmt = 23
    RULE_continue_stmt = 24
    RULE_return_stmt = 25
    RULE_yield_stmt = 26
    RULE_raise_stmt = 27
    RULE_import_stmt = 28
    RULE_import_name = 29
    RULE_import_from = 30
    RULE_import_as_name = 31
    RULE_dotted_as_name = 32
    RULE_import_as_names = 33
    RULE_dotted_as_names = 34
    RULE_dotted_name = 35
    RULE_global_stmt = 36
    RULE_nonlocal_stmt = 37
    RULE_assert_stmt = 38
    RULE_compound_stmt = 39
    RULE_async_stmt = 40
    RULE_if_stmt = 41
    RULE_while_stmt = 42
    RULE_for_stmt = 43
    RULE_try_stmt = 44
    RULE_with_stmt = 45
    RULE_with_item = 46
    RULE_except_clause = 47
    RULE_block = 48
    RULE_match_stmt = 49
    RULE_subject_expr = 50
    RULE_star_named_expressions = 51
    RULE_star_named_expression = 52
    RULE_case_block = 53
    RULE_guard = 54
    RULE_patterns = 55
    RULE_pattern = 56
    RULE_as_pattern = 57
    RULE_or_pattern = 58
    RULE_closed_pattern = 59
    RULE_literal_pattern = 60
    RULE_literal_expr = 61
    RULE_complex_number = 62
    RULE_signed_number = 63
    RULE_signed_real_number = 64
    RULE_real_number = 65
    RULE_imaginary_number = 66
    RULE_capture_pattern = 67
    RULE_pattern_capture_target = 68
    RULE_wildcard_pattern = 69
    RULE_value_pattern = 70
    RULE_attr = 71
    RULE_name_or_attr = 72
    RULE_group_pattern = 73
    RULE_sequence_pattern = 74
    RULE_open_sequence_pattern = 75
    RULE_maybe_sequence_pattern = 76
    RULE_maybe_star_pattern = 77
    RULE_star_pattern = 78
    RULE_mapping_pattern = 79
    RULE_items_pattern = 80
    RULE_key_value_pattern = 81
    RULE_double_star_pattern = 82
    RULE_class_pattern = 83
    RULE_positional_patterns = 84
    RULE_keyword_patterns = 85
    RULE_keyword_pattern = 86
    RULE_test = 87
    RULE_test_nocond = 88
    RULE_lambdef = 89
    RULE_lambdef_nocond = 90
    RULE_or_test = 91
    RULE_and_test = 92
    RULE_not_test = 93
    RULE_comparison = 94
    RULE_comp_op = 95
    RULE_star_expr = 96
    RULE_expr = 97
    RULE_atom_expr = 98
    RULE_atom = 99
    RULE_name = 100
    RULE_testlist_comp = 101
    RULE_trailer = 102
    RULE_subscriptlist = 103
    RULE_subscript_ = 104
    RULE_sliceop = 105
    RULE_exprlist = 106
    RULE_testlist = 107
    RULE_dictorsetmaker = 108
    RULE_classdef = 109
    RULE_arglist = 110
    RULE_argument = 111
    RULE_comp_iter = 112
    RULE_comp_for = 113
    RULE_comp_if = 114
    RULE_encoding_decl = 115
    RULE_yield_expr = 116
    RULE_yield_arg = 117
    RULE_strings = 118
    RULE_wildcard_type = 119
    RULE_wildcard_number = 120
    RULE_expr_wildcard = 121
    RULE_simple_wildcard = 122
    RULE_double_wildcard = 123
    RULE_var_wildcard = 124
    RULE_compound_wildcard = 125
    RULE_simple_compound_wildcard = 126
    RULE_multiple_compound_wildcard = 127
    RULE_strict_mode = 128

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "async_funcdef", "funcdef", 
                   "parameters", "typedargslist", "tfpdef", "varargslist", 
                   "vfpdef", "stmt", "simple_stmts", "simple_stmt", "expr_stmt", 
                   "annassign", "testlist_star_expr", "augassign", "del_stmt", 
                   "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", 
                   "with_stmt", "with_item", "except_clause", "block", "match_stmt", 
                   "subject_expr", "star_named_expressions", "star_named_expression", 
                   "case_block", "guard", "patterns", "pattern", "as_pattern", 
                   "or_pattern", "closed_pattern", "literal_pattern", "literal_expr", 
                   "complex_number", "signed_number", "signed_real_number", 
                   "real_number", "imaginary_number", "capture_pattern", 
                   "pattern_capture_target", "wildcard_pattern", "value_pattern", 
                   "attr", "name_or_attr", "group_pattern", "sequence_pattern", 
                   "open_sequence_pattern", "maybe_sequence_pattern", "maybe_star_pattern", 
                   "star_pattern", "mapping_pattern", "items_pattern", "key_value_pattern", 
                   "double_star_pattern", "class_pattern", "positional_patterns", 
                   "keyword_patterns", "keyword_pattern", "test", "test_nocond", 
                   "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "atom_expr", 
                   "atom", "name", "testlist_comp", "trailer", "subscriptlist", 
                   "subscript_", "sliceop", "exprlist", "testlist", "dictorsetmaker", 
                   "classdef", "arglist", "argument", "comp_iter", "comp_for", 
                   "comp_if", "encoding_decl", "yield_expr", "yield_arg", 
                   "strings", "wildcard_type", "wildcard_number", "expr_wildcard", 
                   "simple_wildcard", "double_wildcard", "var_wildcard", 
                   "compound_wildcard", "simple_compound_wildcard", "multiple_compound_wildcard", 
                   "strict_mode" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    STRING=3
    NUMBER=4
    INTEGER=5
    AND=6
    AS=7
    ASSERT=8
    ASYNC=9
    AWAIT=10
    BREAK=11
    CASE=12
    CLASS=13
    CONTINUE=14
    DEF=15
    DEL=16
    ELIF=17
    ELSE=18
    EXCEPT=19
    FALSE=20
    FINALLY=21
    FOR=22
    FROM=23
    GLOBAL=24
    IF=25
    IMPORT=26
    IN=27
    IS=28
    LAMBDA=29
    MATCH=30
    NONE=31
    NONLOCAL=32
    NOT=33
    OR=34
    PASS=35
    RAISE=36
    RETURN=37
    TRUE=38
    TRY=39
    UNDERSCORE=40
    WHILE=41
    WITH=42
    YIELD=43
    NEWLINE=44
    NAME=45
    STRING_LITERAL=46
    BYTES_LITERAL=47
    DECIMAL_INTEGER=48
    OCT_INTEGER=49
    HEX_INTEGER=50
    BIN_INTEGER=51
    FLOAT_NUMBER=52
    IMAG_NUMBER=53
    DOT=54
    ELLIPSIS=55
    STAR=56
    OPEN_PAREN=57
    CLOSE_PAREN=58
    COMMA=59
    COLON=60
    SEMI_COLON=61
    POWER=62
    ASSIGN=63
    OPEN_BRACK=64
    CLOSE_BRACK=65
    OR_OP=66
    XOR=67
    AND_OP=68
    LEFT_SHIFT=69
    RIGHT_SHIFT=70
    ADD=71
    MINUS=72
    DIV=73
    MOD=74
    IDIV=75
    NOT_OP=76
    OPEN_BRACE=77
    CLOSE_BRACE=78
    LESS_THAN=79
    GREATER_THAN=80
    EQUALS=81
    GT_EQ=82
    LT_EQ=83
    NOT_EQ_1=84
    NOT_EQ_2=85
    AT=86
    ARROW=87
    ADD_ASSIGN=88
    SUB_ASSIGN=89
    MULT_ASSIGN=90
    AT_ASSIGN=91
    DIV_ASSIGN=92
    MOD_ASSIGN=93
    AND_ASSIGN=94
    OR_ASSIGN=95
    XOR_ASSIGN=96
    LEFT_SHIFT_ASSIGN=97
    RIGHT_SHIFT_ASSIGN=98
    POWER_ASSIGN=99
    IDIV_ASSIGN=100
    WILDCARD=101
    SYNTAX_STRICT_START=102
    SKIP_=103
    UNKNOWN_CHAR=104

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = Python3Parser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                self.match(Python3Parser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 259
                self.simple_stmts()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 260
                self.compound_stmt()
                self.state = 261
                self.match(Python3Parser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.DEF) | (1 << Python3Parser.DEL) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.FROM) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.IF) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.NOT) | (1 << Python3Parser.PASS) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.TRY) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.WITH) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.AT - 64)) | (1 << (Python3Parser.WILDCARD - 64)) | (1 << (Python3Parser.SYNTAX_STRICT_START - 64)))) != 0):
                self.state = 267
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.NEWLINE]:
                    self.state = 265
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.ASSERT, Python3Parser.ASYNC, Python3Parser.AWAIT, Python3Parser.BREAK, Python3Parser.CLASS, Python3Parser.CONTINUE, Python3Parser.DEF, Python3Parser.DEL, Python3Parser.FALSE, Python3Parser.FOR, Python3Parser.FROM, Python3Parser.GLOBAL, Python3Parser.IF, Python3Parser.IMPORT, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NONLOCAL, Python3Parser.NOT, Python3Parser.PASS, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.TRUE, Python3Parser.TRY, Python3Parser.UNDERSCORE, Python3Parser.WHILE, Python3Parser.WITH, Python3Parser.YIELD, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.AT, Python3Parser.WILDCARD, Python3Parser.SYNTAX_STRICT_START]:
                    self.state = 266
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 272
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = Python3Parser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.testlist()
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.NEWLINE:
                self.state = 275
                self.match(Python3Parser.NEWLINE)
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 281
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = Python3Parser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(Python3Parser.AT)
            self.state = 284
            self.dotted_name()
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 285
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0):
                    self.state = 286
                    self.arglist()


                self.state = 289
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 292
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DecoratorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DecoratorContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = Python3Parser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 294
                self.decorator()
                self.state = 297 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(Python3Parser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def async_funcdef(self):
            return self.getTypedRuleContext(Python3Parser.Async_funcdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = Python3Parser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.decorators()
            self.state = 303
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.CLASS]:
                self.state = 300
                self.classdef()
                pass
            elif token in [Python3Parser.DEF]:
                self.state = 301
                self.funcdef()
                pass
            elif token in [Python3Parser.ASYNC]:
                self.state = 302
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Async_funcdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_funcdef" ):
                listener.enterAsync_funcdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_funcdef" ):
                listener.exitAsync_funcdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_funcdef" ):
                return visitor.visitAsync_funcdef(self)
            else:
                return visitor.visitChildren(self)




    def async_funcdef(self):

        localctx = Python3Parser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.match(Python3Parser.ASYNC)
            self.state = 306
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def parameters(self):
            return self.getTypedRuleContext(Python3Parser.ParametersContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def ARROW(self):
            return self.getToken(Python3Parser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = Python3Parser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(Python3Parser.DEF)
            self.state = 312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 309
                self.name()
                pass

            elif la_ == 2:
                self.state = 310
                self.simple_wildcard()
                pass

            elif la_ == 3:
                self.state = 311
                self.var_wildcard()
                pass


            self.state = 314
            self.parameters()
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ARROW:
                self.state = 315
                self.match(Python3Parser.ARROW)
                self.state = 316
                self.test()


            self.state = 319
            self.match(Python3Parser.COLON)
            self.state = 320
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = Python3Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0) or _la==Python3Parser.WILDCARD:
                self.state = 323
                self.typedargslist()


            self.state = 326
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.WILDCARD]:
                self.state = 328
                self.tfpdef()
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 329
                    self.match(Python3Parser.ASSIGN)
                    self.state = 330
                    self.test()


                self.state = 341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 333
                        self.match(Python3Parser.COMMA)
                        self.state = 334
                        self.tfpdef()
                        self.state = 337
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 335
                            self.match(Python3Parser.ASSIGN)
                            self.state = 336
                            self.test()

                 
                    self.state = 343
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 344
                    self.match(Python3Parser.COMMA)
                    self.state = 375
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 345
                        self.match(Python3Parser.STAR)
                        self.state = 347
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0) or _la==Python3Parser.WILDCARD:
                            self.state = 346
                            self.tfpdef()


                        self.state = 357
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 349
                                self.match(Python3Parser.COMMA)
                                self.state = 350
                                self.tfpdef()
                                self.state = 353
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 351
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 352
                                    self.test()

                         
                            self.state = 359
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                        self.state = 368
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 360
                            self.match(Python3Parser.COMMA)
                            self.state = 366
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Python3Parser.POWER:
                                self.state = 361
                                self.match(Python3Parser.POWER)
                                self.state = 362
                                self.tfpdef()
                                self.state = 364
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.COMMA:
                                    self.state = 363
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 370
                        self.match(Python3Parser.POWER)
                        self.state = 371
                        self.tfpdef()
                        self.state = 373
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 372
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [Python3Parser.CLOSE_PAREN]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.state = 379
                self.match(Python3Parser.STAR)
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0) or _la==Python3Parser.WILDCARD:
                    self.state = 380
                    self.tfpdef()


                self.state = 391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 383
                        self.match(Python3Parser.COMMA)
                        self.state = 384
                        self.tfpdef()
                        self.state = 387
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 385
                            self.match(Python3Parser.ASSIGN)
                            self.state = 386
                            self.test()

                 
                    self.state = 393
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 394
                    self.match(Python3Parser.COMMA)
                    self.state = 400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.POWER:
                        self.state = 395
                        self.match(Python3Parser.POWER)
                        self.state = 396
                        self.tfpdef()
                        self.state = 398
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 397
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [Python3Parser.POWER]:
                self.state = 404
                self.match(Python3Parser.POWER)
                self.state = 405
                self.tfpdef()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 406
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTfpdef" ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = Python3Parser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.state = 417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 411
                self.name()
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COLON:
                    self.state = 412
                    self.match(Python3Parser.COLON)
                    self.state = 413
                    self.test()


                pass
            elif token in [Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.expr_wildcard()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.VfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.VfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.WILDCARD]:
                self.state = 419
                self.vfpdef()
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 420
                    self.match(Python3Parser.ASSIGN)
                    self.state = 421
                    self.test()


                self.state = 432
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 424
                        self.match(Python3Parser.COMMA)
                        self.state = 425
                        self.vfpdef()
                        self.state = 428
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 426
                            self.match(Python3Parser.ASSIGN)
                            self.state = 427
                            self.test()

                 
                    self.state = 434
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 435
                    self.match(Python3Parser.COMMA)
                    self.state = 466
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 436
                        self.match(Python3Parser.STAR)
                        self.state = 438
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0) or _la==Python3Parser.WILDCARD:
                            self.state = 437
                            self.vfpdef()


                        self.state = 448
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 440
                                self.match(Python3Parser.COMMA)
                                self.state = 441
                                self.vfpdef()
                                self.state = 444
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 442
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 443
                                    self.test()

                         
                            self.state = 450
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

                        self.state = 459
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 451
                            self.match(Python3Parser.COMMA)
                            self.state = 457
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Python3Parser.POWER:
                                self.state = 452
                                self.match(Python3Parser.POWER)
                                self.state = 453
                                self.vfpdef()
                                self.state = 455
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.COMMA:
                                    self.state = 454
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 461
                        self.match(Python3Parser.POWER)
                        self.state = 462
                        self.vfpdef()
                        self.state = 464
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 463
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [Python3Parser.COLON]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.state = 470
                self.match(Python3Parser.STAR)
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0) or _la==Python3Parser.WILDCARD:
                    self.state = 471
                    self.vfpdef()


                self.state = 482
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 474
                        self.match(Python3Parser.COMMA)
                        self.state = 475
                        self.vfpdef()
                        self.state = 478
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 476
                            self.match(Python3Parser.ASSIGN)
                            self.state = 477
                            self.test()

                 
                    self.state = 484
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 485
                    self.match(Python3Parser.COMMA)
                    self.state = 491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.POWER:
                        self.state = 486
                        self.match(Python3Parser.POWER)
                        self.state = 487
                        self.vfpdef()
                        self.state = 489
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 488
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [Python3Parser.POWER]:
                self.state = 495
                self.match(Python3Parser.POWER)
                self.state = 496
                self.vfpdef()
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 497
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpdef" ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = Python3Parser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_vfpdef)
        try:
            self.state = 504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 502
                self.name()
                pass
            elif token in [Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 503
                self.expr_wildcard()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stmt)
        try:
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self.simple_stmts()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.SEMI_COLON)
            else:
                return self.getToken(Python3Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmts" ):
                listener.enterSimple_stmts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmts" ):
                listener.exitSimple_stmts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmts" ):
                return visitor.visitSimple_stmts(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmts(self):

        localctx = Python3Parser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_simple_stmts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.simple_stmt()
            self.state = 515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 511
                    self.match(Python3Parser.SEMI_COLON)
                    self.state = 512
                    self.simple_stmt() 
                self.state = 517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.SEMI_COLON:
                self.state = 518
                self.match(Python3Parser.SEMI_COLON)


            self.state = 521
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = Python3Parser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_simple_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 523
                self.expr_wildcard()
                pass

            elif la_ == 2:
                self.state = 524
                self.expr_stmt()
                pass

            elif la_ == 3:
                self.state = 525
                self.del_stmt()
                pass

            elif la_ == 4:
                self.state = 526
                self.pass_stmt()
                pass

            elif la_ == 5:
                self.state = 527
                self.flow_stmt()
                pass

            elif la_ == 6:
                self.state = 528
                self.import_stmt()
                pass

            elif la_ == 7:
                self.state = 529
                self.global_stmt()
                pass

            elif la_ == 8:
                self.state = 530
                self.nonlocal_stmt()
                pass

            elif la_ == 9:
                self.state = 531
                self.assert_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext,i)


        def annassign(self):
            return self.getTypedRuleContext(Python3Parser.AnnassignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = Python3Parser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.testlist_star_expr()
            self.state = 551
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.COLON]:
                self.state = 535
                self.annassign()
                pass
            elif token in [Python3Parser.ADD_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.MULT_ASSIGN, Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.MOD_ASSIGN, Python3Parser.AND_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.XOR_ASSIGN, Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN, Python3Parser.POWER_ASSIGN, Python3Parser.IDIV_ASSIGN]:
                self.state = 536
                self.augassign()
                self.state = 539
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 537
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                    self.state = 538
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON, Python3Parser.ASSIGN]:
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.ASSIGN:
                    self.state = 541
                    self.match(Python3Parser.ASSIGN)
                    self.state = 544
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.YIELD]:
                        self.state = 542
                        self.yield_expr()
                        pass
                    elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                        self.state = 543
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_annassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnassign" ):
                listener.enterAnnassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnassign" ):
                listener.exitAnnassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnassign" ):
                return visitor.visitAnnassign(self)
            else:
                return visitor.visitChildren(self)




    def annassign(self):

        localctx = Python3Parser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_annassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(Python3Parser.COLON)
            self.state = 554
            self.test()
            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASSIGN:
                self.state = 555
                self.match(Python3Parser.ASSIGN)
                self.state = 556
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = Python3Parser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.state = 559
                self.test()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 560
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 570
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 563
                    self.match(Python3Parser.COMMA)
                    self.state = 566
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                        self.state = 564
                        self.test()
                        pass
                    elif token in [Python3Parser.STAR]:
                        self.state = 565
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 572
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 573
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(Python3Parser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(Python3Parser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(Python3Parser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(Python3Parser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(Python3Parser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(Python3Parser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(Python3Parser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(Python3Parser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(Python3Parser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(Python3Parser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(Python3Parser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            _la = self._input.LA(1)
            if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (Python3Parser.ADD_ASSIGN - 88)) | (1 << (Python3Parser.SUB_ASSIGN - 88)) | (1 << (Python3Parser.MULT_ASSIGN - 88)) | (1 << (Python3Parser.AT_ASSIGN - 88)) | (1 << (Python3Parser.DIV_ASSIGN - 88)) | (1 << (Python3Parser.MOD_ASSIGN - 88)) | (1 << (Python3Parser.AND_ASSIGN - 88)) | (1 << (Python3Parser.OR_ASSIGN - 88)) | (1 << (Python3Parser.XOR_ASSIGN - 88)) | (1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 88)) | (1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 88)) | (1 << (Python3Parser.POWER_ASSIGN - 88)) | (1 << (Python3Parser.IDIV_ASSIGN - 88)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = Python3Parser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(Python3Parser.DEL)
            self.state = 579
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = Python3Parser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(Python3Parser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = Python3Parser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_flow_stmt)
        try:
            self.state = 588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self.break_stmt()
                pass
            elif token in [Python3Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.continue_stmt()
                pass
            elif token in [Python3Parser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 585
                self.return_stmt()
                pass
            elif token in [Python3Parser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 586
                self.raise_stmt()
                pass
            elif token in [Python3Parser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 587
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(Python3Parser.RETURN)
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0):
                self.state = 595
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(Python3Parser.RAISE)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0):
                self.state = 601
                self.test()
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FROM:
                    self.state = 602
                    self.match(Python3Parser.FROM)
                    self.state = 603
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(Python3Parser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(Python3Parser.Import_fromContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = Python3Parser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_stmt)
        try:
            self.state = 610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self.import_name()
                pass
            elif token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 609
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = Python3Parser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(Python3Parser.IMPORT)
            self.state = 613
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Import_as_namesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELLIPSIS)
            else:
                return self.getToken(Python3Parser.ELLIPSIS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = Python3Parser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(Python3Parser.FROM)
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS:
                    self.state = 616
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 621
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 622
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 624 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 623
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 626 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        break

                pass


            self.state = 630
            self.match(Python3Parser.IMPORT)
            self.state = 637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.state = 631
                self.match(Python3Parser.STAR)
                pass
            elif token in [Python3Parser.OPEN_PAREN]:
                self.state = 632
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 633
                self.import_as_names()
                self.state = 634
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.state = 636
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = Python3Parser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.name()
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 640
                self.match(Python3Parser.AS)
                self.state = 641
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = Python3Parser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.dotted_name()
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 645
                self.match(Python3Parser.AS)
                self.state = 646
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = Python3Parser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.import_as_name()
            self.state = 654
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 650
                    self.match(Python3Parser.COMMA)
                    self.state = 651
                    self.import_as_name() 
                self.state = 656
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 657
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = Python3Parser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.dotted_as_name()
            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 661
                self.match(Python3Parser.COMMA)
                self.state = 662
                self.dotted_as_name()
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = Python3Parser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.name()
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.DOT:
                self.state = 669
                self.match(Python3Parser.DOT)
                self.state = 670
                self.name()
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = Python3Parser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(Python3Parser.GLOBAL)
            self.state = 677
            self.name()
            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 678
                self.match(Python3Parser.COMMA)
                self.state = 679
                self.name()
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = Python3Parser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(Python3Parser.NONLOCAL)
            self.state = 686
            self.name()
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 687
                self.match(Python3Parser.COMMA)
                self.state = 688
                self.name()
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(Python3Parser.ASSERT)
            self.state = 695
            self.test()
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 696
                self.match(Python3Parser.COMMA)
                self.state = 697
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Compound_wildcardContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(Python3Parser.DecoratedContext,0)


        def async_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Async_stmtContext,0)


        def match_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Match_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = Python3Parser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_compound_stmt)
        try:
            self.state = 711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.WILDCARD, Python3Parser.SYNTAX_STRICT_START]:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.compound_wildcard()
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self.if_stmt()
                pass
            elif token in [Python3Parser.WHILE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 702
                self.while_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 703
                self.for_stmt()
                pass
            elif token in [Python3Parser.TRY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 704
                self.try_stmt()
                pass
            elif token in [Python3Parser.WITH]:
                self.enterOuterAlt(localctx, 6)
                self.state = 705
                self.with_stmt()
                pass
            elif token in [Python3Parser.DEF]:
                self.enterOuterAlt(localctx, 7)
                self.state = 706
                self.funcdef()
                pass
            elif token in [Python3Parser.CLASS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 707
                self.classdef()
                pass
            elif token in [Python3Parser.AT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 708
                self.decorated()
                pass
            elif token in [Python3Parser.ASYNC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 709
                self.async_stmt()
                pass
            elif token in [Python3Parser.MATCH]:
                self.enterOuterAlt(localctx, 11)
                self.state = 710
                self.match_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Async_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_stmt" ):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_stmt" ):
                listener.exitAsync_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_stmt" ):
                return visitor.visitAsync_stmt(self)
            else:
                return visitor.visitChildren(self)




    def async_stmt(self):

        localctx = Python3Parser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(Python3Parser.ASYNC)
            self.state = 717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.DEF]:
                self.state = 714
                self.funcdef()
                pass
            elif token in [Python3Parser.WITH]:
                self.state = 715
                self.with_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.state = 716
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(Python3Parser.IF)
            self.state = 720
            self.test()
            self.state = 721
            self.match(Python3Parser.COLON)
            self.state = 722
            self.block()
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.ELIF:
                self.state = 723
                self.match(Python3Parser.ELIF)
                self.state = 724
                self.test()
                self.state = 725
                self.match(Python3Parser.COLON)
                self.state = 726
                self.block()
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 733
                self.match(Python3Parser.ELSE)
                self.state = 734
                self.match(Python3Parser.COLON)
                self.state = 735
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(Python3Parser.WHILE)
            self.state = 739
            self.test()
            self.state = 740
            self.match(Python3Parser.COLON)
            self.state = 741
            self.block()
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 742
                self.match(Python3Parser.ELSE)
                self.state = 743
                self.match(Python3Parser.COLON)
                self.state = 744
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(Python3Parser.FOR)
            self.state = 748
            self.exprlist()
            self.state = 749
            self.match(Python3Parser.IN)
            self.state = 750
            self.testlist()
            self.state = 751
            self.match(Python3Parser.COLON)
            self.state = 752
            self.block()
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 753
                self.match(Python3Parser.ELSE)
                self.state = 754
                self.match(Python3Parser.COLON)
                self.state = 755
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(Python3Parser.TRY)
            self.state = 759
            self.match(Python3Parser.COLON)
            self.state = 760
            self.block()
            self.state = 782
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.EXCEPT]:
                self.state = 765 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 761
                    self.except_clause()
                    self.state = 762
                    self.match(Python3Parser.COLON)
                    self.state = 763
                    self.block()
                    self.state = 767 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.EXCEPT):
                        break

                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ELSE:
                    self.state = 769
                    self.match(Python3Parser.ELSE)
                    self.state = 770
                    self.match(Python3Parser.COLON)
                    self.state = 771
                    self.block()


                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FINALLY:
                    self.state = 774
                    self.match(Python3Parser.FINALLY)
                    self.state = 775
                    self.match(Python3Parser.COLON)
                    self.state = 776
                    self.block()


                pass
            elif token in [Python3Parser.FINALLY]:
                self.state = 779
                self.match(Python3Parser.FINALLY)
                self.state = 780
                self.match(Python3Parser.COLON)
                self.state = 781
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.With_itemContext)
            else:
                return self.getTypedRuleContext(Python3Parser.With_itemContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = Python3Parser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(Python3Parser.WITH)
            self.state = 785
            self.with_item()
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 786
                self.match(Python3Parser.COMMA)
                self.state = 787
                self.with_item()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 793
            self.match(Python3Parser.COLON)
            self.state = 794
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = Python3Parser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.test()
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 797
                self.match(Python3Parser.AS)
                self.state = 798
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.match(Python3Parser.EXCEPT)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0):
                self.state = 802
                self.test()
                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.AS:
                    self.state = 803
                    self.match(Python3Parser.AS)
                    self.state = 804
                    self.name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = Python3Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.state = 819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.ASSERT, Python3Parser.AWAIT, Python3Parser.BREAK, Python3Parser.CONTINUE, Python3Parser.DEL, Python3Parser.FALSE, Python3Parser.FROM, Python3Parser.GLOBAL, Python3Parser.IMPORT, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NONLOCAL, Python3Parser.NOT, Python3Parser.PASS, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.YIELD, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self.simple_stmts()
                pass
            elif token in [Python3Parser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.match(Python3Parser.NEWLINE)
                self.state = 811
                self.match(Python3Parser.INDENT)
                self.state = 813 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 812
                    self.stmt()
                    self.state = 815 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.DEF) | (1 << Python3Parser.DEL) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.FROM) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.IF) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.NOT) | (1 << Python3Parser.PASS) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.TRY) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.WITH) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.AT - 64)) | (1 << (Python3Parser.WILDCARD - 64)) | (1 << (Python3Parser.SYNTAX_STRICT_START - 64)))) != 0)):
                        break

                self.state = 817
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Match_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(Python3Parser.MATCH, 0)

        def subject_expr(self):
            return self.getTypedRuleContext(Python3Parser.Subject_exprContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Case_blockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Case_blockContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_match_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_stmt" ):
                listener.enterMatch_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_stmt" ):
                listener.exitMatch_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_stmt" ):
                return visitor.visitMatch_stmt(self)
            else:
                return visitor.visitChildren(self)




    def match_stmt(self):

        localctx = Python3Parser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_match_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(Python3Parser.MATCH)
            self.state = 822
            self.subject_expr()
            self.state = 823
            self.match(Python3Parser.COLON)
            self.state = 824
            self.match(Python3Parser.NEWLINE)
            self.state = 825
            self.match(Python3Parser.INDENT)
            self.state = 827 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 826
                self.case_block()
                self.state = 829 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.CASE):
                    break

            self.state = 831
            self.match(Python3Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subject_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(Python3Parser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(Python3Parser.Star_named_expressionsContext,0)


        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subject_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubject_expr" ):
                listener.enterSubject_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubject_expr" ):
                listener.exitSubject_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubject_expr" ):
                return visitor.visitSubject_expr(self)
            else:
                return visitor.visitChildren(self)




    def subject_expr(self):

        localctx = Python3Parser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_subject_expr)
        self._la = 0 # Token type
        try:
            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self.star_named_expression()
                self.state = 834
                self.match(Python3Parser.COMMA)
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 835
                    self.star_named_expressions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 838
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_named_expressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def star_named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_named_expressionContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_named_expressionContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_named_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expressions" ):
                listener.enterStar_named_expressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expressions" ):
                listener.exitStar_named_expressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expressions" ):
                return visitor.visitStar_named_expressions(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expressions(self):

        localctx = Python3Parser.Star_named_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_star_named_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(Python3Parser.COMMA)
            self.state = 843 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 842
                self.star_named_expression()
                self.state = 845 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0)):
                    break

            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 847
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_named_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_named_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expression" ):
                listener.enterStar_named_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expression" ):
                listener.exitStar_named_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expression" ):
                return visitor.visitStar_named_expression(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expression(self):

        localctx = Python3Parser.Star_named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_star_named_expression)
        try:
            self.state = 853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 850
                self.match(Python3Parser.STAR)
                self.state = 851
                self.expr(0)
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 852
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Python3Parser.CASE, 0)

        def patterns(self):
            return self.getTypedRuleContext(Python3Parser.PatternsContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def guard(self):
            return self.getTypedRuleContext(Python3Parser.GuardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_case_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_block" ):
                listener.enterCase_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_block" ):
                listener.exitCase_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_block" ):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)




    def case_block(self):

        localctx = Python3Parser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.match(Python3Parser.CASE)
            self.state = 856
            self.patterns()
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.IF:
                self.state = 857
                self.guard()


            self.state = 860
            self.match(Python3Parser.COLON)
            self.state = 861
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GuardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard" ):
                listener.enterGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard" ):
                listener.exitGuard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard" ):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)




    def guard(self):

        localctx = Python3Parser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(Python3Parser.IF)
            self.state = 864
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Open_sequence_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatterns" ):
                listener.enterPatterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatterns" ):
                listener.exitPatterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatterns" ):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)




    def patterns(self):

        localctx = Python3Parser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_patterns)
        try:
            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 866
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(Python3Parser.As_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Or_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = Python3Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_pattern)
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 870
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 871
                self.or_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class As_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Or_patternContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_as_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_pattern" ):
                listener.enterAs_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_pattern" ):
                listener.exitAs_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_pattern" ):
                return visitor.visitAs_pattern(self)
            else:
                return visitor.visitChildren(self)




    def as_pattern(self):

        localctx = Python3Parser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.or_pattern()
            self.state = 875
            self.match(Python3Parser.AS)
            self.state = 876
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Closed_patternContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR_OP)
            else:
                return self.getToken(Python3Parser.OR_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_pattern" ):
                listener.enterOr_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_pattern" ):
                listener.exitOr_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_pattern" ):
                return visitor.visitOr_pattern(self)
            else:
                return visitor.visitChildren(self)




    def or_pattern(self):

        localctx = Python3Parser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_or_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.closed_pattern()
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR_OP:
                self.state = 879
                self.match(Python3Parser.OR_OP)
                self.state = 880
                self.closed_pattern()
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Closed_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcard_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_patternContext,0)


        def literal_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Literal_patternContext,0)


        def capture_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Capture_patternContext,0)


        def value_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Value_patternContext,0)


        def group_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Group_patternContext,0)


        def sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Sequence_patternContext,0)


        def mapping_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Mapping_patternContext,0)


        def class_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Class_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_closed_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosed_pattern" ):
                listener.enterClosed_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosed_pattern" ):
                listener.exitClosed_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosed_pattern" ):
                return visitor.visitClosed_pattern(self)
            else:
                return visitor.visitChildren(self)




    def closed_pattern(self):

        localctx = Python3Parser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_closed_pattern)
        try:
            self.state = 894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 886
                self.wildcard_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 887
                self.literal_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 888
                self.capture_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 889
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 890
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 891
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 892
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 893
                self.class_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(Python3Parser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(Python3Parser.StringsContext,0)


        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_literal_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_pattern" ):
                listener.enterLiteral_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_pattern" ):
                listener.exitLiteral_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_pattern" ):
                return visitor.visitLiteral_pattern(self)
            else:
                return visitor.visitChildren(self)




    def literal_pattern(self):

        localctx = Python3Parser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_literal_pattern)
        try:
            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.signed_number()
                self.state = 897
                if not  self.CannotBePlusMinus() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " self.CannotBePlusMinus() ")
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 900
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 901
                self.match(Python3Parser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 902
                self.match(Python3Parser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 903
                self.match(Python3Parser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(Python3Parser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(Python3Parser.StringsContext,0)


        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_literal_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expr" ):
                listener.enterLiteral_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expr" ):
                listener.exitLiteral_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_expr" ):
                return visitor.visitLiteral_expr(self)
            else:
                return visitor.visitChildren(self)




    def literal_expr(self):

        localctx = Python3Parser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_literal_expr)
        try:
            self.state = 914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 906
                self.signed_number()
                self.state = 907
                if not  self.CannotBePlusMinus() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " self.CannotBePlusMinus() ")
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 909
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 910
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 911
                self.match(Python3Parser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 912
                self.match(Python3Parser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 913
                self.match(Python3Parser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Complex_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_real_numberContext,0)


        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def imaginary_number(self):
            return self.getTypedRuleContext(Python3Parser.Imaginary_numberContext,0)


        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_complex_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex_number" ):
                listener.enterComplex_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex_number" ):
                listener.exitComplex_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex_number" ):
                return visitor.visitComplex_number(self)
            else:
                return visitor.visitChildren(self)




    def complex_number(self):

        localctx = Python3Parser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_complex_number)
        try:
            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.signed_real_number()
                self.state = 917
                self.match(Python3Parser.ADD)
                self.state = 918
                self.imaginary_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.signed_real_number()
                self.state = 921
                self.match(Python3Parser.MINUS)
                self.state = 922
                self.imaginary_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = Python3Parser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_signed_number)
        try:
            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 926
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [Python3Parser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 927
                self.match(Python3Parser.MINUS)
                self.state = 928
                self.match(Python3Parser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_real_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(Python3Parser.Real_numberContext,0)


        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_signed_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_real_number" ):
                listener.enterSigned_real_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_real_number" ):
                listener.exitSigned_real_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_real_number" ):
                return visitor.visitSigned_real_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_real_number(self):

        localctx = Python3Parser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_signed_real_number)
        try:
            self.state = 934
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 931
                self.real_number()
                pass
            elif token in [Python3Parser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 932
                self.match(Python3Parser.MINUS)
                self.state = 933
                self.real_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Real_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_number" ):
                listener.enterReal_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_number" ):
                listener.exitReal_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReal_number" ):
                return visitor.visitReal_number(self)
            else:
                return visitor.visitChildren(self)




    def real_number(self):

        localctx = Python3Parser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(Python3Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Imaginary_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_imaginary_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImaginary_number" ):
                listener.enterImaginary_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImaginary_number" ):
                listener.exitImaginary_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImaginary_number" ):
                return visitor.visitImaginary_number(self)
            else:
                return visitor.visitChildren(self)




    def imaginary_number(self):

        localctx = Python3Parser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(Python3Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Capture_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_capture_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_pattern" ):
                listener.enterCapture_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_pattern" ):
                listener.exitCapture_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_pattern" ):
                return visitor.visitCapture_pattern(self)
            else:
                return visitor.visitChildren(self)




    def capture_pattern(self):

        localctx = Python3Parser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pattern_capture_targetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_pattern_capture_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_capture_target" ):
                listener.enterPattern_capture_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_capture_target" ):
                listener.exitPattern_capture_target(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern_capture_target" ):
                return visitor.visitPattern_capture_target(self)
            else:
                return visitor.visitChildren(self)




    def pattern_capture_target(self):

        localctx = Python3Parser.Pattern_capture_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.name()
            self.state = 943
            if not  self.CannotBeDotLpEq() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " self.CannotBeDotLpEq() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wildcard_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(Python3Parser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_wildcard_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_pattern" ):
                listener.enterWildcard_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_pattern" ):
                listener.exitWildcard_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_pattern" ):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_pattern(self):

        localctx = Python3Parser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.match(Python3Parser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_pattern" ):
                listener.enterValue_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_pattern" ):
                listener.exitValue_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_pattern" ):
                return visitor.visitValue_pattern(self)
            else:
                return visitor.visitChildren(self)




    def value_pattern(self):

        localctx = Python3Parser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.attr()
            self.state = 948
            if not  self.CannotBeDotLpEq() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " self.CannotBeDotLpEq() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = Python3Parser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.name()
            self.state = 953 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 951
                    self.match(Python3Parser.DOT)
                    self.state = 952
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 955 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_or_attrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_name_or_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_or_attr" ):
                listener.enterName_or_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_or_attr" ):
                listener.exitName_or_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_or_attr" ):
                return visitor.visitName_or_attr(self)
            else:
                return visitor.visitChildren(self)




    def name_or_attr(self):

        localctx = Python3Parser.Name_or_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_name_or_attr)
        try:
            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.attr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_group_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_pattern" ):
                listener.enterGroup_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_pattern" ):
                listener.exitGroup_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_pattern" ):
                return visitor.visitGroup_pattern(self)
            else:
                return visitor.visitChildren(self)




    def group_pattern(self):

        localctx = Python3Parser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 962
            self.pattern()
            self.state = 963
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_sequence_patternContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Open_sequence_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_pattern" ):
                listener.enterSequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_pattern" ):
                listener.exitSequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_pattern" ):
                return visitor.visitSequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def sequence_pattern(self):

        localctx = Python3Parser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.state = 975
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 965
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                    self.state = 966
                    self.maybe_sequence_pattern()


                self.state = 969
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 970
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                    self.state = 971
                    self.open_sequence_pattern()


                self.state = 974
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_sequence_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_star_patternContext,0)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_sequence_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_open_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_sequence_pattern" ):
                listener.enterOpen_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_sequence_pattern" ):
                listener.exitOpen_sequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_sequence_pattern" ):
                return visitor.visitOpen_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def open_sequence_pattern(self):

        localctx = Python3Parser.Open_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_open_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.maybe_star_pattern()
            self.state = 978
            self.match(Python3Parser.COMMA)
            self.state = 980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                self.state = 979
                self.maybe_sequence_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maybe_sequence_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Maybe_star_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Maybe_star_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_maybe_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_sequence_pattern" ):
                listener.enterMaybe_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_sequence_pattern" ):
                listener.exitMaybe_sequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_sequence_pattern" ):
                return visitor.visitMaybe_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_sequence_pattern(self):

        localctx = Python3Parser.Maybe_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_maybe_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.maybe_star_pattern()
            self.state = 987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 983
                    self.match(Python3Parser.COMMA)
                    self.state = 984
                    self.maybe_star_pattern() 
                self.state = 989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

            self.state = 991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 990
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maybe_star_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Star_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_maybe_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_star_pattern" ):
                listener.enterMaybe_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_star_pattern" ):
                listener.exitMaybe_star_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_star_pattern" ):
                return visitor.visitMaybe_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_star_pattern(self):

        localctx = Python3Parser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_maybe_star_pattern)
        try:
            self.state = 995
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 993
                self.star_pattern()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.MINUS, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 994
                self.pattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_pattern" ):
                listener.enterStar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_pattern" ):
                listener.exitStar_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_pattern" ):
                return visitor.visitStar_pattern(self)
            else:
                return visitor.visitChildren(self)




    def star_pattern(self):

        localctx = Python3Parser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_star_pattern)
        try:
            self.state = 1001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 997
                self.match(Python3Parser.STAR)
                self.state = 998
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 999
                self.match(Python3Parser.STAR)
                self.state = 1000
                self.wildcard_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mapping_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Double_star_patternContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Items_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_mapping_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_pattern" ):
                listener.enterMapping_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_pattern" ):
                listener.exitMapping_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping_pattern" ):
                return visitor.visitMapping_pattern(self)
            else:
                return visitor.visitChildren(self)




    def mapping_pattern(self):

        localctx = Python3Parser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_mapping_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1003
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1004
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1005
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1006
                self.double_star_pattern()
                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1007
                    self.match(Python3Parser.COMMA)


                self.state = 1010
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1012
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1013
                self.items_pattern()
                self.state = 1014
                self.match(Python3Parser.COMMA)
                self.state = 1015
                self.double_star_pattern()
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1016
                    self.match(Python3Parser.COMMA)


                self.state = 1019
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1021
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1022
                self.items_pattern()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1023
                    self.match(Python3Parser.COMMA)


                self.state = 1026
                self.match(Python3Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Items_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Key_value_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Key_value_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_items_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItems_pattern" ):
                listener.enterItems_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItems_pattern" ):
                listener.exitItems_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItems_pattern" ):
                return visitor.visitItems_pattern(self)
            else:
                return visitor.visitChildren(self)




    def items_pattern(self):

        localctx = Python3Parser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.key_value_pattern()
            self.state = 1035
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1031
                    self.match(Python3Parser.COMMA)
                    self.state = 1032
                    self.key_value_pattern() 
                self.state = 1037
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_value_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def literal_expr(self):
            return self.getTypedRuleContext(Python3Parser.Literal_exprContext,0)


        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_key_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value_pattern" ):
                listener.enterKey_value_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value_pattern" ):
                listener.exitKey_value_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_value_pattern" ):
                return visitor.visitKey_value_pattern(self)
            else:
                return visitor.visitChildren(self)




    def key_value_pattern(self):

        localctx = Python3Parser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.FALSE, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.MINUS]:
                self.state = 1038
                self.literal_expr()
                pass
            elif token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.state = 1039
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1042
            self.match(Python3Parser.COLON)
            self.state = 1043
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_star_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_double_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_star_pattern" ):
                listener.enterDouble_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_star_pattern" ):
                listener.exitDouble_star_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_star_pattern" ):
                return visitor.visitDouble_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def double_star_pattern(self):

        localctx = Python3Parser.Double_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(Python3Parser.POWER)
            self.state = 1046
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(Python3Parser.Name_or_attrContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(Python3Parser.Positional_patternsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def keyword_patterns(self):
            return self.getTypedRuleContext(Python3Parser.Keyword_patternsContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_class_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_pattern" ):
                listener.enterClass_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_pattern" ):
                listener.exitClass_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_pattern" ):
                return visitor.visitClass_pattern(self)
            else:
                return visitor.visitChildren(self)




    def class_pattern(self):

        localctx = Python3Parser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_class_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.name_or_attr()
                self.state = 1049
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1050
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1052
                self.name_or_attr()
                self.state = 1053
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1054
                self.positional_patterns()
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1055
                    self.match(Python3Parser.COMMA)


                self.state = 1058
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1060
                self.name_or_attr()
                self.state = 1061
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1062
                self.keyword_patterns()
                self.state = 1064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1063
                    self.match(Python3Parser.COMMA)


                self.state = 1066
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1068
                self.name_or_attr()
                self.state = 1069
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1070
                self.positional_patterns()
                self.state = 1071
                self.match(Python3Parser.COMMA)
                self.state = 1072
                self.keyword_patterns()
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1073
                    self.match(Python3Parser.COMMA)


                self.state = 1076
                self.match(Python3Parser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_patternsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.PatternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_positional_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_patterns" ):
                listener.enterPositional_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_patterns" ):
                listener.exitPositional_patterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositional_patterns" ):
                return visitor.visitPositional_patterns(self)
            else:
                return visitor.visitChildren(self)




    def positional_patterns(self):

        localctx = Python3Parser.Positional_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.pattern()
            self.state = 1085
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1081
                    self.match(Python3Parser.COMMA)
                    self.state = 1082
                    self.pattern() 
                self.state = 1087
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keyword_patternsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Keyword_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_keyword_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_patterns" ):
                listener.enterKeyword_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_patterns" ):
                listener.exitKeyword_patterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_patterns" ):
                return visitor.visitKeyword_patterns(self)
            else:
                return visitor.visitChildren(self)




    def keyword_patterns(self):

        localctx = Python3Parser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.keyword_pattern()
            self.state = 1093
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1089
                    self.match(Python3Parser.COMMA)
                    self.state = 1090
                    self.keyword_pattern() 
                self.state = 1095
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keyword_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_keyword_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_pattern" ):
                listener.enterKeyword_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_pattern" ):
                listener.exitKeyword_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_pattern" ):
                return visitor.visitKeyword_pattern(self)
            else:
                return visitor.visitChildren(self)




    def keyword_pattern(self):

        localctx = Python3Parser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.name()
            self.state = 1097
            self.match(Python3Parser.ASSIGN)
            self.state = 1098
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext,i)


        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(Python3Parser.LambdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 1109
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1100
                self.or_test()
                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.IF:
                    self.state = 1101
                    self.match(Python3Parser.IF)
                    self.state = 1102
                    self.or_test()
                    self.state = 1103
                    self.match(Python3Parser.ELSE)
                    self.state = 1104
                    self.test()


                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1108
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_nocond" ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_test_nocond)
        try:
            self.state = 1113
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.or_test()
                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = Python3Parser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.match(Python3Parser.LAMBDA)
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0) or _la==Python3Parser.WILDCARD:
                self.state = 1116
                self.varargslist()


            self.state = 1119
            self.match(Python3Parser.COLON)
            self.state = 1120
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef_nocond" ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = Python3Parser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(Python3Parser.LAMBDA)
            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0) or _la==Python3Parser.WILDCARD:
                self.state = 1123
                self.varargslist()


            self.state = 1126
            self.match(Python3Parser.COLON)
            self.state = 1127
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_test" ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.and_test()
            self.state = 1134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR:
                self.state = 1130
                self.match(Python3Parser.OR)
                self.state = 1131
                self.and_test()
                self.state = 1136
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_test" ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = Python3Parser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.not_test()
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.AND:
                self.state = 1138
                self.match(Python3Parser.AND)
                self.state = 1139
                self.not_test()
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(Python3Parser.ComparisonContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_test" ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_not_test)
        try:
            self.state = 1148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1145
                self.match(Python3Parser.NOT)
                self.state = 1146
                self.not_test()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1147
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = Python3Parser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.expr(0)
            self.state = 1156
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1151
                    self.comp_op()
                    self.state = 1152
                    self.expr(0) 
                self.state = 1158
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(Python3Parser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(Python3Parser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(Python3Parser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(Python3Parser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(Python3Parser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(Python3Parser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(Python3Parser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_comp_op)
        try:
            self.state = 1172
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1160
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1161
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1162
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1163
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1164
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1165
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1166
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1167
                self.match(Python3Parser.NOT)
                self.state = 1168
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1169
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1170
                self.match(Python3Parser.IS)
                self.state = 1171
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = Python3Parser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.match(Python3Parser.STAR)
            self.state = 1175
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(Python3Parser.Atom_exprContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ADD)
            else:
                return self.getToken(Python3Parser.ADD, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.MINUS)
            else:
                return self.getToken(Python3Parser.MINUS, i)

        def NOT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NOT_OP)
            else:
                return self.getToken(Python3Parser.NOT_OP, i)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def DIV(self):
            return self.getToken(Python3Parser.DIV, 0)

        def MOD(self):
            return self.getToken(Python3Parser.MOD, 0)

        def IDIV(self):
            return self.getToken(Python3Parser.IDIV, 0)

        def LEFT_SHIFT(self):
            return self.getToken(Python3Parser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(Python3Parser.AND_OP, 0)

        def XOR(self):
            return self.getToken(Python3Parser.XOR, 0)

        def OR_OP(self):
            return self.getToken(Python3Parser.OR_OP, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Python3Parser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 194
        self.enterRecursionRule(localctx, 194, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.state = 1178
                self.atom_expr()
                pass
            elif token in [Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP]:
                self.state = 1180 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1179
                        _la = self._input.LA(1)
                        if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (Python3Parser.ADD - 71)) | (1 << (Python3Parser.MINUS - 71)) | (1 << (Python3Parser.NOT_OP - 71)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1182 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

                self.state = 1184
                self.expr(7)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1210
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1208
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                    if la_ == 1:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1187
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1188
                        self.match(Python3Parser.POWER)
                        self.state = 1189
                        self.expr(9)
                        pass

                    elif la_ == 2:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1190
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1191
                        _la = self._input.LA(1)
                        if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (Python3Parser.STAR - 56)) | (1 << (Python3Parser.DIV - 56)) | (1 << (Python3Parser.MOD - 56)) | (1 << (Python3Parser.IDIV - 56)) | (1 << (Python3Parser.AT - 56)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1192
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1193
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1194
                        _la = self._input.LA(1)
                        if not(_la==Python3Parser.ADD or _la==Python3Parser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1195
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1196
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1197
                        _la = self._input.LA(1)
                        if not(_la==Python3Parser.LEFT_SHIFT or _la==Python3Parser.RIGHT_SHIFT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1198
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1199
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1200
                        self.match(Python3Parser.AND_OP)
                        self.state = 1201
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1202
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1203
                        self.match(Python3Parser.XOR)
                        self.state = 1204
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = Python3Parser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1205
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1206
                        self.match(Python3Parser.OR_OP)
                        self.state = 1207
                        self.expr(2)
                        pass

             
                self.state = 1212
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Atom_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(Python3Parser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_expr" ):
                return visitor.visitAtom_expr(self)
            else:
                return visitor.visitChildren(self)




    def atom_expr(self):

        localctx = Python3Parser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AWAIT:
                self.state = 1213
                self.match(Python3Parser.AWAIT)


            self.state = 1216
            self.atom()
            self.state = 1220
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1217
                    self.trailer() 
                self.state = 1222
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext,0)


        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def ELLIPSIS(self):
            return self.getToken(Python3Parser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 1251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1223
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1226
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 1224
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                    self.state = 1225
                    self.testlist_comp()
                    pass
                elif token in [Python3Parser.CLOSE_PAREN]:
                    pass
                else:
                    pass
                self.state = 1228
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1229
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0):
                    self.state = 1230
                    self.testlist_comp()


                self.state = 1233
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1234
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0):
                    self.state = 1235
                    self.dictorsetmaker()


                self.state = 1238
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1239
                self.expr_wildcard()
                pass
            elif token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1240
                self.name()
                pass
            elif token in [Python3Parser.NUMBER]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1241
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [Python3Parser.STRING]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1243 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1242
                        self.match(Python3Parser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1245 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

                pass
            elif token in [Python3Parser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1247
                self.match(Python3Parser.ELLIPSIS)
                pass
            elif token in [Python3Parser.NONE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1248
                self.match(Python3Parser.NONE)
                pass
            elif token in [Python3Parser.TRUE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1249
                self.match(Python3Parser.TRUE)
                pass
            elif token in [Python3Parser.FALSE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1250
                self.match(Python3Parser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def UNDERSCORE(self):
            return self.getToken(Python3Parser.UNDERSCORE, 0)

        def MATCH(self):
            return self.getToken(Python3Parser.MATCH, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = Python3Parser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.state = 1255
                self.test()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 1256
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                self.state = 1259
                self.comp_for()
                pass
            elif token in [Python3Parser.CLOSE_PAREN, Python3Parser.COMMA, Python3Parser.CLOSE_BRACK]:
                self.state = 1267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1260
                        self.match(Python3Parser.COMMA)
                        self.state = 1263
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                            self.state = 1261
                            self.test()
                            pass
                        elif token in [Python3Parser.STAR]:
                            self.state = 1262
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1269
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1270
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(Python3Parser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(Python3Parser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1286
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1275
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0):
                    self.state = 1276
                    self.arglist()


                self.state = 1279
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1280
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 1281
                self.subscriptlist()
                self.state = 1282
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1284
                self.match(Python3Parser.DOT)
                self.state = 1285
                self.name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Subscript_Context)
            else:
                return self.getTypedRuleContext(Python3Parser.Subscript_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = Python3Parser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.subscript_()
            self.state = 1293
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1289
                    self.match(Python3Parser.COMMA)
                    self.state = 1290
                    self.subscript_() 
                self.state = 1295
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1296
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subscript_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(Python3Parser.SliceopContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subscript_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_" ):
                listener.enterSubscript_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_" ):
                listener.exitSubscript_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_" ):
                return visitor.visitSubscript_(self)
            else:
                return visitor.visitChildren(self)




    def subscript_(self):

        localctx = Python3Parser.Subscript_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_subscript_)
        self._la = 0 # Token type
        try:
            self.state = 1310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1299
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0):
                    self.state = 1300
                    self.test()


                self.state = 1303
                self.match(Python3Parser.COLON)
                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0):
                    self.state = 1304
                    self.test()


                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COLON:
                    self.state = 1307
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = Python3Parser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312
            self.match(Python3Parser.COLON)
            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0):
                self.state = 1313
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = Python3Parser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1318
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.state = 1316
                self.expr(0)
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 1317
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1327
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1320
                    self.match(Python3Parser.COMMA)
                    self.state = 1323
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                        self.state = 1321
                        self.expr(0)
                        pass
                    elif token in [Python3Parser.STAR]:
                        self.state = 1322
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1329
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

            self.state = 1331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1330
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.test()
            self.state = 1338
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1334
                    self.match(Python3Parser.COMMA)
                    self.state = 1335
                    self.test() 
                self.state = 1340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

            self.state = 1342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1341
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.POWER)
            else:
                return self.getToken(Python3Parser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1350
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                    self.state = 1344
                    self.test()
                    self.state = 1345
                    self.match(Python3Parser.COLON)
                    self.state = 1346
                    self.test()
                    pass
                elif token in [Python3Parser.POWER]:
                    self.state = 1348
                    self.match(Python3Parser.POWER)
                    self.state = 1349
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1370
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                    self.state = 1352
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 1364
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1353
                            self.match(Python3Parser.COMMA)
                            self.state = 1360
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                                self.state = 1354
                                self.test()
                                self.state = 1355
                                self.match(Python3Parser.COLON)
                                self.state = 1356
                                self.test()
                                pass
                            elif token in [Python3Parser.POWER]:
                                self.state = 1358
                                self.match(Python3Parser.POWER)
                                self.state = 1359
                                self.expr(0)
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1366
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                    self.state = 1368
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 1367
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1374
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                    self.state = 1372
                    self.test()
                    pass
                elif token in [Python3Parser.STAR]:
                    self.state = 1373
                    self.star_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1390
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                    self.state = 1376
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 1384
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1377
                            self.match(Python3Parser.COMMA)
                            self.state = 1380
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                                self.state = 1378
                                self.test()
                                pass
                            elif token in [Python3Parser.STAR]:
                                self.state = 1379
                                self.star_expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1386
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

                    self.state = 1388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 1387
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = Python3Parser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.match(Python3Parser.CLASS)
            self.state = 1398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1395
                self.name()
                pass

            elif la_ == 2:
                self.state = 1396
                self.simple_wildcard()
                pass

            elif la_ == 3:
                self.state = 1397
                self.var_wildcard()
                pass


            self.state = 1405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 1400
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0):
                    self.state = 1401
                    self.arglist()


                self.state = 1404
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 1407
            self.match(Python3Parser.COLON)
            self.state = 1408
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.argument()
            self.state = 1415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1411
                    self.match(Python3Parser.COMMA)
                    self.state = 1412
                    self.argument() 
                self.state = 1417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

            self.state = 1419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1418
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Expr_wildcardContext,0)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = Python3Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1421
                self.expr_wildcard()
                pass

            elif la_ == 2:
                self.state = 1422
                self.test()
                self.state = 1424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASYNC or _la==Python3Parser.FOR:
                    self.state = 1423
                    self.comp_for()


                pass

            elif la_ == 3:
                self.state = 1426
                self.test()
                self.state = 1427
                self.match(Python3Parser.ASSIGN)
                self.state = 1428
                self.test()
                pass

            elif la_ == 4:
                self.state = 1430
                self.match(Python3Parser.POWER)
                self.state = 1431
                self.test()
                pass

            elif la_ == 5:
                self.state = 1432
                self.match(Python3Parser.STAR)
                self.state = 1433
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(Python3Parser.Comp_ifContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_comp_iter)
        try:
            self.state = 1438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1436
                self.comp_for()
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1437
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASYNC:
                self.state = 1440
                self.match(Python3Parser.ASYNC)


            self.state = 1443
            self.match(Python3Parser.FOR)
            self.state = 1444
            self.exprlist()
            self.state = 1445
            self.match(Python3Parser.IN)
            self.state = 1446
            self.or_test()
            self.state = 1448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.ASYNC) | (1 << Python3Parser.FOR) | (1 << Python3Parser.IF))) != 0):
                self.state = 1447
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_if" ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = Python3Parser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self.match(Python3Parser.IF)
            self.state = 1451
            self.test_nocond()
            self.state = 1453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.ASYNC) | (1 << Python3Parser.FOR) | (1 << Python3Parser.IF))) != 0):
                self.state = 1452
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Encoding_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_encoding_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncoding_decl" ):
                listener.enterEncoding_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncoding_decl" ):
                listener.exitEncoding_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncoding_decl" ):
                return visitor.visitEncoding_decl(self)
            else:
                return visitor.visitChildren(self)




    def encoding_decl(self):

        localctx = Python3Parser.Encoding_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_encoding_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(Python3Parser.Yield_argContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = Python3Parser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self.match(Python3Parser.YIELD)
            self.state = 1459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.WILDCARD - 64)))) != 0):
                self.state = 1458
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = Python3Parser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_yield_arg)
        try:
            self.state = 1464
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1461
                self.match(Python3Parser.FROM)
                self.state = 1462
                self.test()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1463
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_strings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrings" ):
                listener.enterStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrings" ):
                listener.exitStrings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrings" ):
                return visitor.visitStrings(self)
            else:
                return visitor.visitChildren(self)




    def strings(self):

        localctx = Python3Parser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_strings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1466
                self.match(Python3Parser.STRING)
                self.state = 1469 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.STRING):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wildcard_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_wildcard_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_type" ):
                listener.enterWildcard_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_type" ):
                listener.exitWildcard_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_type" ):
                return visitor.visitWildcard_type(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_type(self):

        localctx = Python3Parser.Wildcard_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_wildcard_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self.match(Python3Parser.OPEN_BRACK)
            self.state = 1472
            self.name()
            self.state = 1477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 1473
                self.match(Python3Parser.COMMA)
                self.state = 1474
                self.name()
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1480
            self.match(Python3Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wildcard_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.INTEGER)
            else:
                return self.getToken(Python3Parser.INTEGER, i)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_wildcard_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_number" ):
                listener.enterWildcard_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_number" ):
                listener.exitWildcard_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_number" ):
                return visitor.visitWildcard_number(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_number(self):

        localctx = Python3Parser.Wildcard_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_wildcard_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.match(Python3Parser.OPEN_BRACE)
            self.state = 1483
            self.match(Python3Parser.INTEGER)

            self.state = 1484
            self.match(Python3Parser.COMMA)
            self.state = 1485
            self.match(Python3Parser.INTEGER)
            self.state = 1487
            self.match(Python3Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_wildcardContext,0)


        def double_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Double_wildcardContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Var_wildcardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_expr_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_wildcard" ):
                listener.enterExpr_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_wildcard" ):
                listener.exitExpr_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_wildcard" ):
                return visitor.visitExpr_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def expr_wildcard(self):

        localctx = Python3Parser.Expr_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_expr_wildcard)
        try:
            self.state = 1492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1489
                self.simple_wildcard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1490
                self.double_wildcard()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1491
                self.var_wildcard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def wildcard_number(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_numberContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_wildcard" ):
                listener.enterSimple_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_wildcard" ):
                listener.exitSimple_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_wildcard" ):
                return visitor.visitSimple_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def simple_wildcard(self):

        localctx = Python3Parser.Simple_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_simple_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self.match(Python3Parser.WILDCARD)
            self.state = 1496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1495
                self.wildcard_type()


            self.state = 1499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 1498
                self.wildcard_number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_double_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_wildcard" ):
                listener.enterDouble_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_wildcard" ):
                listener.exitDouble_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_wildcard" ):
                return visitor.visitDouble_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def double_wildcard(self):

        localctx = Python3Parser.Double_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_double_wildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self.match(Python3Parser.WILDCARD)
            self.state = 1503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_BRACK:
                self.state = 1502
                self.wildcard_type()


            self.state = 1505
            self.match(Python3Parser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Var_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_var_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_wildcard" ):
                listener.enterVar_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_wildcard" ):
                listener.exitVar_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_wildcard" ):
                return visitor.visitVar_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def var_wildcard(self):

        localctx = Python3Parser.Var_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_var_wildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.match(Python3Parser.WILDCARD)
            self.state = 1509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_BRACK:
                self.state = 1508
                self.wildcard_type()


            self.state = 1511
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_compound_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Simple_compound_wildcardContext,0)


        def multiple_compound_wildcard(self):
            return self.getTypedRuleContext(Python3Parser.Multiple_compound_wildcardContext,0)


        def strict_mode(self):
            return self.getTypedRuleContext(Python3Parser.Strict_modeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_wildcard" ):
                listener.enterCompound_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_wildcard" ):
                listener.exitCompound_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_wildcard" ):
                return visitor.visitCompound_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def compound_wildcard(self):

        localctx = Python3Parser.Compound_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_compound_wildcard)
        try:
            self.state = 1516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1513
                self.simple_compound_wildcard()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1514
                self.multiple_compound_wildcard()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1515
                self.strict_mode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_compound_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def wildcard_number(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_numberContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_compound_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_compound_wildcard" ):
                listener.enterSimple_compound_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_compound_wildcard" ):
                listener.exitSimple_compound_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_compound_wildcard" ):
                return visitor.visitSimple_compound_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def simple_compound_wildcard(self):

        localctx = Python3Parser.Simple_compound_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_simple_compound_wildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            self.match(Python3Parser.WILDCARD)
            self.state = 1520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_BRACK:
                self.state = 1519
                self.wildcard_type()


            self.state = 1522
            self.match(Python3Parser.COLON)
            self.state = 1524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 1523
                self.wildcard_number()


            self.state = 1526
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiple_compound_wildcardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(Python3Parser.WILDCARD, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def wildcard_type(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_typeContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_multiple_compound_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiple_compound_wildcard" ):
                listener.enterMultiple_compound_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiple_compound_wildcard" ):
                listener.exitMultiple_compound_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiple_compound_wildcard" ):
                return visitor.visitMultiple_compound_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def multiple_compound_wildcard(self):

        localctx = Python3Parser.Multiple_compound_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_multiple_compound_wildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1528
            self.match(Python3Parser.WILDCARD)
            self.state = 1530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_BRACK:
                self.state = 1529
                self.wildcard_type()


            self.state = 1532
            self.match(Python3Parser.COLON)
            self.state = 1533
            self.match(Python3Parser.STAR)
            self.state = 1534
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Strict_modeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNTAX_STRICT_START(self):
            return self.getToken(Python3Parser.SYNTAX_STRICT_START, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_strict_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrict_mode" ):
                listener.enterStrict_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrict_mode" ):
                listener.exitStrict_mode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrict_mode" ):
                return visitor.visitStrict_mode(self)
            else:
                return visitor.visitChildren(self)




    def strict_mode(self):

        localctx = Python3Parser.Strict_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_strict_mode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.match(Python3Parser.SYNTAX_STRICT_START)
            self.state = 1544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.ASSERT, Python3Parser.AWAIT, Python3Parser.BREAK, Python3Parser.CONTINUE, Python3Parser.DEL, Python3Parser.FALSE, Python3Parser.FROM, Python3Parser.GLOBAL, Python3Parser.IMPORT, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NONLOCAL, Python3Parser.NOT, Python3Parser.PASS, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.YIELD, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.WILDCARD]:
                self.state = 1537
                self.simple_stmts()
                pass
            elif token in [Python3Parser.NEWLINE]:
                self.state = 1538
                self.match(Python3Parser.NEWLINE)
                self.state = 1540 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1539
                    self.stmt()
                    self.state = 1542 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.DEF) | (1 << Python3Parser.DEL) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.FROM) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.IF) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.NOT) | (1 << Python3Parser.PASS) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.TRY) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.WITH) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.AT - 64)) | (1 << (Python3Parser.WILDCARD - 64)) | (1 << (Python3Parser.SYNTAX_STRICT_START - 64)))) != 0)):
                        break

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1546
            self.match(Python3Parser.CLOSE_BRACK)
            self.state = 1547
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[60] = self.literal_pattern_sempred
        self._predicates[61] = self.literal_expr_sempred
        self._predicates[68] = self.pattern_capture_target_sempred
        self._predicates[70] = self.value_pattern_sempred
        self._predicates[97] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def literal_pattern_sempred(self, localctx:Literal_patternContext, predIndex:int):
            if predIndex == 0:
                return  self.CannotBePlusMinus() 
         

    def literal_expr_sempred(self, localctx:Literal_exprContext, predIndex:int):
            if predIndex == 1:
                return  self.CannotBePlusMinus() 
         

    def pattern_capture_target_sempred(self, localctx:Pattern_capture_targetContext, predIndex:int):
            if predIndex == 2:
                return  self.CannotBeDotLpEq() 
         

    def value_pattern_sempred(self, localctx:Value_patternContext, predIndex:int):
            if predIndex == 3:
                return  self.CannotBeDotLpEq() 
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         




